
flightsoftwaremx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b4  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800977c  0800977c  0000a77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b3c  08009b3c  0000b01c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b44  08009b44  0000b01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b44  08009b44  0000ab44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b48  08009b48  0000ab48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009b4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  2000001c  08009b68  0000b01c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08009b68  0000b7d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b01c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc6f  00000000  00000000  0000b04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ad  00000000  00000000  00028cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  0002d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cb  00000000  00000000  0002ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272ae  00000000  00000000  000303cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025549  00000000  00000000  00057679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9486  00000000  00000000  0007cbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166048  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007130  00000000  00000000  0016608c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016d1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009764 	.word	0x08009764

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000020 	.word	0x20000020
 8000204:	08009764 	.word	0x08009764

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_d2f>:
 8000580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000584:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000588:	bf24      	itt	cs
 800058a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800058e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000592:	d90d      	bls.n	80005b0 <__aeabi_d2f+0x30>
 8000594:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000598:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800059c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005a0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a8:	bf08      	it	eq
 80005aa:	f020 0001 	biceq.w	r0, r0, #1
 80005ae:	4770      	bx	lr
 80005b0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80005b4:	d121      	bne.n	80005fa <__aeabi_d2f+0x7a>
 80005b6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80005ba:	bfbc      	itt	lt
 80005bc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80005c0:	4770      	bxlt	lr
 80005c2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005ca:	f1c2 0218 	rsb	r2, r2, #24
 80005ce:	f1c2 0c20 	rsb	ip, r2, #32
 80005d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	bf18      	it	ne
 80005dc:	f040 0001 	orrne.w	r0, r0, #1
 80005e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ec:	ea40 000c 	orr.w	r0, r0, ip
 80005f0:	fa23 f302 	lsr.w	r3, r3, r2
 80005f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f8:	e7cc      	b.n	8000594 <__aeabi_d2f+0x14>
 80005fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005fe:	d107      	bne.n	8000610 <__aeabi_d2f+0x90>
 8000600:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000604:	bf1e      	ittt	ne
 8000606:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800060a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800060e:	4770      	bxne	lr
 8000610:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_uldivmod>:
 8000620:	b953      	cbnz	r3, 8000638 <__aeabi_uldivmod+0x18>
 8000622:	b94a      	cbnz	r2, 8000638 <__aeabi_uldivmod+0x18>
 8000624:	2900      	cmp	r1, #0
 8000626:	bf08      	it	eq
 8000628:	2800      	cmpeq	r0, #0
 800062a:	bf1c      	itt	ne
 800062c:	f04f 31ff 	movne.w	r1, #4294967295
 8000630:	f04f 30ff 	movne.w	r0, #4294967295
 8000634:	f000 b96a 	b.w	800090c <__aeabi_idiv0>
 8000638:	f1ad 0c08 	sub.w	ip, sp, #8
 800063c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000640:	f000 f806 	bl	8000650 <__udivmoddi4>
 8000644:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <__udivmoddi4>:
 8000650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000654:	9d08      	ldr	r5, [sp, #32]
 8000656:	460c      	mov	r4, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d14e      	bne.n	80006fa <__udivmoddi4+0xaa>
 800065c:	4694      	mov	ip, r2
 800065e:	458c      	cmp	ip, r1
 8000660:	4686      	mov	lr, r0
 8000662:	fab2 f282 	clz	r2, r2
 8000666:	d962      	bls.n	800072e <__udivmoddi4+0xde>
 8000668:	b14a      	cbz	r2, 800067e <__udivmoddi4+0x2e>
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	4091      	lsls	r1, r2
 8000670:	fa20 f303 	lsr.w	r3, r0, r3
 8000674:	fa0c fc02 	lsl.w	ip, ip, r2
 8000678:	4319      	orrs	r1, r3
 800067a:	fa00 fe02 	lsl.w	lr, r0, r2
 800067e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000682:	fa1f f68c 	uxth.w	r6, ip
 8000686:	fbb1 f4f7 	udiv	r4, r1, r7
 800068a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800068e:	fb07 1114 	mls	r1, r7, r4, r1
 8000692:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000696:	fb04 f106 	mul.w	r1, r4, r6
 800069a:	4299      	cmp	r1, r3
 800069c:	d90a      	bls.n	80006b4 <__udivmoddi4+0x64>
 800069e:	eb1c 0303 	adds.w	r3, ip, r3
 80006a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80006a6:	f080 8112 	bcs.w	80008ce <__udivmoddi4+0x27e>
 80006aa:	4299      	cmp	r1, r3
 80006ac:	f240 810f 	bls.w	80008ce <__udivmoddi4+0x27e>
 80006b0:	3c02      	subs	r4, #2
 80006b2:	4463      	add	r3, ip
 80006b4:	1a59      	subs	r1, r3, r1
 80006b6:	fa1f f38e 	uxth.w	r3, lr
 80006ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80006be:	fb07 1110 	mls	r1, r7, r0, r1
 80006c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c6:	fb00 f606 	mul.w	r6, r0, r6
 80006ca:	429e      	cmp	r6, r3
 80006cc:	d90a      	bls.n	80006e4 <__udivmoddi4+0x94>
 80006ce:	eb1c 0303 	adds.w	r3, ip, r3
 80006d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80006d6:	f080 80fc 	bcs.w	80008d2 <__udivmoddi4+0x282>
 80006da:	429e      	cmp	r6, r3
 80006dc:	f240 80f9 	bls.w	80008d2 <__udivmoddi4+0x282>
 80006e0:	4463      	add	r3, ip
 80006e2:	3802      	subs	r0, #2
 80006e4:	1b9b      	subs	r3, r3, r6
 80006e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006ea:	2100      	movs	r1, #0
 80006ec:	b11d      	cbz	r5, 80006f6 <__udivmoddi4+0xa6>
 80006ee:	40d3      	lsrs	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	e9c5 3200 	strd	r3, r2, [r5]
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d905      	bls.n	800070a <__udivmoddi4+0xba>
 80006fe:	b10d      	cbz	r5, 8000704 <__udivmoddi4+0xb4>
 8000700:	e9c5 0100 	strd	r0, r1, [r5]
 8000704:	2100      	movs	r1, #0
 8000706:	4608      	mov	r0, r1
 8000708:	e7f5      	b.n	80006f6 <__udivmoddi4+0xa6>
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d146      	bne.n	80007a0 <__udivmoddi4+0x150>
 8000712:	42a3      	cmp	r3, r4
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xcc>
 8000716:	4290      	cmp	r0, r2
 8000718:	f0c0 80f0 	bcc.w	80008fc <__udivmoddi4+0x2ac>
 800071c:	1a86      	subs	r6, r0, r2
 800071e:	eb64 0303 	sbc.w	r3, r4, r3
 8000722:	2001      	movs	r0, #1
 8000724:	2d00      	cmp	r5, #0
 8000726:	d0e6      	beq.n	80006f6 <__udivmoddi4+0xa6>
 8000728:	e9c5 6300 	strd	r6, r3, [r5]
 800072c:	e7e3      	b.n	80006f6 <__udivmoddi4+0xa6>
 800072e:	2a00      	cmp	r2, #0
 8000730:	f040 8090 	bne.w	8000854 <__udivmoddi4+0x204>
 8000734:	eba1 040c 	sub.w	r4, r1, ip
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	fa1f f78c 	uxth.w	r7, ip
 8000740:	2101      	movs	r1, #1
 8000742:	fbb4 f6f8 	udiv	r6, r4, r8
 8000746:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800074a:	fb08 4416 	mls	r4, r8, r6, r4
 800074e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000752:	fb07 f006 	mul.w	r0, r7, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d908      	bls.n	800076c <__udivmoddi4+0x11c>
 800075a:	eb1c 0303 	adds.w	r3, ip, r3
 800075e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x11a>
 8000764:	4298      	cmp	r0, r3
 8000766:	f200 80cd 	bhi.w	8000904 <__udivmoddi4+0x2b4>
 800076a:	4626      	mov	r6, r4
 800076c:	1a1c      	subs	r4, r3, r0
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb4 f0f8 	udiv	r0, r4, r8
 8000776:	fb08 4410 	mls	r4, r8, r0, r4
 800077a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077e:	fb00 f707 	mul.w	r7, r0, r7
 8000782:	429f      	cmp	r7, r3
 8000784:	d908      	bls.n	8000798 <__udivmoddi4+0x148>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 34ff 	add.w	r4, r0, #4294967295
 800078e:	d202      	bcs.n	8000796 <__udivmoddi4+0x146>
 8000790:	429f      	cmp	r7, r3
 8000792:	f200 80b0 	bhi.w	80008f6 <__udivmoddi4+0x2a6>
 8000796:	4620      	mov	r0, r4
 8000798:	1bdb      	subs	r3, r3, r7
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	e7a5      	b.n	80006ec <__udivmoddi4+0x9c>
 80007a0:	f1c1 0620 	rsb	r6, r1, #32
 80007a4:	408b      	lsls	r3, r1
 80007a6:	fa22 f706 	lsr.w	r7, r2, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80007b0:	fa04 f301 	lsl.w	r3, r4, r1
 80007b4:	ea43 030c 	orr.w	r3, r3, ip
 80007b8:	40f4      	lsrs	r4, r6
 80007ba:	fa00 f801 	lsl.w	r8, r0, r1
 80007be:	0c38      	lsrs	r0, r7, #16
 80007c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007c4:	fbb4 fef0 	udiv	lr, r4, r0
 80007c8:	fa1f fc87 	uxth.w	ip, r7
 80007cc:	fb00 441e 	mls	r4, r0, lr, r4
 80007d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d4:	fb0e f90c 	mul.w	r9, lr, ip
 80007d8:	45a1      	cmp	r9, r4
 80007da:	fa02 f201 	lsl.w	r2, r2, r1
 80007de:	d90a      	bls.n	80007f6 <__udivmoddi4+0x1a6>
 80007e0:	193c      	adds	r4, r7, r4
 80007e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007e6:	f080 8084 	bcs.w	80008f2 <__udivmoddi4+0x2a2>
 80007ea:	45a1      	cmp	r9, r4
 80007ec:	f240 8081 	bls.w	80008f2 <__udivmoddi4+0x2a2>
 80007f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	eba4 0409 	sub.w	r4, r4, r9
 80007fa:	fa1f f983 	uxth.w	r9, r3
 80007fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000802:	fb00 4413 	mls	r4, r0, r3, r4
 8000806:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800080a:	fb03 fc0c 	mul.w	ip, r3, ip
 800080e:	45a4      	cmp	ip, r4
 8000810:	d907      	bls.n	8000822 <__udivmoddi4+0x1d2>
 8000812:	193c      	adds	r4, r7, r4
 8000814:	f103 30ff 	add.w	r0, r3, #4294967295
 8000818:	d267      	bcs.n	80008ea <__udivmoddi4+0x29a>
 800081a:	45a4      	cmp	ip, r4
 800081c:	d965      	bls.n	80008ea <__udivmoddi4+0x29a>
 800081e:	3b02      	subs	r3, #2
 8000820:	443c      	add	r4, r7
 8000822:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000826:	fba0 9302 	umull	r9, r3, r0, r2
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	429c      	cmp	r4, r3
 8000830:	46ce      	mov	lr, r9
 8000832:	469c      	mov	ip, r3
 8000834:	d351      	bcc.n	80008da <__udivmoddi4+0x28a>
 8000836:	d04e      	beq.n	80008d6 <__udivmoddi4+0x286>
 8000838:	b155      	cbz	r5, 8000850 <__udivmoddi4+0x200>
 800083a:	ebb8 030e 	subs.w	r3, r8, lr
 800083e:	eb64 040c 	sbc.w	r4, r4, ip
 8000842:	fa04 f606 	lsl.w	r6, r4, r6
 8000846:	40cb      	lsrs	r3, r1
 8000848:	431e      	orrs	r6, r3
 800084a:	40cc      	lsrs	r4, r1
 800084c:	e9c5 6400 	strd	r6, r4, [r5]
 8000850:	2100      	movs	r1, #0
 8000852:	e750      	b.n	80006f6 <__udivmoddi4+0xa6>
 8000854:	f1c2 0320 	rsb	r3, r2, #32
 8000858:	fa20 f103 	lsr.w	r1, r0, r3
 800085c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000860:	fa24 f303 	lsr.w	r3, r4, r3
 8000864:	4094      	lsls	r4, r2
 8000866:	430c      	orrs	r4, r1
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000870:	fa1f f78c 	uxth.w	r7, ip
 8000874:	fbb3 f0f8 	udiv	r0, r3, r8
 8000878:	fb08 3110 	mls	r1, r8, r0, r3
 800087c:	0c23      	lsrs	r3, r4, #16
 800087e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000882:	fb00 f107 	mul.w	r1, r0, r7
 8000886:	4299      	cmp	r1, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x24c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000892:	d22c      	bcs.n	80008ee <__udivmoddi4+0x29e>
 8000894:	4299      	cmp	r1, r3
 8000896:	d92a      	bls.n	80008ee <__udivmoddi4+0x29e>
 8000898:	3802      	subs	r0, #2
 800089a:	4463      	add	r3, ip
 800089c:	1a5b      	subs	r3, r3, r1
 800089e:	b2a4      	uxth	r4, r4
 80008a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80008a4:	fb08 3311 	mls	r3, r8, r1, r3
 80008a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008ac:	fb01 f307 	mul.w	r3, r1, r7
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x276>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80008bc:	d213      	bcs.n	80008e6 <__udivmoddi4+0x296>
 80008be:	42a3      	cmp	r3, r4
 80008c0:	d911      	bls.n	80008e6 <__udivmoddi4+0x296>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	1ae4      	subs	r4, r4, r3
 80008c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008cc:	e739      	b.n	8000742 <__udivmoddi4+0xf2>
 80008ce:	4604      	mov	r4, r0
 80008d0:	e6f0      	b.n	80006b4 <__udivmoddi4+0x64>
 80008d2:	4608      	mov	r0, r1
 80008d4:	e706      	b.n	80006e4 <__udivmoddi4+0x94>
 80008d6:	45c8      	cmp	r8, r9
 80008d8:	d2ae      	bcs.n	8000838 <__udivmoddi4+0x1e8>
 80008da:	ebb9 0e02 	subs.w	lr, r9, r2
 80008de:	eb63 0c07 	sbc.w	ip, r3, r7
 80008e2:	3801      	subs	r0, #1
 80008e4:	e7a8      	b.n	8000838 <__udivmoddi4+0x1e8>
 80008e6:	4631      	mov	r1, r6
 80008e8:	e7ed      	b.n	80008c6 <__udivmoddi4+0x276>
 80008ea:	4603      	mov	r3, r0
 80008ec:	e799      	b.n	8000822 <__udivmoddi4+0x1d2>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e7d4      	b.n	800089c <__udivmoddi4+0x24c>
 80008f2:	46d6      	mov	lr, sl
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1a6>
 80008f6:	4463      	add	r3, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	e74d      	b.n	8000798 <__udivmoddi4+0x148>
 80008fc:	4606      	mov	r6, r0
 80008fe:	4623      	mov	r3, r4
 8000900:	4608      	mov	r0, r1
 8000902:	e70f      	b.n	8000724 <__udivmoddi4+0xd4>
 8000904:	3e02      	subs	r6, #2
 8000906:	4463      	add	r3, ip
 8000908:	e730      	b.n	800076c <__udivmoddi4+0x11c>
 800090a:	bf00      	nop

0800090c <__aeabi_idiv0>:
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop

08000910 <ad7124_noCheckReadRegister>:
#include <stm32f4xx_hal.h>
#include "AD7124.h"

int8_t ad7124_noCheckReadRegister(struct ad7124_dev *dev, struct ad7124_registerData *p_reg)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b08b      	sub	sp, #44	@ 0x2c
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
    int8_t flag = 0, i = 0, check8 = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	77fb      	strb	r3, [r7, #31]
 800091e:	2300      	movs	r3, #0
 8000920:	77bb      	strb	r3, [r7, #30]
 8000922:	2300      	movs	r3, #0
 8000924:	777b      	strb	r3, [r7, #29]
    uint8_t txBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000926:	4a65      	ldr	r2, [pc, #404]	@ (8000abc <ad7124_noCheckReadRegister+0x1ac>)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000930:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t rxBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000934:	4a61      	ldr	r2, [pc, #388]	@ (8000abc <ad7124_noCheckReadRegister+0x1ac>)
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800093e:	e883 0003 	stmia.w	r3, {r0, r1}

    // Build Command word
    txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg->addr);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800094c:	b25b      	sxtb	r3, r3
 800094e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000952:	b25b      	sxtb	r3, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	743b      	strb	r3, [r7, #16]

    /*
     * If this is an AD7124_DATA register read, and the DATA_STATUS bit is set
     * in ADC_CONTROL, need to read 4, not 3 bytes for DATA with flag
     */
    if ((p_reg->addr == AD7124_DATA_REG) &&
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d109      	bne.n	8000974 <ad7124_noCheckReadRegister+0x64>
        (dev->regs[AD7124_ADC_Control].value & AD7124_ADC_CTRL_REG_DATA_STATUS))
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	3310      	adds	r3, #16
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    if ((p_reg->addr == AD7124_DATA_REG) &&
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <ad7124_noCheckReadRegister+0x64>
        check8 = 1;
 8000970:	2301      	movs	r3, #1
 8000972:	777b      	strb	r3, [r7, #29]

    uint16_t length = ((dev->useCRC != AD7124_DISABLE_CRC) ? p_reg->size + 1 : p_reg->size);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <ad7124_noCheckReadRegister+0x7a>
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	b29b      	uxth	r3, r3
 8000984:	3301      	adds	r3, #1
 8000986:	b29b      	uxth	r3, r3
 8000988:	e002      	b.n	8000990 <ad7124_noCheckReadRegister+0x80>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	b29b      	uxth	r3, r3
 8000990:	837b      	strh	r3, [r7, #26]

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6858      	ldr	r0, [r3, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	891b      	ldrh	r3, [r3, #8]
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	f005 fbe7 	bl	8006170 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_TransmitReceive(dev->hspi, &txBuf[0], &rxBuf[0], length, HAL_MAX_DELAY) != HAL_OK);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	8b7b      	ldrh	r3, [r7, #26]
 80009a8:	f107 0208 	add.w	r2, r7, #8
 80009ac:	f107 0110 	add.w	r1, r7, #16
 80009b0:	f04f 34ff 	mov.w	r4, #4294967295
 80009b4:	9400      	str	r4, [sp, #0]
 80009b6:	f007 fc69 	bl	800828c <HAL_SPI_TransmitReceive>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	77fb      	strb	r3, [r7, #31]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6858      	ldr	r0, [r3, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	891b      	ldrh	r3, [r3, #8]
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	f005 fbcc 	bl	8006170 <HAL_GPIO_WritePin>

    if (flag)
 80009d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <ad7124_noCheckReadRegister+0xd4>
        return 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e066      	b.n	8000ab2 <ad7124_noCheckReadRegister+0x1a2>

    // Check the CRC
    if (dev->useCRC == AD7124_USE_CRC)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d131      	bne.n	8000a52 <ad7124_noCheckReadRegister+0x142>
    {
        txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg->addr);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	743b      	strb	r3, [r7, #16]
        for (i = 1; i < p_reg->size + 2; ++i)
 8000a04:	2301      	movs	r3, #1
 8000a06:	77bb      	strb	r3, [r7, #30]
 8000a08:	e00f      	b.n	8000a2a <ad7124_noCheckReadRegister+0x11a>
            txBuf[i] = rxBuf[i];
 8000a0a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8000a0e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000a12:	3220      	adds	r2, #32
 8000a14:	443a      	add	r2, r7
 8000a16:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000a1a:	3320      	adds	r3, #32
 8000a1c:	443b      	add	r3, r7
 8000a1e:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (i = 1; i < p_reg->size + 2; ++i)
 8000a22:	7fbb      	ldrb	r3, [r7, #30]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	77bb      	strb	r3, [r7, #30]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dae8      	bge.n	8000a0a <ad7124_noCheckReadRegister+0xfa>
        flag = ad7124_computeCrc8(txBuf, p_reg->size + 2);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	3302      	adds	r3, #2
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f9fa 	bl	8000e42 <ad7124_computeCrc8>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	77fb      	strb	r3, [r7, #31]
    }

    if (check8 != 0)
 8000a52:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <ad7124_noCheckReadRegister+0x150>
    {
        /* readRegister checksum failed. */
        return -2;
 8000a5a:	f06f 0301 	mvn.w	r3, #1
 8000a5e:	e028      	b.n	8000ab2 <ad7124_noCheckReadRegister+0x1a2>
    }

    if (flag)
 8000a60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <ad7124_noCheckReadRegister+0x15c>
        return 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e022      	b.n	8000ab2 <ad7124_noCheckReadRegister+0x1a2>

    // Build the result
    p_reg->value = 0;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
    for (i = 1; i < p_reg->size + 1; i++)
 8000a72:	2301      	movs	r3, #1
 8000a74:	77bb      	strb	r3, [r7, #30]
 8000a76:	e015      	b.n	8000aa4 <ad7124_noCheckReadRegister+0x194>
    {
        p_reg->value <<= 8;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	021a      	lsls	r2, r3, #8
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	605a      	str	r2, [r3, #4]
        p_reg->value += rxBuf[i];
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8000a8a:	3220      	adds	r2, #32
 8000a8c:	443a      	add	r2, r7
 8000a8e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000a92:	441a      	add	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	605a      	str	r2, [r3, #4]
    for (i = 1; i < p_reg->size + 1; i++)
 8000a98:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	77bb      	strb	r3, [r7, #30]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dae3      	bge.n	8000a78 <ad7124_noCheckReadRegister+0x168>
    }

    return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	@ 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	bf00      	nop
 8000abc:	0800977c 	.word	0x0800977c

08000ac0 <ad7124_noCheckWriteRegister>:

int8_t ad7124_noCheckWriteRegister(struct ad7124_dev *dev, struct ad7124_registerData p_reg)
{
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b088      	sub	sp, #32
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t regValue = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    int8_t flag = 0, i = 0, crc8 = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	76bb      	strb	r3, [r7, #26]
 8000ada:	2300      	movs	r3, #0
 8000adc:	76fb      	strb	r3, [r7, #27]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	767b      	strb	r3, [r7, #25]
    uint8_t txBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000ae2:	4a3f      	ldr	r2, [pc, #252]	@ (8000be0 <ad7124_noCheckWriteRegister+0x120>)
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aec:	e883 0003 	stmia.w	r3, {r0, r1}

    // Build Command word
    txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg.addr);
 8000af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	733b      	strb	r3, [r7, #12]

    // Fill the write buffer
    regValue = p_reg.value;
 8000b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b06:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < p_reg.size; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	76fb      	strb	r3, [r7, #27]
 8000b0c:	e012      	b.n	8000b34 <ad7124_noCheckWriteRegister+0x74>
    {
        txBuf[p_reg.size - i] = regValue & 0xFF;
 8000b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b10:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	3320      	adds	r3, #32
 8000b1c:	443b      	add	r3, r7
 8000b1e:	f803 2c14 	strb.w	r2, [r3, #-20]
        regValue >>= 8;
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	121b      	asrs	r3, r3, #8
 8000b26:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < p_reg.size; i++)
 8000b28:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	76fb      	strb	r3, [r7, #27]
 8000b34:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8000b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dbe7      	blt.n	8000b0e <ad7124_noCheckWriteRegister+0x4e>
    }

    // Compute the CRC
    if (dev->useCRC != AD7124_DISABLE_CRC)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d012      	beq.n	8000b6e <ad7124_noCheckWriteRegister+0xae>
    {
        crc8 = ad7124_computeCrc8(txBuf, p_reg.size + 1);
 8000b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f973 	bl	8000e42 <ad7124_computeCrc8>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	767b      	strb	r3, [r7, #25]
        txBuf[p_reg.size + 1] = crc8;
 8000b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b62:	3301      	adds	r3, #1
 8000b64:	7e7a      	ldrb	r2, [r7, #25]
 8000b66:	3320      	adds	r3, #32
 8000b68:	443b      	add	r3, r7
 8000b6a:	f803 2c14 	strb.w	r2, [r3, #-20]
    }

    uint16_t length = (((dev->useCRC != AD7124_DISABLE_CRC) ? p_reg.size + 1 : p_reg.size) + 1);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d004      	beq.n	8000b82 <ad7124_noCheckWriteRegister+0xc2>
 8000b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	e003      	b.n	8000b8a <ad7124_noCheckWriteRegister+0xca>
 8000b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	3301      	adds	r3, #1
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	82fb      	strh	r3, [r7, #22]

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6858      	ldr	r0, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	891b      	ldrh	r3, [r3, #8]
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	f005 faea 	bl	8006170 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_Transmit(dev->hspi, txBuf, length, HAL_MAX_DELAY) != HAL_OK);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	8afa      	ldrh	r2, [r7, #22]
 8000ba2:	f107 010c 	add.w	r1, r7, #12
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	f007 fa2c 	bl	8008006 <HAL_SPI_Transmit>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf14      	ite	ne
 8000bb4:	2301      	movne	r3, #1
 8000bb6:	2300      	moveq	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	76bb      	strb	r3, [r7, #26]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6858      	ldr	r0, [r3, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	891b      	ldrh	r3, [r3, #8]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f005 fad2 	bl	8006170 <HAL_GPIO_WritePin>

    return flag;
 8000bcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bda:	b004      	add	sp, #16
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	0800977c 	.word	0x0800977c

08000be4 <ad7124_readRegister>:

int8_t ad7124_readRegister(struct ad7124_dev *dev, struct ad7124_registerData *p_reg)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
    int8_t flag = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	73fb      	strb	r3, [r7, #15]

    if (p_reg->addr != AD7124_ERR_REG && dev->isReady)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d012      	beq.n	8000c20 <ad7124_readRegister+0x3c>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00d      	beq.n	8000c20 <ad7124_readRegister+0x3c>
    {
        flag = ad7124_waitForSpiReady(dev,
                                      dev->responseTimeout);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
        flag = ad7124_waitForSpiReady(dev,
 8000c08:	4619      	mov	r1, r3
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f88c 	bl	8000d28 <ad7124_waitForSpiReady>
 8000c10:	4603      	mov	r3, r0
 8000c12:	73fb      	strb	r3, [r7, #15]
        if (flag)
 8000c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <ad7124_readRegister+0x3c>
            return 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e004      	b.n	8000c2a <ad7124_readRegister+0x46>
    }

    return ad7124_noCheckReadRegister(dev, p_reg);
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fe74 	bl	8000910 <ad7124_noCheckReadRegister>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <ad7124_writeRegister>:

int8_t ad7124_writeRegister(struct ad7124_dev *dev,
                            struct ad7124_registerData p_reg)
{
 8000c32:	b084      	sub	sp, #16
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af02      	add	r7, sp, #8
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	f107 001c 	add.w	r0, r7, #28
 8000c40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int8_t flag = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]

    if (dev->isReady)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00d      	beq.n	8000c6e <ad7124_writeRegister+0x3c>
    {
        flag = ad7124_waitForSpiReady(dev,
                                      dev->responseTimeout);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	695b      	ldr	r3, [r3, #20]
        flag = ad7124_waitForSpiReady(dev,
 8000c56:	4619      	mov	r1, r3
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 f865 	bl	8000d28 <ad7124_waitForSpiReady>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
        if (flag)
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <ad7124_writeRegister+0x3c>
            return 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e008      	b.n	8000c80 <ad7124_writeRegister+0x4e>
    }

    return ad7124_noCheckWriteRegister(dev,
 8000c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff21 	bl	8000ac0 <ad7124_noCheckWriteRegister>
 8000c7e:	4603      	mov	r3, r0
                                       p_reg);
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4770      	bx	lr
	...

08000c90 <ad7124_reset>:

int8_t ad7124_reset(struct ad7124_dev *dev)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    int8_t flag = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75fb      	strb	r3, [r7, #23]
    uint8_t txBuf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8000c9c:	4a21      	ldr	r2, [pc, #132]	@ (8000d24 <ad7124_reset+0x94>)
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ca6:	e883 0003 	stmia.w	r3, {r0, r1}

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6858      	ldr	r0, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	891b      	ldrh	r3, [r3, #8]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f005 fa5b 	bl	8006170 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_Transmit(dev->hspi, txBuf, 8, HAL_MAX_DELAY) != HAL_OK);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6818      	ldr	r0, [r3, #0]
 8000cbe:	f107 010c 	add.w	r1, r7, #12
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	f007 f99d 	bl	8008006 <HAL_SPI_Transmit>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf14      	ite	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	2300      	moveq	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6858      	ldr	r0, [r3, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	891b      	ldrh	r3, [r3, #8]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f005 fa43 	bl	8006170 <HAL_GPIO_WritePin>

    if (flag)
 8000cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <ad7124_reset+0x66>
        return 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e011      	b.n	8000d1a <ad7124_reset+0x8a>

    /* Read POR bit to clear */
    flag = ad7124_waitToPowerOn(dev, dev->responseTimeout);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f84b 	bl	8000d98 <ad7124_waitToPowerOn>
 8000d02:	4603      	mov	r3, r0
 8000d04:	75fb      	strb	r3, [r7, #23]
    if (flag)
 8000d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <ad7124_reset+0x82>
        return 1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e003      	b.n	8000d1a <ad7124_reset+0x8a>

    // Recommened 4ms delay
    HAL_Delay(4);
 8000d12:	2004      	movs	r0, #4
 8000d14:	f002 fd10 	bl	8003738 <HAL_Delay>

    return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08009784 	.word	0x08009784

08000d28 <ad7124_waitForSpiReady>:

// Waits until the device can accept read and write user actions
int8_t ad7124_waitForSpiReady(struct ad7124_dev *dev, uint32_t timeout)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
    struct ad7124_registerData *regs;
    int8_t flag;
    int8_t ready = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	75fb      	strb	r3, [r7, #23]

    regs = dev->regs;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]

    while (!ready && --timeout)
 8000d3c:	e018      	b.n	8000d70 <ad7124_waitForSpiReady+0x48>
    {
        // read the value of the error registers
        flag = ad7124_readRegister(dev, &regs[AD7124_Error]);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	3360      	adds	r3, #96	@ 0x60
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff4d 	bl	8000be4 <ad7124_readRegister>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
        if (flag)
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <ad7124_waitForSpiReady+0x32>
            return 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e01a      	b.n	8000d90 <ad7124_waitForSpiReady+0x68>

        ready = (regs[AD7124_Error].value & AD7124_ERR_REG_SPI_IGNORE_ERR) == 0;
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3360      	adds	r3, #96	@ 0x60
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	75fb      	strb	r3, [r7, #23]
    while (!ready && --timeout)
 8000d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d105      	bne.n	8000d84 <ad7124_waitForSpiReady+0x5c>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1dc      	bne.n	8000d3e <ad7124_waitForSpiReady+0x16>
    }

    if (!timeout)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <ad7124_waitForSpiReady+0x66>
        return 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <ad7124_waitForSpiReady+0x68>

    return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <ad7124_waitToPowerOn>:

// Waits until the device finishes the power-on reset operations
int8_t ad7124_waitToPowerOn(struct ad7124_dev *dev, uint32_t timeout)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
    struct ad7124_registerData *regs;
    int32_t flag = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
    int8_t powered_on = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	75fb      	strb	r3, [r7, #23]

    regs = dev->regs;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	60fb      	str	r3, [r7, #12]

    while (!powered_on && --timeout)
 8000db0:	e014      	b.n	8000ddc <ad7124_waitToPowerOn+0x44>
    {
        flag = ad7124_readRegister(dev, &regs[AD7124_Status]);
 8000db2:	68f9      	ldr	r1, [r7, #12]
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff15 	bl	8000be4 <ad7124_readRegister>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	613b      	str	r3, [r7, #16]

        if (flag)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <ad7124_waitToPowerOn+0x30>
            return 1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e01d      	b.n	8000e04 <ad7124_waitToPowerOn+0x6c>

        // Check the POR_FLAG bit in the flag Register
        powered_on = (regs[AD7124_Status].value & AD7124_STATUS_REG_POR_FLAG) == 0;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	75fb      	strb	r3, [r7, #23]
    while (!powered_on && --timeout)
 8000ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d105      	bne.n	8000df0 <ad7124_waitToPowerOn+0x58>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1e0      	bne.n	8000db2 <ad7124_waitToPowerOn+0x1a>
    }

    if (!(timeout || powered_on))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d105      	bne.n	8000e02 <ad7124_waitToPowerOn+0x6a>
 8000df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <ad7124_waitToPowerOn+0x6a>
        return 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <ad7124_waitToPowerOn+0x6c>
    return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <ad7124_readData>:
    return 0;
}

// Reads the conversion result from the device
int8_t ad7124_readData(struct ad7124_dev *dev, int32_t *p_data)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
    struct ad7124_registerData *regs;
    int8_t flag;

    regs = dev->regs;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	60fb      	str	r3, [r7, #12]

    // Read the value of the data register
    flag = ad7124_readRegister(dev, &regs[AD7124_Data]);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3320      	adds	r3, #32
 8000e20:	4619      	mov	r1, r3
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fede 	bl	8000be4 <ad7124_readRegister>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	72fb      	strb	r3, [r7, #11]

    *p_data = regs[AD7124_Data].value;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3320      	adds	r3, #32
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	601a      	str	r2, [r3, #0]

    return flag;
 8000e36:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <ad7124_computeCrc8>:

// Computes the CRC checksum for a data buffer
int8_t ad7124_computeCrc8(uint8_t *p_buf, uint8_t buf_size)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
    uint8_t crc = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73bb      	strb	r3, [r7, #14]

    while (buf_size)
 8000e56:	e02e      	b.n	8000eb6 <ad7124_computeCrc8+0x74>
    {
        for (i = 0x80; i != 0; i >>= 1)
 8000e58:	2380      	movs	r3, #128	@ 0x80
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e022      	b.n	8000ea4 <ad7124_computeCrc8+0x62>
        {
            uint8_t cmp1 = (crc & 0x80) != 0;
 8000e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	09db      	lsrs	r3, r3, #7
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	737b      	strb	r3, [r7, #13]
            uint8_t cmp2 = (*p_buf & i) != 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	4013      	ands	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	733b      	strb	r3, [r7, #12]
            if (cmp1 != cmp2)
 8000e80:	7b7a      	ldrb	r2, [r7, #13]
 8000e82:	7b3b      	ldrb	r3, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d007      	beq.n	8000e98 <ad7124_computeCrc8+0x56>
            {
                /* MSB of CRC register XOR input Bit from Data */
                crc <<= 1;
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	73bb      	strb	r3, [r7, #14]
                crc ^= AD7124_CRC8_POLYNOMIAL_REPRESENTATION;
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	f083 0307 	eor.w	r3, r3, #7
 8000e94:	73bb      	strb	r3, [r7, #14]
 8000e96:	e002      	b.n	8000e9e <ad7124_computeCrc8+0x5c>
            }
            else
            {
                crc <<= 1;
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	73bb      	strb	r3, [r7, #14]
        for (i = 0x80; i != 0; i >>= 1)
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	085b      	lsrs	r3, r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1d9      	bne.n	8000e5e <ad7124_computeCrc8+0x1c>
            }
        }
        p_buf++;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3301      	adds	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
        buf_size--;
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	70fb      	strb	r3, [r7, #3]
    while (buf_size)
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1cd      	bne.n	8000e58 <ad7124_computeCrc8+0x16>
    }

    return crc;
 8000ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <ad7124_setAdcControl>:
}

// ADC Fucntions

int8_t ad7124_setAdcControl(struct ad7124_dev *dev, enum ad7124_mode operating_mode, enum ad7124_powerMode power_mode, uint8_t ref_en, uint8_t clk_sel)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	70fb      	strb	r3, [r7, #3]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70bb      	strb	r3, [r7, #2]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	707b      	strb	r3, [r7, #1]
    struct ad7124_registerData *r = &dev->regs[AD7124_ADC_Control];
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	3310      	adds	r3, #16
 8000eec:	60fb      	str	r3, [r7, #12]

    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
               AD7124_ADC_CTRL_REG_POWER_MODE(power_mode) |
 8000ef6:	78bb      	ldrb	r3, [r7, #2]
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	b2db      	uxtb	r3, r3
    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000efc:	431a      	orrs	r2, r3
               AD7124_ADC_CTRL_REG_CLK_SEL(clk_sel) |
 8000efe:	7e3b      	ldrb	r3, [r7, #24]
 8000f00:	f003 0303 	and.w	r3, r3, #3
               AD7124_ADC_CTRL_REG_POWER_MODE(power_mode) |
 8000f04:	4313      	orrs	r3, r2
               (ref_en ? AD7124_ADC_CTRL_REG_REF_EN : 0) |
 8000f06:	787a      	ldrb	r2, [r7, #1]
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d002      	beq.n	8000f12 <ad7124_setAdcControl+0x46>
 8000f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f10:	e000      	b.n	8000f14 <ad7124_setAdcControl+0x48>
 8000f12:	2200      	movs	r2, #0
               AD7124_ADC_CTRL_REG_CLK_SEL(clk_sel) |
 8000f14:	4313      	orrs	r3, r2
               (ref_en ? AD7124_ADC_CTRL_REG_REF_EN : 0) |
 8000f16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	605a      	str	r2, [r3, #4]
               AD7124_ADC_CTRL_REG_DOUT_RDY_DEL;

    return ad7124_writeRegister(dev, *r);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fe83 	bl	8000c32 <ad7124_writeRegister>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <ad7124_setConfig>:

int8_t ad7124_setConfig(struct ad7124_dev *dev, uint8_t cfg, enum ad7124_reference_source ref, enum ad7124_PgaSel pga, int8_t bipolar, enum ad7124_BurnoutCurrent burnout)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af02      	add	r7, sp, #8
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	4608      	mov	r0, r1
 8000f40:	4611      	mov	r1, r2
 8000f42:	461a      	mov	r2, r3
 8000f44:	4603      	mov	r3, r0
 8000f46:	70fb      	strb	r3, [r7, #3]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70bb      	strb	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
    if (cfg < 8)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b07      	cmp	r3, #7
 8000f54:	d82b      	bhi.n	8000fae <ad7124_setConfig+0x78>
    {
        struct ad7124_registerData *r;

        cfg += AD7124_Config_0;
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	3319      	adds	r3, #25
 8000f5a:	70fb      	strb	r3, [r7, #3]
        r = &dev->regs[cfg];
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4413      	add	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000f68:	78bb      	ldrb	r3, [r7, #2]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	f003 0218 	and.w	r2, r3, #24
                   AD7124_CFG_REG_PGA(pga) |
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	f003 0307 	and.w	r3, r3, #7
        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000f76:	4313      	orrs	r3, r2
                   (bipolar ? AD7124_CFG_REG_BIPOLAR : 0) |
 8000f78:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d002      	beq.n	8000f86 <ad7124_setConfig+0x50>
 8000f80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f84:	e000      	b.n	8000f88 <ad7124_setConfig+0x52>
 8000f86:	2200      	movs	r2, #0
                   AD7124_CFG_REG_PGA(pga) |
 8000f88:	431a      	orrs	r2, r3
                   AD7124_CFG_REG_BURNOUT(burnout) |
 8000f8a:	7f3b      	ldrb	r3, [r7, #28]
 8000f8c:	025b      	lsls	r3, r3, #9
 8000f8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
                   (bipolar ? AD7124_CFG_REG_BIPOLAR : 0) |
 8000f92:	4313      	orrs	r3, r2
                   AD7124_CFG_REG_REF_BUFP | AD7124_CFG_REG_REF_BUFM |
                   AD7124_CFG_REG_AIN_BUFP | AD7124_CFG_REG_AINN_BUFM;
 8000f94:	f443 72f0 	orr.w	r2, r3, #480	@ 0x1e0
        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	605a      	str	r2, [r3, #4]
        return ad7124_writeRegister(dev, *r);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	9200      	str	r2, [sp, #0]
 8000fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fe44 	bl	8000c32 <ad7124_writeRegister>
 8000faa:	4603      	mov	r3, r0
 8000fac:	e001      	b.n	8000fb2 <ad7124_setConfig+0x7c>
    }
    return -1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <ad7124_setChannel>:

int8_t ad7124_setChannel(struct ad7124_dev *dev, uint8_t ch, uint8_t cfg, enum ad7124_analog_input ainp, enum ad7124_analog_input ainm, uint8_t enable)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af02      	add	r7, sp, #8
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4603      	mov	r3, r0
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70bb      	strb	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
    if ((ch < 16) && (cfg < 8))
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d82b      	bhi.n	8001032 <ad7124_setChannel+0x78>
 8000fda:	78bb      	ldrb	r3, [r7, #2]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d828      	bhi.n	8001032 <ad7124_setChannel+0x78>
    {
        struct ad7124_registerData *r;

        ch += AD7124_Channel_0;
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	3309      	adds	r3, #9
 8000fe4:	70fb      	strb	r3, [r7, #3]
        r = &dev->regs[ch];
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]

        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 8000ff2:	78bb      	ldrb	r3, [r7, #2]
 8000ff4:	031b      	lsls	r3, r3, #12
 8000ff6:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
                   AD7124_CH_MAP_REG_AINP(ainp) |
 8000ffa:	787b      	ldrb	r3, [r7, #1]
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 8001002:	431a      	orrs	r2, r3
                   AD7124_CH_MAP_REG_AINM(ainm) |
 8001004:	7e3b      	ldrb	r3, [r7, #24]
 8001006:	f003 031f 	and.w	r3, r3, #31
                   AD7124_CH_MAP_REG_AINP(ainp) |
 800100a:	4313      	orrs	r3, r2
                   (enable ? AD7124_CH_MAP_REG_CH_ENABLE : 0);
 800100c:	7f3a      	ldrb	r2, [r7, #28]
 800100e:	2a00      	cmp	r2, #0
 8001010:	d002      	beq.n	8001018 <ad7124_setChannel+0x5e>
 8001012:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001016:	e000      	b.n	800101a <ad7124_setChannel+0x60>
 8001018:	2200      	movs	r2, #0
                   AD7124_CH_MAP_REG_AINM(ainm) |
 800101a:	431a      	orrs	r2, r3
        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	605a      	str	r2, [r3, #4]

        return ad7124_writeRegister(dev, *r);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff fe02 	bl	8000c32 <ad7124_writeRegister>
 800102e:	4603      	mov	r3, r0
 8001030:	e001      	b.n	8001036 <ad7124_setChannel+0x7c>
    }
    return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <ad7124_getRegister>:

int8_t ad7124_getRegister(struct ad7124_dev *dev, enum ad7124_registers id)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
    int8_t flag = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
    if (id < AD7124_Status && id >= 57)
        return -1;

    flag = ad7124_readRegister(dev, &dev->regs[id]);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	4413      	add	r3, r2
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fdc2 	bl	8000be4 <ad7124_readRegister>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]
    if (flag != 0)
 8001064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <ad7124_getRegister+0x34>
    {
        return -1;
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	e006      	b.n	8001080 <ad7124_getRegister+0x42>
    }

    return dev->regs[id].value;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	4413      	add	r3, r2
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	b25b      	sxtb	r3, r3
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <ad7124_currentChannel>:

uint8_t ad7124_currentChannel(struct ad7124_dev *dev)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    int8_t flag = ad7124_getRegister(dev, AD7124_Status);
 8001090:	2100      	movs	r1, #0
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffd3 	bl	800103e <ad7124_getRegister>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]

    if (flag < 0)
 800109c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	da01      	bge.n	80010a8 <ad7124_currentChannel+0x20>
    {
        return 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e003      	b.n	80010b0 <ad7124_currentChannel+0x28>
    }
    return (uint8_t)(flag & AD7124_STATUS_REG_CH_ACTIVE(15));
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <ad7124_enableChannel>:

uint8_t ad7124_enableChannel(struct ad7124_dev *dev, uint8_t ch, uint8_t enable)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
 80010c4:	4613      	mov	r3, r2
 80010c6:	70bb      	strb	r3, [r7, #2]
    if (ch > 16)
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d901      	bls.n	80010d2 <ad7124_enableChannel+0x1a>
        return -1;
 80010ce:	23ff      	movs	r3, #255	@ 0xff
 80010d0:	e02a      	b.n	8001128 <ad7124_enableChannel+0x70>

    struct ad7124_registerData *r;
    uint8_t flag, chan = AD7124_Channel_0;
 80010d2:	2309      	movs	r3, #9
 80010d4:	75fb      	strb	r3, [r7, #23]
    chan += ch;
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	4413      	add	r3, r2
 80010dc:	75fb      	strb	r3, [r7, #23]
    r = &dev->regs[chan];
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4413      	add	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
    flag = ad7124_readRegister(dev, r);
 80010ea:	6939      	ldr	r1, [r7, #16]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fd79 	bl	8000be4 <ad7124_readRegister>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
    if (flag < 0)
    {
        return 7;
    }

    if (enable)
 80010f6:	78bb      	ldrb	r3, [r7, #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <ad7124_enableChannel+0x52>
    {

        r->value |= AD7124_CH_MAP_REG_CH_ENABLE;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	e005      	b.n	8001116 <ad7124_enableChannel+0x5e>
    }
    else
    {

        r->value &= ~AD7124_CH_MAP_REG_CH_ENABLE;
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
    }

    return ad7124_writeRegister(dev, *r);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fd87 	bl	8000c32 <ad7124_writeRegister>
 8001124:	4603      	mov	r3, r0
 8001126:	b2db      	uxtb	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <ad7124_getData>:


int32_t ad7124_getData(struct ad7124_dev *dev)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    int32_t value;
    int8_t ret;

    ret = ad7124_readData(dev, &value);
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4619      	mov	r1, r3
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fe64 	bl	8000e0c <ad7124_readData>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
    if (ret < 0)
 8001148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	da02      	bge.n	8001156 <ad7124_getData+0x26>
    {
        return ret;
 8001150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001154:	e000      	b.n	8001158 <ad7124_getData+0x28>
    }
    return (int32_t)value;
 8001156:	68bb      	ldr	r3, [r7, #8]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <ad7124_startSingleConversion>:

int8_t ad7124_startSingleConversion(struct ad7124_dev *dev, uint8_t ch)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
    if (ch < 16)
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	d813      	bhi.n	800119a <ad7124_startSingleConversion+0x3a>
    {
        int ret;

        ret = ad7124_enableChannel(dev, ch, 1);
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	2201      	movs	r2, #1
 8001176:	4619      	mov	r1, r3
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff9d 	bl	80010b8 <ad7124_enableChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	60fb      	str	r3, [r7, #12]
        if (ret < 0)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	da02      	bge.n	800118e <ad7124_startSingleConversion+0x2e>
        {
            return ret;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	b25b      	sxtb	r3, r3
 800118c:	e007      	b.n	800119e <ad7124_startSingleConversion+0x3e>
        }
        return ad7124_setMode(dev, AD7124_SINGLE);
 800118e:	2101      	movs	r1, #1
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f8cd 	bl	8001330 <ad7124_setMode>
 8001196:	4603      	mov	r3, r0
 8001198:	e001      	b.n	800119e <ad7124_startSingleConversion+0x3e>
    }
    return -1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <ad7124_adcRead>:

int32_t ad7124_adcRead(struct ad7124_dev *dev, uint8_t ch)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(50);
 80011b2:	2032      	movs	r0, #50	@ 0x32
 80011b4:	f002 fac0 	bl	8003738 <HAL_Delay>
	int8_t flag = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]
    uint8_t cur_ch = ad7124_currentChannel(dev);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff63 	bl	8001088 <ad7124_currentChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73bb      	strb	r3, [r7, #14]

    if (ch != cur_ch)
 80011c6:	78fa      	ldrb	r2, [r7, #3]
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d00d      	beq.n	80011ea <ad7124_adcRead+0x44>
    {

        // disable previous channel if different
        flag = ad7124_enableChannel(dev, cur_ch, 0);
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff6f 	bl	80010b8 <ad7124_enableChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
        if (flag != 0)
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <ad7124_adcRead+0x44>
            return 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e01d      	b.n	8001226 <ad7124_adcRead+0x80>
    }

    flag = ad7124_startSingleConversion(dev, ch);
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	4619      	mov	r1, r3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb6 	bl	8001160 <ad7124_startSingleConversion>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
    if (flag != 0)
 80011f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <ad7124_adcRead+0x60>
    {
        return flag;
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	e00f      	b.n	8001226 <ad7124_adcRead+0x80>
    }

    flag = ad7124_waitEndOfConversion(dev);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f811 	bl	800122e <ad7124_waitEndOfConversion>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
    if (flag != 0)
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <ad7124_adcRead+0x78>
        return flag;
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	e003      	b.n	8001226 <ad7124_adcRead+0x80>

    return ad7124_getData(dev);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff86 	bl	8001130 <ad7124_getData>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <ad7124_waitEndOfConversion>:

int8_t ad7124_waitEndOfConversion(struct ad7124_dev *dev)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
    int8_t ret;
    uint8_t ready = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	72fb      	strb	r3, [r7, #11]
    uint32_t timeout = 4000;
 800123a:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800123e:	60fb      	str	r3, [r7, #12]

    do
    {

        /* Read the value of the Status Register */
        ret = ad7124_readRegister(dev, &dev->regs[AD7124_STATUS_REG]);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	4619      	mov	r1, r3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fccc 	bl	8000be4 <ad7124_readRegister>
 800124c:	4603      	mov	r3, r0
 800124e:	72bb      	strb	r3, [r7, #10]
        if (ret != 0)
 8001250:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <ad7124_waitEndOfConversion+0x2e>
        {

            return 4;
 8001258:	2304      	movs	r3, #4
 800125a:	e01c      	b.n	8001296 <ad7124_waitEndOfConversion+0x68>
        }

        /* Check the RDY bit in the Status Register */
        ready = (dev->regs[AD7124_STATUS_REG].value &
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                 AD7124_STATUS_REG_RDY) == 0;
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf0c      	ite	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	2300      	movne	r3, #0
 800126e:	b2db      	uxtb	r3, r3
        ready = (dev->regs[AD7124_STATUS_REG].value &
 8001270:	72fb      	strb	r3, [r7, #11]

        HAL_Delay(4);
 8001272:	2004      	movs	r0, #4
 8001274:	f002 fa60 	bl	8003738 <HAL_Delay>
    } while (!ready && --timeout);
 8001278:	7afb      	ldrb	r3, [r7, #11]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <ad7124_waitEndOfConversion+0x5c>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3b01      	subs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1da      	bne.n	8001240 <ad7124_waitEndOfConversion+0x12>

    return (timeout == 0) ? 5 : 0;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <ad7124_waitEndOfConversion+0x66>
 8001290:	2305      	movs	r3, #5
 8001292:	e000      	b.n	8001296 <ad7124_waitEndOfConversion+0x68>
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <ad7124_toVoltage>:

float ad7124_toVoltage(int32_t value, int16_t gain, float vref, uint8_t bipolar)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	460b      	mov	r3, r1
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ae:	817b      	strh	r3, [r7, #10]
 80012b0:	4613      	mov	r3, r2
 80012b2:	727b      	strb	r3, [r7, #9]
    float voltage = (float)value;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	edc7 7a05 	vstr	s15, [r7, #20]

    if (bipolar)
 80012c2:	7a7b      	ldrb	r3, [r7, #9]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00c      	beq.n	80012e2 <ad7124_toVoltage+0x42>
    {
        voltage = voltage / (float)0x7FFFFFU - 1;
 80012c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80012cc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001328 <ad7124_toVoltage+0x88>
 80012d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012dc:	edc7 7a05 	vstr	s15, [r7, #20]
 80012e0:	e007      	b.n	80012f2 <ad7124_toVoltage+0x52>
    }
    else
    {
        voltage = voltage / (float)0xFFFFFFU;
 80012e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80012e6:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800132c <ad7124_toVoltage+0x8c>
 80012ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ee:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    voltage = voltage * vref / (float)gain;
 80012f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80012f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	edc7 7a05 	vstr	s15, [r7, #20]
    return voltage;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	ee07 3a90 	vmov	s15, r3
}
 8001318:	eeb0 0a67 	vmov.f32	s0, s15
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	4afffffe 	.word	0x4afffffe
 800132c:	4b7fffff 	.word	0x4b7fffff

08001330 <ad7124_setMode>:

int8_t ad7124_setMode(struct ad7124_dev *dev, enum ad7124_mode operating_mode)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af02      	add	r7, sp, #8
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
	struct ad7124_registerData *r;
	r = &dev->regs[AD7124_ADC_Control];
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	3310      	adds	r3, #16
 8001342:	60fb      	str	r3, [r7, #12]
    r->value &= ~AD7124_ADC_CTRL_REG_MODE(0x0F); // clear mode
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	605a      	str	r2, [r3, #4]
    r->value |= AD7124_ADC_CTRL_REG_MODE(operating_mode);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800135c:	431a      	orrs	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	605a      	str	r2, [r3, #4]
    return ad7124_writeRegister(dev, dev->regs[AD7124_ADC_Control]);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	3310      	adds	r3, #16
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	9200      	str	r2, [sp, #0]
 800136c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fc5f 	bl	8000c32 <ad7124_writeRegister>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <ad7124_init>:

// Initializes the AD7124.
int8_t ad7124_init(struct ad7124_dev *device, SPI_HandleTypeDef *hspi, GPIO_TypeDef *ncs_GPIOx, uint16_t ncs_GPIO_pin, enum ad7124_device_type device_type, struct ad7124_registerData *ad7124_init_regs_default)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b088      	sub	sp, #32
 8001382:	af02      	add	r7, sp, #8
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	807b      	strh	r3, [r7, #2]
    int8_t flag = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	757b      	strb	r3, [r7, #21]
    uint8_t i = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	75fb      	strb	r3, [r7, #23]

    // Fill all registers with default values
    device->regs = ad7124_init_regs_default;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001398:	60da      	str	r2, [r3, #12]
    device->responseTimeout = 1000;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013a0:	615a      	str	r2, [r3, #20]
    device->isReady = 0;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	745a      	strb	r2, [r3, #17]
    device->useCRC = 0;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	741a      	strb	r2, [r3, #16]

    // SPI Communication Data
    device->hspi = hspi;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	601a      	str	r2, [r3, #0]
    device->ncs_GPIOx = ncs_GPIOx;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	605a      	str	r2, [r3, #4]
    device->ncs_GPIO_pin = ncs_GPIO_pin;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	887a      	ldrh	r2, [r7, #2]
 80013be:	811a      	strh	r2, [r3, #8]
    device->active_device = device_type;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013c6:	765a      	strb	r2, [r3, #25]

    // Reset the device
    flag = ad7124_reset(device);
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fc61 	bl	8000c90 <ad7124_reset>
 80013ce:	4603      	mov	r3, r0
 80013d0:	757b      	strb	r3, [r7, #21]

    // Initialize ADC
    ad7124_setAdcControl(device, AD7124_STANDBY, AD7124_LOW_POWER, 0, 0);
 80013d2:	2300      	movs	r3, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	2200      	movs	r2, #0
 80013da:	2102      	movs	r1, #2
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff fd75 	bl	8000ecc <ad7124_setAdcControl>

    // Read the ID register
    flag = ad7124_readRegister(device, &device->regs[AD7124_ID_REG]);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	3350      	adds	r3, #80	@ 0x50
 80013e8:	4619      	mov	r1, r3
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff fbfa 	bl	8000be4 <ad7124_readRegister>
 80013f0:	4603      	mov	r3, r0
 80013f2:	757b      	strb	r3, [r7, #21]

    if (device->active_device == ID_AD7124_4)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	7e5b      	ldrb	r3, [r3, #25]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <ad7124_init+0x8e>
    {
        if (!(device->regs[AD7124_ID_REG].value == AD7124_4_ID))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	3350      	adds	r3, #80	@ 0x50
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b14      	cmp	r3, #20
 8001406:	d00d      	beq.n	8001424 <ad7124_init+0xa6>
            return 1;
 8001408:	2301      	movs	r3, #1
 800140a:	e066      	b.n	80014da <ad7124_init+0x15c>
    }
    else if (device->active_device == ID_AD7124_8)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	7e5b      	ldrb	r3, [r3, #25]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d107      	bne.n	8001424 <ad7124_init+0xa6>
    {
        if (!(device->regs[AD7124_ID_REG].value == AD7124_8_ID))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	3350      	adds	r3, #80	@ 0x50
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b16      	cmp	r3, #22
 800141e:	d001      	beq.n	8001424 <ad7124_init+0xa6>
            return 1;
 8001420:	2301      	movs	r3, #1
 8001422:	e05a      	b.n	80014da <ad7124_init+0x15c>
    }

    // Sets up the 8 channels
    for (i = 0; i < AD7124_MAX_SETUPS; i++)
 8001424:	2300      	movs	r3, #0
 8001426:	75fb      	strb	r3, [r7, #23]
 8001428:	e026      	b.n	8001478 <ad7124_init+0xfa>
    {
        flag = ad7124_setConfig(device, i, INTERNAL_REF, Pga1, 1, BurnoutOff);
 800142a:	7df9      	ldrb	r1, [r7, #23]
 800142c:	2300      	movs	r3, #0
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	2301      	movs	r3, #1
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2300      	movs	r3, #0
 8001436:	2202      	movs	r2, #2
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f7ff fd7c 	bl	8000f36 <ad7124_setConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	757b      	strb	r3, [r7, #21]
        if (flag)
 8001442:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <ad7124_init+0xd0>
            return 1;
 800144a:	2301      	movs	r3, #1
 800144c:	e045      	b.n	80014da <ad7124_init+0x15c>

        flag = ad7124_setChannel(device, i, i, i, AD7124_AVSS, 0);
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	7dfa      	ldrb	r2, [r7, #23]
 8001452:	7df9      	ldrb	r1, [r7, #23]
 8001454:	2000      	movs	r0, #0
 8001456:	9001      	str	r0, [sp, #4]
 8001458:	2011      	movs	r0, #17
 800145a:	9000      	str	r0, [sp, #0]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff fdac 	bl	8000fba <ad7124_setChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	757b      	strb	r3, [r7, #21]
        if (flag)
 8001466:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <ad7124_init+0xf4>
            return 1;
 800146e:	2301      	movs	r3, #1
 8001470:	e033      	b.n	80014da <ad7124_init+0x15c>
    for (i = 0; i < AD7124_MAX_SETUPS; i++)
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	3301      	adds	r3, #1
 8001476:	75fb      	strb	r3, [r7, #23]
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d9d5      	bls.n	800142a <ad7124_init+0xac>
    }

    flag = ad7124_setAdcControl(device, AD7124_CONTINUOUS, AD7124_HIGH_POWER, 1, 0);
 800147e:	2300      	movs	r3, #0
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	2202      	movs	r2, #2
 8001486:	2100      	movs	r1, #0
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff fd1f 	bl	8000ecc <ad7124_setAdcControl>
 800148e:	4603      	mov	r3, r0
 8001490:	757b      	strb	r3, [r7, #21]

    if (flag)
 8001492:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <ad7124_init+0x120>
        return 1;
 800149a:	2301      	movs	r3, #1
 800149c:	e01d      	b.n	80014da <ad7124_init+0x15c>

    // Reads Calbiration Data
    for (uint8_t i = 0; i < 8; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	75bb      	strb	r3, [r7, #22]
 80014a2:	e016      	b.n	80014d2 <ad7124_init+0x154>
    {
        ad7124_readRegister(device, &device->regs[AD7124_Offset_0 + i]);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	7dbb      	ldrb	r3, [r7, #22]
 80014aa:	3329      	adds	r3, #41	@ 0x29
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff fb96 	bl	8000be4 <ad7124_readRegister>
        ad7124_readRegister(device, &device->regs[AD7124_Gain_0 + i]);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	7dbb      	ldrb	r3, [r7, #22]
 80014be:	3331      	adds	r3, #49	@ 0x31
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7ff fb8c 	bl	8000be4 <ad7124_readRegister>
    for (uint8_t i = 0; i < 8; i++)
 80014cc:	7dbb      	ldrb	r3, [r7, #22]
 80014ce:	3301      	adds	r3, #1
 80014d0:	75bb      	strb	r3, [r7, #22]
 80014d2:	7dbb      	ldrb	r3, [r7, #22]
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	d9e5      	bls.n	80014a4 <ad7124_init+0x126>
    }

    return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001502:	4b3e      	ldr	r3, [pc, #248]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001504:	4a3e      	ldr	r2, [pc, #248]	@ (8001600 <MX_ADC1_Init+0x11c>)
 8001506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001508:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <MX_ADC1_Init+0x118>)
 800150a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800150e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001510:	4b3a      	ldr	r3, [pc, #232]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001516:	4b39      	ldr	r3, [pc, #228]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001518:	2201      	movs	r2, #1
 800151a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800151c:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <MX_ADC1_Init+0x118>)
 800151e:	2200      	movs	r2, #0
 8001520:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001522:	4b36      	ldr	r3, [pc, #216]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800152a:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <MX_ADC1_Init+0x118>)
 800152c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001532:	4b32      	ldr	r3, [pc, #200]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001534:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153a:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <MX_ADC1_Init+0x118>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001540:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001542:	2204      	movs	r2, #4
 8001544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001546:	4b2d      	ldr	r3, [pc, #180]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800154e:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001554:	4829      	ldr	r0, [pc, #164]	@ (80015fc <MX_ADC1_Init+0x118>)
 8001556:	f002 f913 	bl	8003780 <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001560:	f001 fa2a 	bl	80029b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8001564:	2307      	movs	r3, #7
 8001566:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8001568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800156c:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4820      	ldr	r0, [pc, #128]	@ (80015fc <MX_ADC1_Init+0x118>)
 800157a:	f003 f8b9 	bl	80046f0 <HAL_ADCEx_MultiModeConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001584:	f001 fa18 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001588:	2309      	movs	r3, #9
 800158a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4818      	ldr	r0, [pc, #96]	@ (80015fc <MX_ADC1_Init+0x118>)
 800159a:	f002 fd23 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80015a4:	f001 fa08 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015a8:	2305      	movs	r3, #5
 80015aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4811      	ldr	r0, [pc, #68]	@ (80015fc <MX_ADC1_Init+0x118>)
 80015b6:	f002 fd15 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80015c0:	f001 f9fa 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80015c4:	2303      	movs	r3, #3
 80015c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	480b      	ldr	r0, [pc, #44]	@ (80015fc <MX_ADC1_Init+0x118>)
 80015ce:	f002 fd09 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80015d8:	f001 f9ee 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80015dc:	2304      	movs	r3, #4
 80015de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_ADC1_Init+0x118>)
 80015e6:	f002 fcfd 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80015f0:	f001 f9e2 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000038 	.word	0x20000038
 8001600:	40012000 	.word	0x40012000

08001604 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001616:	4b31      	ldr	r3, [pc, #196]	@ (80016dc <MX_ADC2_Init+0xd8>)
 8001618:	4a31      	ldr	r2, [pc, #196]	@ (80016e0 <MX_ADC2_Init+0xdc>)
 800161a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800161c:	4b2f      	ldr	r3, [pc, #188]	@ (80016dc <MX_ADC2_Init+0xd8>)
 800161e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001622:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001624:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <MX_ADC2_Init+0xd8>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800162a:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <MX_ADC2_Init+0xd8>)
 800162c:	2201      	movs	r2, #1
 800162e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <MX_ADC2_Init+0xd8>)
 8001632:	2200      	movs	r2, #0
 8001634:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <MX_ADC2_Init+0xd8>)
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800163e:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <MX_ADC2_Init+0xd8>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <MX_ADC2_Init+0xd8>)
 8001646:	2204      	movs	r2, #4
 8001648:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <MX_ADC2_Init+0xd8>)
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <MX_ADC2_Init+0xd8>)
 8001654:	2201      	movs	r2, #1
 8001656:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001658:	4820      	ldr	r0, [pc, #128]	@ (80016dc <MX_ADC2_Init+0xd8>)
 800165a:	f002 f891 	bl	8003780 <HAL_ADC_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001664:	f001 f9a8 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001668:	2308      	movs	r3, #8
 800166a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800166c:	2301      	movs	r3, #1
 800166e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001670:	2301      	movs	r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	4619      	mov	r1, r3
 8001678:	4818      	ldr	r0, [pc, #96]	@ (80016dc <MX_ADC2_Init+0xd8>)
 800167a:	f002 fcb3 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001684:	f001 f998 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001688:	2304      	movs	r3, #4
 800168a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800168c:	2302      	movs	r3, #2
 800168e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001690:	463b      	mov	r3, r7
 8001692:	4619      	mov	r1, r3
 8001694:	4811      	ldr	r0, [pc, #68]	@ (80016dc <MX_ADC2_Init+0xd8>)
 8001696:	f002 fca5 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 80016a0:	f001 f98a 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80016a4:	2303      	movs	r3, #3
 80016a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <MX_ADC2_Init+0xd8>)
 80016ae:	f002 fc99 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80016b8:	f001 f97e 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80016bc:	2304      	movs	r3, #4
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_ADC2_Init+0xd8>)
 80016c6:	f002 fc8d 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80016d0:	f001 f972 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000080 	.word	0x20000080
 80016e0:	40012100 	.word	0x40012100

080016e4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80016f6:	4b40      	ldr	r3, [pc, #256]	@ (80017f8 <MX_ADC3_Init+0x114>)
 80016f8:	4a40      	ldr	r2, [pc, #256]	@ (80017fc <MX_ADC3_Init+0x118>)
 80016fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016fc:	4b3e      	ldr	r3, [pc, #248]	@ (80017f8 <MX_ADC3_Init+0x114>)
 80016fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001702:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001704:	4b3c      	ldr	r3, [pc, #240]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <MX_ADC3_Init+0x114>)
 800170c:	2201      	movs	r2, #1
 800170e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001712:	2200      	movs	r2, #0
 8001714:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001716:	4b38      	ldr	r3, [pc, #224]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800171e:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001726:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001728:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172e:	4b32      	ldr	r3, [pc, #200]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8001734:	4b30      	ldr	r3, [pc, #192]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001736:	2206      	movs	r2, #6
 8001738:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <MX_ADC3_Init+0x114>)
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001742:	4b2d      	ldr	r3, [pc, #180]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001748:	482b      	ldr	r0, [pc, #172]	@ (80017f8 <MX_ADC3_Init+0x114>)
 800174a:	f002 f819 	bl	8003780 <HAL_ADC_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001754:	f001 f930 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001758:	2300      	movs	r3, #0
 800175a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001760:	2301      	movs	r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4823      	ldr	r0, [pc, #140]	@ (80017f8 <MX_ADC3_Init+0x114>)
 800176a:	f002 fc3b 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001774:	f001 f920 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8001778:	2302      	movs	r3, #2
 800177a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800177c:	463b      	mov	r3, r7
 800177e:	4619      	mov	r1, r3
 8001780:	481d      	ldr	r0, [pc, #116]	@ (80017f8 <MX_ADC3_Init+0x114>)
 8001782:	f002 fc2f 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800178c:	f001 f914 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001790:	2303      	movs	r3, #3
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4817      	ldr	r0, [pc, #92]	@ (80017f8 <MX_ADC3_Init+0x114>)
 800179a:	f002 fc23 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 80017a4:	f001 f908 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80017a8:	2304      	movs	r3, #4
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4811      	ldr	r0, [pc, #68]	@ (80017f8 <MX_ADC3_Init+0x114>)
 80017b2:	f002 fc17 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80017bc:	f001 f8fc 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80017c0:	2305      	movs	r3, #5
 80017c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <MX_ADC3_Init+0x114>)
 80017ca:	f002 fc0b 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 80017d4:	f001 f8f0 	bl	80029b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 80017d8:	2306      	movs	r3, #6
 80017da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <MX_ADC3_Init+0x114>)
 80017e2:	f002 fbff 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 80017ec:	f001 f8e4 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200000c8 	.word	0x200000c8
 80017fc:	40012200 	.word	0x40012200

08001800 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b092      	sub	sp, #72	@ 0x48
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a81      	ldr	r2, [pc, #516]	@ (8001a24 <HAL_ADC_MspInit+0x224>)
 800181e:	4293      	cmp	r3, r2
 8001820:	f040 8096 	bne.w	8001950 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	@ 0x30
 8001828:	4b7f      	ldr	r3, [pc, #508]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	4a7e      	ldr	r2, [pc, #504]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001832:	6453      	str	r3, [r2, #68]	@ 0x44
 8001834:	4b7c      	ldr	r3, [pc, #496]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
 800183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001844:	4b78      	ldr	r3, [pc, #480]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	4a77      	ldr	r2, [pc, #476]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001850:	4b75      	ldr	r3, [pc, #468]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800185a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001860:	4b71      	ldr	r3, [pc, #452]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001864:	4a70      	ldr	r2, [pc, #448]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6313      	str	r3, [r2, #48]	@ 0x30
 800186c:	4b6e      	ldr	r3, [pc, #440]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
 800187c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	4a69      	ldr	r2, [pc, #420]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	6313      	str	r3, [r2, #48]	@ 0x30
 8001888:	4b67      	ldr	r3, [pc, #412]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001894:	23a0      	movs	r3, #160	@ 0xa0
 8001896:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001898:	2303      	movs	r3, #3
 800189a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018a4:	4619      	mov	r1, r3
 80018a6:	4861      	ldr	r0, [pc, #388]	@ (8001a2c <HAL_ADC_MspInit+0x22c>)
 80018a8:	f004 face 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ac:	2320      	movs	r3, #32
 80018ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b0:	2303      	movs	r3, #3
 80018b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018bc:	4619      	mov	r1, r3
 80018be:	485c      	ldr	r0, [pc, #368]	@ (8001a30 <HAL_ADC_MspInit+0x230>)
 80018c0:	f004 fac2 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018c4:	2302      	movs	r3, #2
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c8:	2303      	movs	r3, #3
 80018ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018d4:	4619      	mov	r1, r3
 80018d6:	4857      	ldr	r0, [pc, #348]	@ (8001a34 <HAL_ADC_MspInit+0x234>)
 80018d8:	f004 fab6 	bl	8005e48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018dc:	4b56      	ldr	r3, [pc, #344]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 80018de:	4a57      	ldr	r2, [pc, #348]	@ (8001a3c <HAL_ADC_MspInit+0x23c>)
 80018e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018e2:	4b55      	ldr	r3, [pc, #340]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ee:	4b52      	ldr	r3, [pc, #328]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018f4:	4b50      	ldr	r3, [pc, #320]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 80018f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 80018fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001902:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001904:	4b4c      	ldr	r3, [pc, #304]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 8001906:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800190a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800190c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 800190e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001912:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001914:	4b48      	ldr	r3, [pc, #288]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 8001916:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800191a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800191c:	4b46      	ldr	r3, [pc, #280]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001922:	4845      	ldr	r0, [pc, #276]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 8001924:	f003 fe3a 	bl	800559c <HAL_DMA_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800192e:	f001 f843 	bl	80029b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a40      	ldr	r2, [pc, #256]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 8001936:	639a      	str	r2, [r3, #56]	@ 0x38
 8001938:	4a3f      	ldr	r2, [pc, #252]	@ (8001a38 <HAL_ADC_MspInit+0x238>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2012      	movs	r0, #18
 8001944:	f003 fdf3 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001948:	2012      	movs	r0, #18
 800194a:	f003 fe0c 	bl	8005566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800194e:	e0fa      	b.n	8001b46 <HAL_ADC_MspInit+0x346>
  else if(adcHandle->Instance==ADC2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3a      	ldr	r2, [pc, #232]	@ (8001a40 <HAL_ADC_MspInit+0x240>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d174      	bne.n	8001a44 <HAL_ADC_MspInit+0x244>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
 800195e:	4b32      	ldr	r3, [pc, #200]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	4a31      	ldr	r2, [pc, #196]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001964:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001968:	6453      	str	r3, [r2, #68]	@ 0x44
 800196a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001972:	623b      	str	r3, [r7, #32]
 8001974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a2a      	ldr	r2, [pc, #168]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b28      	ldr	r3, [pc, #160]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a23      	ldr	r2, [pc, #140]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <HAL_ADC_MspInit+0x228>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80019ca:	2350      	movs	r3, #80	@ 0x50
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ce:	2303      	movs	r3, #3
 80019d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019da:	4619      	mov	r1, r3
 80019dc:	4813      	ldr	r0, [pc, #76]	@ (8001a2c <HAL_ADC_MspInit+0x22c>)
 80019de:	f004 fa33 	bl	8005e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019e2:	2310      	movs	r3, #16
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e6:	2303      	movs	r3, #3
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019f2:	4619      	mov	r1, r3
 80019f4:	480e      	ldr	r0, [pc, #56]	@ (8001a30 <HAL_ADC_MspInit+0x230>)
 80019f6:	f004 fa27 	bl	8005e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019fa:	2301      	movs	r3, #1
 80019fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fe:	2303      	movs	r3, #3
 8001a00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <HAL_ADC_MspInit+0x234>)
 8001a0e:	f004 fa1b 	bl	8005e48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2012      	movs	r0, #18
 8001a18:	f003 fd89 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a1c:	2012      	movs	r0, #18
 8001a1e:	f003 fda2 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8001a22:	e090      	b.n	8001b46 <HAL_ADC_MspInit+0x346>
 8001a24:	40012000 	.word	0x40012000
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020400 	.word	0x40020400
 8001a38:	20000110 	.word	0x20000110
 8001a3c:	40026410 	.word	0x40026410
 8001a40:	40012100 	.word	0x40012100
  else if(adcHandle->Instance==ADC3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a41      	ldr	r2, [pc, #260]	@ (8001b50 <HAL_ADC_MspInit+0x350>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d17b      	bne.n	8001b46 <HAL_ADC_MspInit+0x346>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b40      	ldr	r3, [pc, #256]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a3f      	ldr	r2, [pc, #252]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b39      	ldr	r3, [pc, #228]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a38      	ldr	r2, [pc, #224]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a31      	ldr	r2, [pc, #196]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <HAL_ADC_MspInit+0x354>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4828      	ldr	r0, [pc, #160]	@ (8001b58 <HAL_ADC_MspInit+0x358>)
 8001ab6:	f004 f9c7 	bl	8005e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001aba:	2307      	movs	r3, #7
 8001abc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001aca:	4619      	mov	r1, r3
 8001acc:	4823      	ldr	r0, [pc, #140]	@ (8001b5c <HAL_ADC_MspInit+0x35c>)
 8001ace:	f004 f9bb 	bl	8005e48 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001ad4:	4a23      	ldr	r2, [pc, #140]	@ (8001b64 <HAL_ADC_MspInit+0x364>)
 8001ad6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001ada:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ade:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001aee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001af6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001afa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001afc:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001afe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b02:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001b0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b12:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001b1a:	4811      	ldr	r0, [pc, #68]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001b1c:	f003 fd3e 	bl	800559c <HAL_DMA_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 8001b26:	f000 ff47 	bl	80029b8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001b2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b30:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <HAL_ADC_MspInit+0x360>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2012      	movs	r0, #18
 8001b3c:	f003 fcf7 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b40:	2012      	movs	r0, #18
 8001b42:	f003 fd10 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3748      	adds	r7, #72	@ 0x48
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40012200 	.word	0x40012200
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	20000170 	.word	0x20000170
 8001b64:	40026428 	.word	0x40026428

08001b68 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001b6e:	4a19      	ldr	r2, [pc, #100]	@ (8001bd4 <MX_CAN1_Init+0x6c>)
 8001b70:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8001b72:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001b74:	220e      	movs	r2, #14
 8001b76:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b78:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001b80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b84:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001b88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b8c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001b90:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b94:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bba:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <MX_CAN1_Init+0x68>)
 8001bbc:	f002 fe56 	bl	800486c <HAL_CAN_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001bc6:	f000 fef7 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001d0 	.word	0x200001d0
 8001bd4:	40006400 	.word	0x40006400

08001bd8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a25      	ldr	r2, [pc, #148]	@ (8001c8c <HAL_CAN_MspInit+0xb4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d143      	bne.n	8001c82 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <HAL_CAN_MspInit+0xb8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a23      	ldr	r2, [pc, #140]	@ (8001c90 <HAL_CAN_MspInit+0xb8>)
 8001c04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_CAN_MspInit+0xb8>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_CAN_MspInit+0xb8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c90 <HAL_CAN_MspInit+0xb8>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <HAL_CAN_MspInit+0xb8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c42:	2309      	movs	r3, #9
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4811      	ldr	r0, [pc, #68]	@ (8001c94 <HAL_CAN_MspInit+0xbc>)
 8001c4e:	f004 f8fb 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c52:	2302      	movs	r3, #2
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c62:	2309      	movs	r3, #9
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4809      	ldr	r0, [pc, #36]	@ (8001c94 <HAL_CAN_MspInit+0xbc>)
 8001c6e:	f004 f8eb 	bl	8005e48 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2014      	movs	r0, #20
 8001c78:	f003 fc59 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c7c:	2014      	movs	r0, #20
 8001c7e:	f003 fc72 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	@ 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40006400 	.word	0x40006400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020c00 	.word	0x40020c00

08001c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <MX_DMA_Init+0xc8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8001d60 <MX_DMA_Init+0xc8>)
 8001ca8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b2c      	ldr	r3, [pc, #176]	@ (8001d60 <MX_DMA_Init+0xc8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <MX_DMA_Init+0xc8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	4a27      	ldr	r2, [pc, #156]	@ (8001d60 <MX_DMA_Init+0xc8>)
 8001cc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <MX_DMA_Init+0xc8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	200e      	movs	r0, #14
 8001cdc:	f003 fc27 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001ce0:	200e      	movs	r0, #14
 8001ce2:	f003 fc40 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	200f      	movs	r0, #15
 8001cec:	f003 fc1f 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001cf0:	200f      	movs	r0, #15
 8001cf2:	f003 fc38 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2011      	movs	r0, #17
 8001cfc:	f003 fc17 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d00:	2011      	movs	r0, #17
 8001d02:	f003 fc30 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	202f      	movs	r0, #47	@ 0x2f
 8001d0c:	f003 fc0f 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001d10:	202f      	movs	r0, #47	@ 0x2f
 8001d12:	f003 fc28 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2038      	movs	r0, #56	@ 0x38
 8001d1c:	f003 fc07 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d20:	2038      	movs	r0, #56	@ 0x38
 8001d22:	f003 fc20 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2039      	movs	r0, #57	@ 0x39
 8001d2c:	f003 fbff 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d30:	2039      	movs	r0, #57	@ 0x39
 8001d32:	f003 fc18 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	203a      	movs	r0, #58	@ 0x3a
 8001d3c:	f003 fbf7 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001d40:	203a      	movs	r0, #58	@ 0x3a
 8001d42:	f003 fc10 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2044      	movs	r0, #68	@ 0x44
 8001d4c:	f003 fbef 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001d50:	2044      	movs	r0, #68	@ 0x44
 8001d52:	f003 fc08 	bl	8005566 <HAL_NVIC_EnableIRQ>

}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800

08001d64 <MX_FMPI2C1_Init>:

FMPI2C_HandleTypeDef hfmpi2c1;

/* FMPI2C1 init function */
void MX_FMPI2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001d68:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d6a:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <MX_FMPI2C1_Init+0x64>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00A0A3F7;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d70:	4a16      	ldr	r2, [pc, #88]	@ (8001dcc <MX_FMPI2C1_Init+0x68>)
 8001d72:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001d9e:	4809      	ldr	r0, [pc, #36]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001da0:	f003 ff6c 	bl	8005c7c <HAL_FMPI2C_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8001daa:	f000 fe05 	bl	80029b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dae:	2100      	movs	r1, #0
 8001db0:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <MX_FMPI2C1_Init+0x60>)
 8001db2:	f003 fffe 	bl	8005db2 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001dbc:	f000 fdfc 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200001f8 	.word	0x200001f8
 8001dc8:	40006000 	.word	0x40006000
 8001dcc:	00a0a3f7 	.word	0x00a0a3f7

08001dd0 <HAL_FMPI2C_MspInit>:

void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* fmpi2cHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0a0      	sub	sp, #128	@ 0x80
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	225c      	movs	r2, #92	@ 0x5c
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f007 fc7d 	bl	80096f0 <memset>
  if(fmpi2cHandle->Instance==FMPI2C1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_FMPI2C_MspInit+0xb0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d13a      	bne.n	8001e76 <HAL_FMPI2C_MspInit+0xa6>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8001e04:	2300      	movs	r3, #0
 8001e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 fcef 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e18:	f000 fdce 	bl	80029b8 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <HAL_FMPI2C_MspInit+0xb4>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	4a17      	ldr	r2, [pc, #92]	@ (8001e84 <HAL_FMPI2C_MspInit+0xb4>)
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2c:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <HAL_FMPI2C_MspInit+0xb4>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PD12     ------> FMPI2C1_SCL
    PD13     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e38:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e42:	2301      	movs	r3, #1
 8001e44:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e52:	4619      	mov	r1, r3
 8001e54:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <HAL_FMPI2C_MspInit+0xb8>)
 8001e56:	f003 fff7 	bl	8005e48 <HAL_GPIO_Init>

    /* FMPI2C1 clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_FMPI2C_MspInit+0xb4>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <HAL_FMPI2C_MspInit+0xb4>)
 8001e64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_FMPI2C_MspInit+0xb4>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3780      	adds	r7, #128	@ 0x80
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40006000 	.word	0x40006000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020c00 	.word	0x40020c00

08001e8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	@ 0x30
 8001e90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	4b65      	ldr	r3, [pc, #404]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a64      	ldr	r2, [pc, #400]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001eac:	f043 0310 	orr.w	r3, r3, #16
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b62      	ldr	r3, [pc, #392]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a5d      	ldr	r2, [pc, #372]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b5b      	ldr	r3, [pc, #364]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b57      	ldr	r3, [pc, #348]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a56      	ldr	r2, [pc, #344]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b54      	ldr	r3, [pc, #336]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b50      	ldr	r3, [pc, #320]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a4f      	ldr	r2, [pc, #316]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b4d      	ldr	r3, [pc, #308]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	4b49      	ldr	r3, [pc, #292]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a48      	ldr	r2, [pc, #288]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b46      	ldr	r3, [pc, #280]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b42      	ldr	r3, [pc, #264]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a41      	ldr	r2, [pc, #260]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800203c <MX_GPIO_Init+0x1b0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f248 013a 	movw	r1, #32826	@ 0x803a
 8001f50:	483b      	ldr	r0, [pc, #236]	@ (8002040 <MX_GPIO_Init+0x1b4>)
 8001f52:	f004 f90d 	bl	8006170 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2108      	movs	r1, #8
 8001f5a:	483a      	ldr	r0, [pc, #232]	@ (8002044 <MX_GPIO_Init+0x1b8>)
 8001f5c:	f004 f908 	bl	8006170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001f66:	4838      	ldr	r0, [pc, #224]	@ (8002048 <MX_GPIO_Init+0x1bc>)
 8001f68:	f004 f902 	bl	8006170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_3
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8001f72:	4836      	ldr	r0, [pc, #216]	@ (800204c <MX_GPIO_Init+0x1c0>)
 8001f74:	f004 f8fc 	bl	8006170 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	21c0      	movs	r1, #192	@ 0xc0
 8001f7c:	4834      	ldr	r0, [pc, #208]	@ (8002050 <MX_GPIO_Init+0x1c4>)
 8001f7e:	f004 f8f7 	bl	8006170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE15
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15
 8001f82:	f248 033a 	movw	r3, #32826	@ 0x803a
 8001f86:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4829      	ldr	r0, [pc, #164]	@ (8002040 <MX_GPIO_Init+0x1b4>)
 8001f9c:	f003 ff54 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4823      	ldr	r0, [pc, #140]	@ (8002044 <MX_GPIO_Init+0x1b8>)
 8001fb8:	f003 ff46 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001fbc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481c      	ldr	r0, [pc, #112]	@ (8002048 <MX_GPIO_Init+0x1bc>)
 8001fd6:	f003 ff37 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_3|GPIO_PIN_4
 8001fda:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8001fde:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4816      	ldr	r0, [pc, #88]	@ (800204c <MX_GPIO_Init+0x1c0>)
 8001ff4:	f003 ff28 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffe:	2301      	movs	r3, #1
 8002000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002002:	2301      	movs	r3, #1
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	480e      	ldr	r0, [pc, #56]	@ (800204c <MX_GPIO_Init+0x1c0>)
 8002012:	f003 ff19 	bl	8005e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002016:	23c0      	movs	r3, #192	@ 0xc0
 8002018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	4808      	ldr	r0, [pc, #32]	@ (8002050 <MX_GPIO_Init+0x1c4>)
 800202e:	f003 ff0b 	bl	8005e48 <HAL_GPIO_Init>

}
 8002032:	bf00      	nop
 8002034:	3730      	adds	r7, #48	@ 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40021000 	.word	0x40021000
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40020800 	.word	0x40020800

08002054 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <MX_I2C3_Init+0x50>)
 800205a:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <MX_I2C3_Init+0x54>)
 800205c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <MX_I2C3_Init+0x50>)
 8002060:	4a12      	ldr	r2, [pc, #72]	@ (80020ac <MX_I2C3_Init+0x58>)
 8002062:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <MX_I2C3_Init+0x50>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <MX_I2C3_Init+0x50>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <MX_I2C3_Init+0x50>)
 8002072:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002076:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <MX_I2C3_Init+0x50>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <MX_I2C3_Init+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002084:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <MX_I2C3_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <MX_I2C3_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	@ (80020a4 <MX_I2C3_Init+0x50>)
 8002092:	f004 f8a1 	bl	80061d8 <HAL_I2C_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800209c:	f000 fc8c 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2000024c 	.word	0x2000024c
 80020a8:	40005c00 	.word	0x40005c00
 80020ac:	000186a0 	.word	0x000186a0

080020b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	@ 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a29      	ldr	r2, [pc, #164]	@ (8002174 <HAL_I2C_MspInit+0xc4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d14b      	bne.n	800216a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	4a27      	ldr	r2, [pc, #156]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e2:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	4a20      	ldr	r2, [pc, #128]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800210a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800210e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002110:	2312      	movs	r3, #18
 8002112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800211c:	2304      	movs	r3, #4
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	4815      	ldr	r0, [pc, #84]	@ (800217c <HAL_I2C_MspInit+0xcc>)
 8002128:	f003 fe8e 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800212c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002132:	2312      	movs	r3, #18
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800213e:	2304      	movs	r3, #4
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	480d      	ldr	r0, [pc, #52]	@ (8002180 <HAL_I2C_MspInit+0xd0>)
 800214a:	f003 fe7d 	bl	8005e48 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	4a08      	ldr	r2, [pc, #32]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 8002158:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800215c:	6413      	str	r3, [r2, #64]	@ 0x40
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_I2C_MspInit+0xc8>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	@ 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40005c00 	.word	0x40005c00
 8002178:	40023800 	.word	0x40023800
 800217c:	40020800 	.word	0x40020800
 8002180:	40020000 	.word	0x40020000

08002184 <enable_servo>:

static CAN_RxHeaderTypeDef RxHeader;
static uint8_t RxData[4];
static uint8_t count = 0;

void enable_servo(uint8_t servo_id, uint8_t is_enabled) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	460a      	mov	r2, r1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	4613      	mov	r3, r2
 8002192:	71bb      	strb	r3, [r7, #6]
	switch (servo_id) {
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d015      	beq.n	80021c6 <enable_servo+0x42>
 800219a:	2b03      	cmp	r3, #3
 800219c:	dc1b      	bgt.n	80021d6 <enable_servo+0x52>
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d002      	beq.n	80021a8 <enable_servo+0x24>
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d007      	beq.n	80021b6 <enable_servo+0x32>
	case 3:
		HAL_GPIO_WritePin((GPIO_TypeDef*) SERV_CTL_3_GPIO_Port, SERV_CTL_3_Pin,
				is_enabled);
		break;
	}
}
 80021a6:	e016      	b.n	80021d6 <enable_servo+0x52>
		HAL_GPIO_WritePin((GPIO_TypeDef*) SERV_CTL_1_GPIO_Port, SERV_CTL_1_Pin,
 80021a8:	79bb      	ldrb	r3, [r7, #6]
 80021aa:	461a      	mov	r2, r3
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <enable_servo+0x5c>)
 80021b0:	f003 ffde 	bl	8006170 <HAL_GPIO_WritePin>
		break;
 80021b4:	e00f      	b.n	80021d6 <enable_servo+0x52>
		HAL_GPIO_WritePin((GPIO_TypeDef*) SERV_CTL_2_GPIO_Port, SERV_CTL_2_Pin,
 80021b6:	79bb      	ldrb	r3, [r7, #6]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021be:	4808      	ldr	r0, [pc, #32]	@ (80021e0 <enable_servo+0x5c>)
 80021c0:	f003 ffd6 	bl	8006170 <HAL_GPIO_WritePin>
		break;
 80021c4:	e007      	b.n	80021d6 <enable_servo+0x52>
		HAL_GPIO_WritePin((GPIO_TypeDef*) SERV_CTL_3_GPIO_Port, SERV_CTL_3_Pin,
 80021c6:	79bb      	ldrb	r3, [r7, #6]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ce:	4804      	ldr	r0, [pc, #16]	@ (80021e0 <enable_servo+0x5c>)
 80021d0:	f003 ffce 	bl	8006170 <HAL_GPIO_WritePin>
		break;
 80021d4:	bf00      	nop
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40020c00 	.word	0x40020c00

080021e4 <set_servo_angle>:

void set_servo_angle(int8_t servo_id, uint16_t angle) {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	460a      	mov	r2, r1
 80021ee:	71fb      	strb	r3, [r7, #7]
 80021f0:	4613      	mov	r3, r2
 80021f2:	80bb      	strh	r3, [r7, #4]
	switch (servo_id) {
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d02e      	beq.n	800225a <set_servo_angle+0x76>
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	dc40      	bgt.n	8002282 <set_servo_angle+0x9e>
 8002200:	2b01      	cmp	r3, #1
 8002202:	d002      	beq.n	800220a <set_servo_angle+0x26>
 8002204:	2b02      	cmp	r3, #2
 8002206:	d014      	beq.n	8002232 <set_servo_angle+0x4e>
		break;
	case 3:
		TIM2->CCR4 = ANGLE_TO_US(angle);
		break;
	}
}
 8002208:	e03b      	b.n	8002282 <set_servo_angle+0x9e>
		TIM2->CCR2 = ANGLE_TO_US(angle);
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	4a1e      	ldr	r2, [pc, #120]	@ (8002290 <set_servo_angle+0xac>)
 8002216:	fb82 1203 	smull	r1, r2, r2, r3
 800221a:	441a      	add	r2, r3
 800221c:	11d2      	asrs	r2, r2, #7
 800221e:	17db      	asrs	r3, r3, #31
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	b29b      	uxth	r3, r3
 8002224:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002228:	b29a      	uxth	r2, r3
 800222a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800222e:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8002230:	e027      	b.n	8002282 <set_servo_angle+0x9e>
		TIM2->CCR3 = ANGLE_TO_US(angle);
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8002238:	fb02 f303 	mul.w	r3, r2, r3
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <set_servo_angle+0xac>)
 800223e:	fb82 1203 	smull	r1, r2, r2, r3
 8002242:	441a      	add	r2, r3
 8002244:	11d2      	asrs	r2, r2, #7
 8002246:	17db      	asrs	r3, r3, #31
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	b29b      	uxth	r3, r3
 800224c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002250:	b29a      	uxth	r2, r3
 8002252:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002256:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8002258:	e013      	b.n	8002282 <set_servo_angle+0x9e>
		TIM2->CCR4 = ANGLE_TO_US(angle);
 800225a:	88bb      	ldrh	r3, [r7, #4]
 800225c:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8002260:	fb02 f303 	mul.w	r3, r2, r3
 8002264:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <set_servo_angle+0xac>)
 8002266:	fb82 1203 	smull	r1, r2, r2, r3
 800226a:	441a      	add	r2, r3
 800226c:	11d2      	asrs	r2, r2, #7
 800226e:	17db      	asrs	r3, r3, #31
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002278:	b29a      	uxth	r2, r3
 800227a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8002280:	bf00      	nop
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	b60b60b7 	.word	0xb60b60b7

08002294 <enable_solinoid>:

void enable_solinoid(uint8_t solinoid_id, uint8_t is_enabled) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	460a      	mov	r2, r1
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71bb      	strb	r3, [r7, #6]
	switch (solinoid_id) {
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d014      	beq.n	80022d4 <enable_solinoid+0x40>
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	dc19      	bgt.n	80022e2 <enable_solinoid+0x4e>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <enable_solinoid+0x24>
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d007      	beq.n	80022c6 <enable_solinoid+0x32>
		break;
	case 2:
		HAL_GPIO_WritePin(SOL_2_GPIO_Port, SOL_2_Pin, is_enabled);
		break;
	}
}
 80022b6:	e014      	b.n	80022e2 <enable_solinoid+0x4e>
		HAL_GPIO_WritePin(SOL_0_GPIO_Port, SOL_0_Pin, is_enabled);
 80022b8:	79bb      	ldrb	r3, [r7, #6]
 80022ba:	461a      	mov	r2, r3
 80022bc:	2101      	movs	r1, #1
 80022be:	480b      	ldr	r0, [pc, #44]	@ (80022ec <enable_solinoid+0x58>)
 80022c0:	f003 ff56 	bl	8006170 <HAL_GPIO_WritePin>
		break;
 80022c4:	e00d      	b.n	80022e2 <enable_solinoid+0x4e>
		HAL_GPIO_WritePin(SOL_1_GPIO_Port, SOL_1_Pin, is_enabled);
 80022c6:	79bb      	ldrb	r3, [r7, #6]
 80022c8:	461a      	mov	r2, r3
 80022ca:	2102      	movs	r1, #2
 80022cc:	4807      	ldr	r0, [pc, #28]	@ (80022ec <enable_solinoid+0x58>)
 80022ce:	f003 ff4f 	bl	8006170 <HAL_GPIO_WritePin>
		break;
 80022d2:	e006      	b.n	80022e2 <enable_solinoid+0x4e>
		HAL_GPIO_WritePin(SOL_2_GPIO_Port, SOL_2_Pin, is_enabled);
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	461a      	mov	r2, r3
 80022d8:	2104      	movs	r1, #4
 80022da:	4804      	ldr	r0, [pc, #16]	@ (80022ec <enable_solinoid+0x58>)
 80022dc:	f003 ff48 	bl	8006170 <HAL_GPIO_WritePin>
		break;
 80022e0:	bf00      	nop
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40020800 	.word	0x40020800

080022f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80022f8:	4b40      	ldr	r3, [pc, #256]	@ (80023fc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80022fa:	4a41      	ldr	r2, [pc, #260]	@ (8002400 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80022fc:	2100      	movs	r1, #0
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f002 fcc3 	bl	8004c8a <HAL_CAN_GetRxMessage>
	if ((RxHeader.StdId = 0x1DA)) {
 8002304:	4b3e      	ldr	r3, [pc, #248]	@ (8002400 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8002306:	f44f 72ed 	mov.w	r2, #474	@ 0x1da
 800230a:	601a      	str	r2, [r3, #0]
		count = RxHeader.DLC;
 800230c:	4b3c      	ldr	r3, [pc, #240]	@ (8002400 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b3c      	ldr	r3, [pc, #240]	@ (8002404 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8002314:	701a      	strb	r2, [r3, #0]

		switch (RxData[0]) {
 8002316:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2beb      	cmp	r3, #235	@ 0xeb
 800231c:	d038      	beq.n	8002390 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 800231e:	2beb      	cmp	r3, #235	@ 0xeb
 8002320:	dc68      	bgt.n	80023f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 8002322:	2bda      	cmp	r3, #218	@ 0xda
 8002324:	d042      	beq.n	80023ac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 8002326:	2bda      	cmp	r3, #218	@ 0xda
 8002328:	dc64      	bgt.n	80023f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 800232a:	2baa      	cmp	r3, #170	@ 0xaa
 800232c:	d002      	beq.n	8002334 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 800232e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002330:	d018      	beq.n	8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8002332:	e05f      	b.n	80023f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
		// Set servo angle
		case 0xAA:
			int16_t packet = RxData[2] << 8 | RxData[3];
 8002334:	4b31      	ldr	r3, [pc, #196]	@ (80023fc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8002336:	789b      	ldrb	r3, [r3, #2]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	b21a      	sxth	r2, r3
 800233c:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800233e:	78db      	ldrb	r3, [r3, #3]
 8002340:	b21b      	sxth	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	817b      	strh	r3, [r7, #10]
			set_servo_angle(packet & 0b11, packet >> 2);
 8002346:	897b      	ldrh	r3, [r7, #10]
 8002348:	b25b      	sxtb	r3, r3
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	b25a      	sxtb	r2, r3
 8002350:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002354:	109b      	asrs	r3, r3, #2
 8002356:	b21b      	sxth	r3, r3
 8002358:	b29b      	uxth	r3, r3
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f7ff ff41 	bl	80021e4 <set_servo_angle>
			break;
 8002362:	e047      	b.n	80023f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			// Enable/Disable servo power
		case 0xB0:
			packet = RxData[3];
 8002364:	4b25      	ldr	r3, [pc, #148]	@ (80023fc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8002366:	78db      	ldrb	r3, [r3, #3]
 8002368:	817b      	strh	r3, [r7, #10]
			enable_servo(packet & 0b11, (packet >> 2) != 0);
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	b2da      	uxtb	r2, r3
 8002374:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002378:	109b      	asrs	r3, r3, #2
 800237a:	b21b      	sxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7ff fefb 	bl	8002184 <enable_servo>
			break;
 800238e:	e031      	b.n	80023f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			// Power/Off Solenoid
		case 0xEB:
			enable_solinoid(RxData[2], RxData[3] != 0);
 8002390:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8002392:	789a      	ldrb	r2, [r3, #2]
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8002396:	78db      	ldrb	r3, [r3, #3]
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f7ff ff75 	bl	8002294 <enable_solinoid>
			break;
 80023aa:	e023      	b.n	80023f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			// Send Data
		case 0xDA:
			for (int i = 0; i < 22; i++) {
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e01b      	b.n	80023ea <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
				TxData[0] = i;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b14      	ldr	r3, [pc, #80]	@ (8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80023b8:	701a      	strb	r2, [r3, #0]
				TxData[1] = 0xBA;
 80023ba:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80023bc:	22ba      	movs	r2, #186	@ 0xba
 80023be:	705a      	strb	r2, [r3, #1]
				TxData[2] = 0xDA;
 80023c0:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80023c2:	22da      	movs	r2, #218	@ 0xda
 80023c4:	709a      	strb	r2, [r3, #2]
				TxData[3] = 0x55;
 80023c6:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80023c8:	2255      	movs	r2, #85	@ 0x55
 80023ca:	70da      	strb	r2, [r3, #3]
				TxData[4] = 0x69;
 80023cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80023ce:	2269      	movs	r2, #105	@ 0x69
 80023d0:	711a      	strb	r2, [r3, #4]
				if ((HAL_CAN_AddTxMessage(hcan1, &TxHeader, TxData, &TxMailbox))
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80023d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80023d6:	490e      	ldr	r1, [pc, #56]	@ (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f002 fb86 	bl	8004aea <HAL_CAN_AddTxMessage>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
			for (int i = 0; i < 22; i++) {
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3301      	adds	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b15      	cmp	r3, #21
 80023ee:	dde0      	ble.n	80023b2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
						!= HAL_OK)
					return;
			}
			break;
 80023f0:	e000      	b.n	80023f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
					return;
 80023f2:	bf00      	nop
			// PCB^2 Error Signal
		case 0xDE:
		}

	}
}
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000031c 	.word	0x2000031c
 8002400:	20000300 	.word	0x20000300
 8002404:	20000320 	.word	0x20000320
 8002408:	200002f8 	.word	0x200002f8
 800240c:	200002f4 	.word	0x200002f4
 8002410:	200002dc 	.word	0x200002dc

08002414 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	f5ad 6d8c 	sub.w	sp, sp, #1120	@ 0x460
 800241a:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800241c:	f001 f91a 	bl	8003654 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002420:	f000 f9be 	bl	80027a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002424:	f7ff fd32 	bl	8001e8c <MX_GPIO_Init>
	MX_DMA_Init();
 8002428:	f7ff fc36 	bl	8001c98 <MX_DMA_Init>
	MX_ADC1_Init();
 800242c:	f7ff f85a 	bl	80014e4 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002430:	f7ff f8e8 	bl	8001604 <MX_ADC2_Init>
	MX_CAN1_Init();
 8002434:	f7ff fb98 	bl	8001b68 <MX_CAN1_Init>
	MX_FMPI2C1_Init();
 8002438:	f7ff fc94 	bl	8001d64 <MX_FMPI2C1_Init>
	MX_I2C3_Init();
 800243c:	f7ff fe0a 	bl	8002054 <MX_I2C3_Init>
	MX_QUADSPI_Init();
 8002440:	f000 fac0 	bl	80029c4 <MX_QUADSPI_Init>
	MX_SPI1_Init();
 8002444:	f000 fbfc 	bl	8002c40 <MX_SPI1_Init>
	MX_SPI2_Init();
 8002448:	f000 fc30 	bl	8002cac <MX_SPI2_Init>
	MX_TIM4_Init();
 800244c:	f000 ff7c 	bl	8003348 <MX_TIM4_Init>
	MX_SPI4_Init();
 8002450:	f000 fc62 	bl	8002d18 <MX_SPI4_Init>
	MX_TIM3_Init();
 8002454:	f000 fefc 	bl	8003250 <MX_TIM3_Init>
	MX_ADC3_Init();
 8002458:	f7ff f944 	bl	80016e4 <MX_ADC3_Init>
	MX_SAI2_Init();
 800245c:	f000 fb68 	bl	8002b30 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002460:	2201      	movs	r2, #1
 8002462:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002466:	48c0      	ldr	r0, [pc, #768]	@ (8002768 <main+0x354>)
 8002468:	f003 fe82 	bl	8006170 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800246c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002470:	f001 f962 	bl	8003738 <HAL_Delay>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002474:	2104      	movs	r1, #4
 8002476:	48bd      	ldr	r0, [pc, #756]	@ (800276c <main+0x358>)
 8002478:	f006 faf4 	bl	8008a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800247c:	2108      	movs	r1, #8
 800247e:	48bb      	ldr	r0, [pc, #748]	@ (800276c <main+0x358>)
 8002480:	f006 faf0 	bl	8008a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002484:	210c      	movs	r1, #12
 8002486:	48b9      	ldr	r0, [pc, #740]	@ (800276c <main+0x358>)
 8002488:	f006 faec 	bl	8008a64 <HAL_TIM_PWM_Start>

	HAL_CAN_Start(&hcan1);
 800248c:	48b8      	ldr	r0, [pc, #736]	@ (8002770 <main+0x35c>)
 800248e:	f002 fae8 	bl	8004a62 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //activates rx interrupt
 8002492:	2102      	movs	r1, #2
 8002494:	48b6      	ldr	r0, [pc, #728]	@ (8002770 <main+0x35c>)
 8002496:	f002 fd1a 	bl	8004ece <HAL_CAN_ActivateNotification>

	//HAL_ADC_Start(&hadc2);
	HAL_ADC_Start(&hadc2);
 800249a:	48b6      	ldr	r0, [pc, #728]	@ (8002774 <main+0x360>)
 800249c:	f001 f9b4 	bl	8003808 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, pt_adc_buff, 4);
 80024a0:	2204      	movs	r2, #4
 80024a2:	49b5      	ldr	r1, [pc, #724]	@ (8002778 <main+0x364>)
 80024a4:	48b5      	ldr	r0, [pc, #724]	@ (800277c <main+0x368>)
 80024a6:	f002 f84d 	bl	8004544 <HAL_ADCEx_MultiModeStart_DMA>
	//HAL_ADC_Start_DMA(&hadc1, adc_buff_ptr, 8);
	HAL_ADC_Start_IT(&hadc1);
 80024aa:	48b4      	ldr	r0, [pc, #720]	@ (800277c <main+0x368>)
 80024ac:	f001 fa7e 	bl	80039ac <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc3);
 80024b0:	48b3      	ldr	r0, [pc, #716]	@ (8002780 <main+0x36c>)
 80024b2:	f001 fa7b 	bl	80039ac <HAL_ADC_Start_IT>
	HAL_ADC_Start_DMA(&hadc3, ctrl_adc_buff, 6);
 80024b6:	2206      	movs	r2, #6
 80024b8:	49b2      	ldr	r1, [pc, #712]	@ (8002784 <main+0x370>)
 80024ba:	48b1      	ldr	r0, [pc, #708]	@ (8002780 <main+0x36c>)
 80024bc:	f001 fc64 	bl	8003d88 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 80024c0:	48b1      	ldr	r0, [pc, #708]	@ (8002788 <main+0x374>)
 80024c2:	f006 f9bf 	bl	8008844 <HAL_TIM_Base_Start>

	TxHeader.IDE = CAN_ID_STD;
 80024c6:	4bb1      	ldr	r3, [pc, #708]	@ (800278c <main+0x378>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x2CB;
 80024cc:	4baf      	ldr	r3, [pc, #700]	@ (800278c <main+0x378>)
 80024ce:	f240 22cb 	movw	r2, #715	@ 0x2cb
 80024d2:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80024d4:	4bad      	ldr	r3, [pc, #692]	@ (800278c <main+0x378>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 5;
 80024da:	4bac      	ldr	r3, [pc, #688]	@ (800278c <main+0x378>)
 80024dc:	2205      	movs	r2, #5
 80024de:	611a      	str	r2, [r3, #16]

	TxData[0] = 0xEF;
 80024e0:	4bab      	ldr	r3, [pc, #684]	@ (8002790 <main+0x37c>)
 80024e2:	22ef      	movs	r2, #239	@ 0xef
 80024e4:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0xBE;
 80024e6:	4baa      	ldr	r3, [pc, #680]	@ (8002790 <main+0x37c>)
 80024e8:	22be      	movs	r2, #190	@ 0xbe
 80024ea:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0xAD;
 80024ec:	4ba8      	ldr	r3, [pc, #672]	@ (8002790 <main+0x37c>)
 80024ee:	22ad      	movs	r2, #173	@ 0xad
 80024f0:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0xDE;
 80024f2:	4ba7      	ldr	r3, [pc, #668]	@ (8002790 <main+0x37c>)
 80024f4:	22de      	movs	r2, #222	@ 0xde
 80024f6:	70da      	strb	r2, [r3, #3]
	if ((HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox))
 80024f8:	4ba6      	ldr	r3, [pc, #664]	@ (8002794 <main+0x380>)
 80024fa:	4aa5      	ldr	r2, [pc, #660]	@ (8002790 <main+0x37c>)
 80024fc:	49a3      	ldr	r1, [pc, #652]	@ (800278c <main+0x378>)
 80024fe:	489c      	ldr	r0, [pc, #624]	@ (8002770 <main+0x35c>)
 8002500:	f002 faf3 	bl	8004aea <HAL_CAN_AddTxMessage>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <main+0xfa>
			!= HAL_OK) {
		Error_Handler();
 800250a:	f000 fa55 	bl	80029b8 <Error_Handler>
	int32_t value[8];
	float voltage[8];

	struct ad7124_dev ad7124_device;

	struct ad7124_registerData ad7124_init_regs_default[AD7124_REG_NO] = { {
 800250e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002512:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8002516:	4aa0      	ldr	r2, [pc, #640]	@ (8002798 <main+0x384>)
 8002518:	4618      	mov	r0, r3
 800251a:	4611      	mov	r1, r2
 800251c:	f44f 7364 	mov.w	r3, #912	@ 0x390
 8002520:	461a      	mov	r2, r3
 8002522:	f007 f911 	bl	8009748 <memcpy>
	{ 0x36, 0x500000, 3, 1 }, /* AD7124_Gain_5 */
	{ 0x37, 0x500000, 3, 1 }, /* AD7124_Gain_6 */
	{ 0x38, 0x500000, 3, 1 }, /* AD7124_Gain_7 */
	};

	flag = ad7124_init(&ad7124_device, &hspi2, GPIOD, GPIO_PIN_10, ID_AD7124_8,
 8002526:	f507 7065 	add.w	r0, r7, #916	@ 0x394
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	2301      	movs	r3, #1
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002536:	4a8c      	ldr	r2, [pc, #560]	@ (8002768 <main+0x354>)
 8002538:	4998      	ldr	r1, [pc, #608]	@ (800279c <main+0x388>)
 800253a:	f7fe ff20 	bl	800137e <ad7124_init>
 800253e:	4603      	mov	r3, r0
 8002540:	f887 3453 	strb.w	r3, [r7, #1107]	@ 0x453
			&ad7124_init_regs_default);

	if (flag < 0)
 8002544:	f997 3453 	ldrsb.w	r3, [r7, #1107]	@ 0x453
 8002548:	2b00      	cmp	r3, #0
 800254a:	da02      	bge.n	8002552 <main+0x13e>
		return flag;
 800254c:	f997 3453 	ldrsb.w	r3, [r7, #1107]	@ 0x453
 8002550:	e104      	b.n	800275c <main+0x348>

	HAL_Delay(100);
 8002552:	2064      	movs	r0, #100	@ 0x64
 8002554:	f001 f8f0 	bl	8003738 <HAL_Delay>

	ad7124_noCheckReadRegister(&ad7124_device, &ad7124_device.regs[0x06]);
 8002558:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800255c:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8002560:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f9d2 	bl	8000910 <ad7124_noCheckReadRegister>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
		value[0] = ad7124_adcRead(&ad7124_device, 1);
 800256c:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fe17 	bl	80011a6 <ad7124_adcRead>
 8002578:	4603      	mov	r3, r0
 800257a:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
		value[1] = ad7124_adcRead(&ad7124_device, 3);
 800257e:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8002582:	2103      	movs	r1, #3
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fe0e 	bl	80011a6 <ad7124_adcRead>
 800258a:	4603      	mov	r3, r0
 800258c:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
		value[2] = ad7124_adcRead(&ad7124_device, 5);
 8002590:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8002594:	2105      	movs	r1, #5
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fe05 	bl	80011a6 <ad7124_adcRead>
 800259c:	4603      	mov	r3, r0
 800259e:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
		value[3] = ad7124_adcRead(&ad7124_device, 7);
 80025a2:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80025a6:	2107      	movs	r1, #7
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fdfc 	bl	80011a6 <ad7124_adcRead>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
		value[4] = ad7124_adcRead(&ad7124_device, 9);
 80025b4:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80025b8:	2109      	movs	r1, #9
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fdf3 	bl	80011a6 <ad7124_adcRead>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
		value[5] = ad7124_adcRead(&ad7124_device, 11);
 80025c6:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80025ca:	210b      	movs	r1, #11
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fdea 	bl	80011a6 <ad7124_adcRead>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
		value[6] = ad7124_adcRead(&ad7124_device, 13);
 80025d8:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80025dc:	210d      	movs	r1, #13
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fde1 	bl	80011a6 <ad7124_adcRead>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
		value[7] = ad7124_adcRead(&ad7124_device, 15);
 80025ea:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80025ee:	210f      	movs	r1, #15
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fdd8 	bl	80011a6 <ad7124_adcRead>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
		HAL_Delay(50);
 80025fc:	2032      	movs	r0, #50	@ 0x32
 80025fe:	f001 f89b 	bl	8003738 <HAL_Delay>
		voltage[0] = ad7124_toVoltage(value[0], 1, 2.5, 1);
 8002602:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002606:	2201      	movs	r2, #1
 8002608:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fe46 	bl	80012a0 <ad7124_toVoltage>
 8002614:	eef0 7a40 	vmov.f32	s15, s0
 8002618:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800261c:	edc3 7a00 	vstr	s15, [r3]
		voltage[1] = ad7124_toVoltage(value[1], 1, 2.5, 1);
 8002620:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8002624:	2201      	movs	r2, #1
 8002626:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fe37 	bl	80012a0 <ad7124_toVoltage>
 8002632:	eef0 7a40 	vmov.f32	s15, s0
 8002636:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 800263a:	edc3 7a00 	vstr	s15, [r3]
		voltage[2] = ad7124_toVoltage(value[2], 1, 2.5, 1);
 800263e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8002642:	2201      	movs	r2, #1
 8002644:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fe28 	bl	80012a0 <ad7124_toVoltage>
 8002650:	eef0 7a40 	vmov.f32	s15, s0
 8002654:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8002658:	edc3 7a00 	vstr	s15, [r3]
		voltage[3] = ad7124_toVoltage(value[3], 1, 2.5, 1);
 800265c:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8002660:	2201      	movs	r2, #1
 8002662:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fe19 	bl	80012a0 <ad7124_toVoltage>
 800266e:	eef0 7a40 	vmov.f32	s15, s0
 8002672:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8002676:	edc3 7a00 	vstr	s15, [r3]
		voltage[4] = ad7124_toVoltage(value[4], 1, 2.5, 1);
 800267a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800267e:	2201      	movs	r2, #1
 8002680:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fe0a 	bl	80012a0 <ad7124_toVoltage>
 800268c:	eef0 7a40 	vmov.f32	s15, s0
 8002690:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8002694:	edc3 7a00 	vstr	s15, [r3]
		voltage[5] = ad7124_toVoltage(value[5], 1, 2.5, 1);
 8002698:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800269c:	2201      	movs	r2, #1
 800269e:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fdfb 	bl	80012a0 <ad7124_toVoltage>
 80026aa:	eef0 7a40 	vmov.f32	s15, s0
 80026ae:	f207 4324 	addw	r3, r7, #1060	@ 0x424
 80026b2:	edc3 7a00 	vstr	s15, [r3]
		voltage[6] = ad7124_toVoltage(value[6], 1, 2.5, 1);
 80026b6:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80026ba:	2201      	movs	r2, #1
 80026bc:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 80026c0:	2101      	movs	r1, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fdec 	bl	80012a0 <ad7124_toVoltage>
 80026c8:	eef0 7a40 	vmov.f32	s15, s0
 80026cc:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80026d0:	edc3 7a00 	vstr	s15, [r3]
		voltage[7] = ad7124_toVoltage(value[7], 1, 2.5, 1);
 80026d4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80026d8:	2201      	movs	r2, #1
 80026da:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 80026de:	2101      	movs	r1, #1
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fddd 	bl	80012a0 <ad7124_toVoltage>
 80026e6:	eef0 7a40 	vmov.f32	s15, s0
 80026ea:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 80026ee:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 80026f2:	2032      	movs	r0, #50	@ 0x32
 80026f4:	f001 f820 	bl	8003738 <HAL_Delay>

		for (i = 0; i < 22; i++) {
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 80026fe:	e028      	b.n	8002752 <main+0x33e>
			TxData[0] = i;
 8002700:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <main+0x37c>)
 8002708:	701a      	strb	r2, [r3, #0]
			TxData[1] = 0xBA;
 800270a:	4b21      	ldr	r3, [pc, #132]	@ (8002790 <main+0x37c>)
 800270c:	22ba      	movs	r2, #186	@ 0xba
 800270e:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0xDA;
 8002710:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <main+0x37c>)
 8002712:	22da      	movs	r2, #218	@ 0xda
 8002714:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0x55;
 8002716:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <main+0x37c>)
 8002718:	2255      	movs	r2, #85	@ 0x55
 800271a:	70da      	strb	r2, [r3, #3]
			TxData[4] = 0x69;
 800271c:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <main+0x37c>)
 800271e:	2269      	movs	r2, #105	@ 0x69
 8002720:	711a      	strb	r2, [r3, #4]
			if ((HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox))
 8002722:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <main+0x380>)
 8002724:	4a1a      	ldr	r2, [pc, #104]	@ (8002790 <main+0x37c>)
 8002726:	4919      	ldr	r1, [pc, #100]	@ (800278c <main+0x378>)
 8002728:	4811      	ldr	r0, [pc, #68]	@ (8002770 <main+0x35c>)
 800272a:	f002 f9de 	bl	8004aea <HAL_CAN_AddTxMessage>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <main+0x324>
					!= HAL_OK)
				return 0;
 8002734:	2300      	movs	r3, #0
 8002736:	e011      	b.n	800275c <main+0x348>
//	  				}
			HAL_Delay(500);
 8002738:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800273c:	f000 fffc 	bl	8003738 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8002740:	2108      	movs	r1, #8
 8002742:	4809      	ldr	r0, [pc, #36]	@ (8002768 <main+0x354>)
 8002744:	f003 fd2d 	bl	80061a2 <HAL_GPIO_TogglePin>
		for (i = 0; i < 22; i++) {
 8002748:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 800274c:	3301      	adds	r3, #1
 800274e:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 8002752:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8002756:	2b15      	cmp	r3, #21
 8002758:	d9d2      	bls.n	8002700 <main+0x2ec>
		value[0] = ad7124_adcRead(&ad7124_device, 1);
 800275a:	e707      	b.n	800256c <main+0x158>

			/* USER CODE BEGIN 3 */
		}
		/* USER CODE END 3 */
	}
}
 800275c:	4618      	mov	r0, r3
 800275e:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020c00 	.word	0x40020c00
 800276c:	200006cc 	.word	0x200006cc
 8002770:	200001d0 	.word	0x200001d0
 8002774:	20000080 	.word	0x20000080
 8002778:	200002a0 	.word	0x200002a0
 800277c:	20000038 	.word	0x20000038
 8002780:	200000c8 	.word	0x200000c8
 8002784:	200002b0 	.word	0x200002b0
 8002788:	20000684 	.word	0x20000684
 800278c:	200002dc 	.word	0x200002dc
 8002790:	200002f8 	.word	0x200002f8
 8002794:	200002f4 	.word	0x200002f4
 8002798:	0800978c 	.word	0x0800978c
 800279c:	20000454 	.word	0x20000454

080027a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b094      	sub	sp, #80	@ 0x50
 80027a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	2234      	movs	r2, #52	@ 0x34
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f006 ff9e 	bl	80096f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027b4:	f107 0308 	add.w	r3, r7, #8
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	4b29      	ldr	r3, [pc, #164]	@ (8002870 <SystemClock_Config+0xd0>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	4a28      	ldr	r2, [pc, #160]	@ (8002870 <SystemClock_Config+0xd0>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d4:	4b26      	ldr	r3, [pc, #152]	@ (8002870 <SystemClock_Config+0xd0>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e0:	2300      	movs	r3, #0
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <SystemClock_Config+0xd4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <SystemClock_Config+0xd4>)
 80027ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <SystemClock_Config+0xd4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027fc:	2301      	movs	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002800:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002804:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002806:	2302      	movs	r3, #2
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800280a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800280e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002810:	2310      	movs	r3, #16
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 224;
 8002814:	23e0      	movs	r3, #224	@ 0xe0
 8002816:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002818:	2302      	movs	r3, #2
 800281a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800281c:	2307      	movs	r3, #7
 800281e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002820:	2302      	movs	r3, #2
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4618      	mov	r0, r3
 800282a:	f004 feff 	bl	800762c <HAL_RCC_OscConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <SystemClock_Config+0x98>
		Error_Handler();
 8002834:	f000 f8c0 	bl	80029b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002838:	230f      	movs	r3, #15
 800283a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800283c:	2303      	movs	r3, #3
 800283e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002844:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002848:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800284a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800284e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	2105      	movs	r1, #5
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fec4 	bl	80065e4 <HAL_RCC_ClockConfig>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <SystemClock_Config+0xc6>
		Error_Handler();
 8002862:	f000 f8a9 	bl	80029b8 <Error_Handler>
	}
}
 8002866:	bf00      	nop
 8002868:	3750      	adds	r7, #80	@ 0x50
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a44      	ldr	r2, [pc, #272]	@ (8002998 <HAL_ADC_ConvCpltCallback+0x120>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d17e      	bne.n	8002988 <HAL_ADC_ConvCpltCallback+0x110>
		for (int i = 0; i < 8; i++) {
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e074      	b.n	800297a <HAL_ADC_ConvCpltCallback+0x102>
			if (i % 2)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01d      	beq.n	80028d6 <HAL_ADC_ConvCpltCallback+0x5e>
				pt_data[i] = (float) ((3.3f)
						* ((pt_adc_buff[i / 2] & 0x0FFF0000) >> 16) / 4096);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	0fda      	lsrs	r2, r3, #31
 800289e:	4413      	add	r3, r2
 80028a0:	105b      	asrs	r3, r3, #1
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b3d      	ldr	r3, [pc, #244]	@ (800299c <HAL_ADC_ConvCpltCallback+0x124>)
 80028a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b8:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80029a0 <HAL_ADC_ConvCpltCallback+0x128>
 80028bc:	ee27 7a87 	vmul.f32	s14, s15, s14
				pt_data[i] = (float) ((3.3f)
 80028c0:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80029a4 <HAL_ADC_ConvCpltCallback+0x12c>
 80028c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c8:	4a37      	ldr	r2, [pc, #220]	@ (80029a8 <HAL_ADC_ConvCpltCallback+0x130>)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	edc3 7a00 	vstr	s15, [r3]
 80028d4:	e01b      	b.n	800290e <HAL_ADC_ConvCpltCallback+0x96>
			else
				pt_data[i] = (float) ((3.3f) * (pt_adc_buff[i / 2] & 0x00000FFF)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	0fda      	lsrs	r2, r3, #31
 80028da:	4413      	add	r3, r2
 80028dc:	105b      	asrs	r3, r3, #1
 80028de:	461a      	mov	r2, r3
 80028e0:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_ADC_ConvCpltCallback+0x124>)
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80029a0 <HAL_ADC_ConvCpltCallback+0x128>
 80028f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028fa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80029a4 <HAL_ADC_ConvCpltCallback+0x12c>
 80028fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002902:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <HAL_ADC_ConvCpltCallback+0x130>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	edc3 7a00 	vstr	s15, [r3]
						/ 4096);

			pt_data[i] = pt_data[i] - 0.6;
 800290e:	4a26      	ldr	r2, [pc, #152]	@ (80029a8 <HAL_ADC_ConvCpltCallback+0x130>)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fdd9 	bl	80004d0 <__aeabi_f2d>
 800291e:	a31c      	add	r3, pc, #112	@ (adr r3, 8002990 <HAL_ADC_ConvCpltCallback+0x118>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fd fc74 	bl	8000210 <__aeabi_dsub>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f7fd fe26 	bl	8000580 <__aeabi_d2f>
 8002934:	4602      	mov	r2, r0
 8002936:	491c      	ldr	r1, [pc, #112]	@ (80029a8 <HAL_ADC_ConvCpltCallback+0x130>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	601a      	str	r2, [r3, #0]
			pt_data[i] *= (float) (pt_maxes[i] / (2.4f));
 8002940:	4a19      	ldr	r2, [pc, #100]	@ (80029a8 <HAL_ADC_ConvCpltCallback+0x130>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	ed93 7a00 	vldr	s14, [r3]
 800294c:	4a17      	ldr	r2, [pc, #92]	@ (80029ac <HAL_ADC_ConvCpltCallback+0x134>)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800295c:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80029b0 <HAL_ADC_ConvCpltCallback+0x138>
 8002960:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002968:	4a0f      	ldr	r2, [pc, #60]	@ (80029a8 <HAL_ADC_ConvCpltCallback+0x130>)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 8; i++) {
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3301      	adds	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b07      	cmp	r3, #7
 800297e:	dd87      	ble.n	8002890 <HAL_ADC_ConvCpltCallback+0x18>
		}
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8002980:	2108      	movs	r1, #8
 8002982:	480c      	ldr	r0, [pc, #48]	@ (80029b4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8002984:	f003 fc0d 	bl	80061a2 <HAL_GPIO_TogglePin>
	}
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	33333333 	.word	0x33333333
 8002994:	3fe33333 	.word	0x3fe33333
 8002998:	40012000 	.word	0x40012000
 800299c:	200002a0 	.word	0x200002a0
 80029a0:	40533333 	.word	0x40533333
 80029a4:	45800000 	.word	0x45800000
 80029a8:	200002bc 	.word	0x200002bc
 80029ac:	20000000 	.word	0x20000000
 80029b0:	4019999a 	.word	0x4019999a
 80029b4:	40020c00 	.word	0x40020c00

080029b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029bc:	b672      	cpsid	i
}
 80029be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <Error_Handler+0x8>

080029c4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80029c8:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029ca:	4a13      	ldr	r2, [pc, #76]	@ (8002a18 <MX_QUADSPI_Init+0x54>)
 80029cc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029d0:	22ff      	movs	r2, #255	@ 0xff
 80029d2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80029da:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80029ec:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80029f2:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029f4:	2280      	movs	r2, #128	@ 0x80
 80029f6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80029fe:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <MX_QUADSPI_Init+0x50>)
 8002a00:	f003 fd2e 	bl	8006460 <HAL_QSPI_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002a0a:	f7ff ffd5 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000324 	.word	0x20000324
 8002a18:	a0001000 	.word	0xa0001000

08002a1c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	@ 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a38      	ldr	r2, [pc, #224]	@ (8002b1c <HAL_QSPI_MspInit+0x100>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d169      	bne.n	8002b12 <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	4b37      	ldr	r3, [pc, #220]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a46:	4a36      	ldr	r2, [pc, #216]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a4e:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	4b30      	ldr	r3, [pc, #192]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	4a2f      	ldr	r2, [pc, #188]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a28      	ldr	r2, [pc, #160]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a80:	f043 0310 	orr.w	r3, r3, #16
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b26      	ldr	r3, [pc, #152]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b22      	ldr	r3, [pc, #136]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a21      	ldr	r2, [pc, #132]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <HAL_QSPI_MspInit+0x104>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002abe:	2309      	movs	r3, #9
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4816      	ldr	r0, [pc, #88]	@ (8002b24 <HAL_QSPI_MspInit+0x108>)
 8002aca:	f003 f9bd 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002ace:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480f      	ldr	r0, [pc, #60]	@ (8002b28 <HAL_QSPI_MspInit+0x10c>)
 8002aec:	f003 f9ac 	bl	8005e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002af0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002b02:	2309      	movs	r3, #9
 8002b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4807      	ldr	r0, [pc, #28]	@ (8002b2c <HAL_QSPI_MspInit+0x110>)
 8002b0e:	f003 f99b 	bl	8005e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002b12:	bf00      	nop
 8002b14:	3730      	adds	r7, #48	@ 0x30
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	a0001000 	.word	0xa0001000
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40020800 	.word	0x40020800

08002b30 <MX_SAI2_Init>:

SAI_HandleTypeDef hsai_BlockA2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b36:	4a13      	ldr	r2, [pc, #76]	@ (8002b84 <MX_SAI2_Init+0x54>)
 8002b38:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b5a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002b5e:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002b60:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002b6c:	4804      	ldr	r0, [pc, #16]	@ (8002b80 <MX_SAI2_Init+0x50>)
 8002b6e:	f004 fffb 	bl	8007b68 <HAL_SAI_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 8002b78:	f7ff ff1e 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000370 	.word	0x20000370
 8002b84:	40015c04 	.word	0x40015c04

08002b88 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b0a0      	sub	sp, #128	@ 0x80
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	225c      	movs	r2, #92	@ 0x5c
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f006 fda9 	bl	80096f0 <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <HAL_SAI_MspInit+0xa8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d13f      	bne.n	8002c28 <HAL_SAI_MspInit+0xa0>
    {
    /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 8002bac:	2310      	movs	r3, #16
 8002bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002bb0:	23c0      	movs	r3, #192	@ 0xc0
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc4:	f107 0310 	add.w	r3, r7, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fe11 	bl	80067f0 <HAL_RCCEx_PeriphCLKConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_SAI_MspInit+0x50>
    {
      Error_Handler();
 8002bd4:	f7ff fef0 	bl	80029b8 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002bd8:	4b16      	ldr	r3, [pc, #88]	@ (8002c34 <HAL_SAI_MspInit+0xac>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10d      	bne.n	8002bfc <HAL_SAI_MspInit+0x74>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_SAI_MspInit+0xb0>)
 8002be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be8:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <HAL_SAI_MspInit+0xb0>)
 8002bea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bee:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <HAL_SAI_MspInit+0xb0>)
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <HAL_SAI_MspInit+0xac>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a0c      	ldr	r2, [pc, #48]	@ (8002c34 <HAL_SAI_MspInit+0xac>)
 8002c04:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	2300      	movs	r3, #0
 8002c16:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002c18:	230a      	movs	r3, #10
 8002c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c20:	4619      	mov	r1, r3
 8002c22:	4806      	ldr	r0, [pc, #24]	@ (8002c3c <HAL_SAI_MspInit+0xb4>)
 8002c24:	f003 f910 	bl	8005e48 <HAL_GPIO_Init>

    }
}
 8002c28:	bf00      	nop
 8002c2a:	3780      	adds	r7, #128	@ 0x80
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40015c04 	.word	0x40015c04
 8002c34:	200003f8 	.word	0x200003f8
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40020c00 	.word	0x40020c00

08002c40 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c46:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <MX_SPI1_Init+0x68>)
 8002c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c52:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002c72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c74:	2220      	movs	r2, #32
 8002c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c8c:	220a      	movs	r2, #10
 8002c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c90:	4804      	ldr	r0, [pc, #16]	@ (8002ca4 <MX_SPI1_Init+0x64>)
 8002c92:	f005 f92f 	bl	8007ef4 <HAL_SPI_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c9c:	f7ff fe8c 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200003fc 	.word	0x200003fc
 8002ca8:	40013000 	.word	0x40013000

08002cac <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002cb0:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cb2:	4a18      	ldr	r2, [pc, #96]	@ (8002d14 <MX_SPI2_Init+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cb6:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc4:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002cca:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002ccc:	2202      	movs	r2, #2
 8002cce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cdc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002cde:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf0:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cf8:	220a      	movs	r2, #10
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cfc:	4804      	ldr	r0, [pc, #16]	@ (8002d10 <MX_SPI2_Init+0x64>)
 8002cfe:	f005 f8f9 	bl	8007ef4 <HAL_SPI_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d08:	f7ff fe56 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000454 	.word	0x20000454
 8002d14:	40003800 	.word	0x40003800

08002d18 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002d1c:	4b17      	ldr	r3, [pc, #92]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d1e:	4a18      	ldr	r2, [pc, #96]	@ (8002d80 <MX_SPI4_Init+0x68>)
 8002d20:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002d22:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d28:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002d2a:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d30:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d36:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d48:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d50:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d56:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002d62:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d64:	220a      	movs	r2, #10
 8002d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002d68:	4804      	ldr	r0, [pc, #16]	@ (8002d7c <MX_SPI4_Init+0x64>)
 8002d6a:	f005 f8c3 	bl	8007ef4 <HAL_SPI_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002d74:	f7ff fe20 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200004ac 	.word	0x200004ac
 8002d80:	40013400 	.word	0x40013400

08002d84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08e      	sub	sp, #56	@ 0x38
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a95      	ldr	r2, [pc, #596]	@ (8002ff8 <HAL_SPI_MspInit+0x274>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	f040 8089 	bne.w	8002eba <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002da8:	2300      	movs	r3, #0
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	4b93      	ldr	r3, [pc, #588]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	4a92      	ldr	r2, [pc, #584]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002db2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002db6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db8:	4b90      	ldr	r3, [pc, #576]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc0:	623b      	str	r3, [r7, #32]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	4a8b      	ldr	r2, [pc, #556]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd4:	4b89      	ldr	r3, [pc, #548]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002de0:	2338      	movs	r3, #56	@ 0x38
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002df0:	2305      	movs	r3, #5
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4881      	ldr	r0, [pc, #516]	@ (8003000 <HAL_SPI_MspInit+0x27c>)
 8002dfc:	f003 f824 	bl	8005e48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002e00:	4b80      	ldr	r3, [pc, #512]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e02:	4a81      	ldr	r2, [pc, #516]	@ (8003008 <HAL_SPI_MspInit+0x284>)
 8002e04:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002e06:	4b7f      	ldr	r3, [pc, #508]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e08:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002e0c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e14:	4b7b      	ldr	r3, [pc, #492]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e20:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e22:	4b78      	ldr	r3, [pc, #480]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e28:	4b76      	ldr	r3, [pc, #472]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002e2e:	4b75      	ldr	r3, [pc, #468]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e34:	4b73      	ldr	r3, [pc, #460]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3a:	4b72      	ldr	r3, [pc, #456]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002e40:	4870      	ldr	r0, [pc, #448]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e42:	f002 fbab 	bl	800559c <HAL_DMA_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002e4c:	f7ff fdb4 	bl	80029b8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a6c      	ldr	r2, [pc, #432]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e54:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002e56:	4a6b      	ldr	r2, [pc, #428]	@ (8003004 <HAL_SPI_MspInit+0x280>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8002e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003010 <HAL_SPI_MspInit+0x28c>)
 8002e60:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002e62:	4b6a      	ldr	r3, [pc, #424]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e64:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002e68:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e6a:	4b68      	ldr	r3, [pc, #416]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e6c:	2240      	movs	r2, #64	@ 0x40
 8002e6e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e70:	4b66      	ldr	r3, [pc, #408]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e76:	4b65      	ldr	r3, [pc, #404]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e7c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7e:	4b63      	ldr	r3, [pc, #396]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e84:	4b61      	ldr	r3, [pc, #388]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002e8a:	4b60      	ldr	r3, [pc, #384]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e90:	4b5e      	ldr	r3, [pc, #376]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e96:	4b5d      	ldr	r3, [pc, #372]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e9c:	485b      	ldr	r0, [pc, #364]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002e9e:	f002 fb7d 	bl	800559c <HAL_DMA_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002ea8:	f7ff fd86 	bl	80029b8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a57      	ldr	r2, [pc, #348]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002eb0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002eb2:	4a56      	ldr	r2, [pc, #344]	@ (800300c <HAL_SPI_MspInit+0x288>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002eb8:	e0e8      	b.n	800308c <HAL_SPI_MspInit+0x308>
  else if(spiHandle->Instance==SPI2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a55      	ldr	r2, [pc, #340]	@ (8003014 <HAL_SPI_MspInit+0x290>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f040 80b1 	bne.w	8003028 <HAL_SPI_MspInit+0x2a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	4b4c      	ldr	r3, [pc, #304]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	4a4b      	ldr	r2, [pc, #300]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed6:	4b49      	ldr	r3, [pc, #292]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	4b45      	ldr	r3, [pc, #276]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	4a44      	ldr	r2, [pc, #272]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef2:	4b42      	ldr	r3, [pc, #264]	@ (8002ffc <HAL_SPI_MspInit+0x278>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002efe:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2302      	movs	r3, #2
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f10:	2305      	movs	r3, #5
 8002f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4839      	ldr	r0, [pc, #228]	@ (8003000 <HAL_SPI_MspInit+0x27c>)
 8002f1c:	f002 ff94 	bl	8005e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f32:	2305      	movs	r3, #5
 8002f34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4830      	ldr	r0, [pc, #192]	@ (8003000 <HAL_SPI_MspInit+0x27c>)
 8002f3e:	f002 ff83 	bl	8005e48 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002f42:	4b35      	ldr	r3, [pc, #212]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f44:	4a35      	ldr	r2, [pc, #212]	@ (800301c <HAL_SPI_MspInit+0x298>)
 8002f46:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002f48:	4b33      	ldr	r3, [pc, #204]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f4e:	4b32      	ldr	r3, [pc, #200]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f54:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f60:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f62:	4b2d      	ldr	r3, [pc, #180]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f74:	4b28      	ldr	r3, [pc, #160]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f7a:	4b27      	ldr	r3, [pc, #156]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002f80:	4825      	ldr	r0, [pc, #148]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f82:	f002 fb0b 	bl	800559c <HAL_DMA_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_SPI_MspInit+0x20c>
      Error_Handler();
 8002f8c:	f7ff fd14 	bl	80029b8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a21      	ldr	r2, [pc, #132]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f94:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f96:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <HAL_SPI_MspInit+0x294>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002f9c:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002f9e:	4a21      	ldr	r2, [pc, #132]	@ (8003024 <HAL_SPI_MspInit+0x2a0>)
 8002fa0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002faa:	2240      	movs	r2, #64	@ 0x40
 8002fac:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fae:	4b1c      	ldr	r3, [pc, #112]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fba:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fbc:	4b18      	ldr	r3, [pc, #96]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc2:	4b17      	ldr	r3, [pc, #92]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002fc8:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fce:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fd4:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002fda:	4811      	ldr	r0, [pc, #68]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fdc:	f002 fade 	bl	800559c <HAL_DMA_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_SPI_MspInit+0x266>
      Error_Handler();
 8002fe6:	f7ff fce7 	bl	80029b8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a0c      	ldr	r2, [pc, #48]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002fee:	649a      	str	r2, [r3, #72]	@ 0x48
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8003020 <HAL_SPI_MspInit+0x29c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ff6:	e049      	b.n	800308c <HAL_SPI_MspInit+0x308>
 8002ff8:	40013000 	.word	0x40013000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020400 	.word	0x40020400
 8003004:	20000504 	.word	0x20000504
 8003008:	40026440 	.word	0x40026440
 800300c:	20000564 	.word	0x20000564
 8003010:	40026488 	.word	0x40026488
 8003014:	40003800 	.word	0x40003800
 8003018:	200005c4 	.word	0x200005c4
 800301c:	40026058 	.word	0x40026058
 8003020:	20000624 	.word	0x20000624
 8003024:	40026070 	.word	0x40026070
  else if(spiHandle->Instance==SPI4)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a19      	ldr	r2, [pc, #100]	@ (8003094 <HAL_SPI_MspInit+0x310>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d12c      	bne.n	800308c <HAL_SPI_MspInit+0x308>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <HAL_SPI_MspInit+0x314>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <HAL_SPI_MspInit+0x314>)
 800303c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003040:	6453      	str	r3, [r2, #68]	@ 0x44
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_SPI_MspInit+0x314>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_SPI_MspInit+0x314>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	4a10      	ldr	r2, [pc, #64]	@ (8003098 <HAL_SPI_MspInit+0x314>)
 8003058:	f043 0310 	orr.w	r3, r3, #16
 800305c:	6313      	str	r3, [r2, #48]	@ 0x30
 800305e:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <HAL_SPI_MspInit+0x314>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 800306a:	f246 0304 	movw	r3, #24580	@ 0x6004
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003078:	2303      	movs	r3, #3
 800307a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800307c:	2305      	movs	r3, #5
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003084:	4619      	mov	r1, r3
 8003086:	4805      	ldr	r0, [pc, #20]	@ (800309c <HAL_SPI_MspInit+0x318>)
 8003088:	f002 fede 	bl	8005e48 <HAL_GPIO_Init>
}
 800308c:	bf00      	nop
 800308e:	3738      	adds	r7, #56	@ 0x38
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40013400 	.word	0x40013400
 8003098:	40023800 	.word	0x40023800
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <HAL_MspInit+0x4c>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	4a0f      	ldr	r2, [pc, #60]	@ (80030ec <HAL_MspInit+0x4c>)
 80030b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <HAL_MspInit+0x4c>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_MspInit+0x4c>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	4a08      	ldr	r2, [pc, #32]	@ (80030ec <HAL_MspInit+0x4c>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030d2:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <HAL_MspInit+0x4c>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <NMI_Handler+0x4>

080030f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <HardFault_Handler+0x4>

08003100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <MemManage_Handler+0x4>

08003108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <BusFault_Handler+0x4>

08003110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <UsageFault_Handler+0x4>

08003118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003146:	f000 fad7 	bl	80036f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003154:	4802      	ldr	r0, [pc, #8]	@ (8003160 <DMA1_Stream3_IRQHandler+0x10>)
 8003156:	f002 fb27 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	200005c4 	.word	0x200005c4

08003164 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003168:	4802      	ldr	r0, [pc, #8]	@ (8003174 <DMA1_Stream4_IRQHandler+0x10>)
 800316a:	f002 fb1d 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000624 	.word	0x20000624

08003178 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800317c:	4802      	ldr	r0, [pc, #8]	@ (8003188 <DMA1_Stream6_IRQHandler+0x10>)
 800317e:	f002 fb13 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000714 	.word	0x20000714

0800318c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003190:	4805      	ldr	r0, [pc, #20]	@ (80031a8 <ADC_IRQHandler+0x1c>)
 8003192:	f000 fce9 	bl	8003b68 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003196:	4805      	ldr	r0, [pc, #20]	@ (80031ac <ADC_IRQHandler+0x20>)
 8003198:	f000 fce6 	bl	8003b68 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800319c:	4804      	ldr	r0, [pc, #16]	@ (80031b0 <ADC_IRQHandler+0x24>)
 800319e:	f000 fce3 	bl	8003b68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000038 	.word	0x20000038
 80031ac:	20000080 	.word	0x20000080
 80031b0:	200000c8 	.word	0x200000c8

080031b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80031b8:	4802      	ldr	r0, [pc, #8]	@ (80031c4 <CAN1_RX0_IRQHandler+0x10>)
 80031ba:	f001 feae 	bl	8004f1a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200001d0 	.word	0x200001d0

080031c8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80031cc:	4802      	ldr	r0, [pc, #8]	@ (80031d8 <DMA1_Stream7_IRQHandler+0x10>)
 80031ce:	f002 faeb 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000774 	.word	0x20000774

080031dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031e0:	4802      	ldr	r0, [pc, #8]	@ (80031ec <DMA2_Stream0_IRQHandler+0x10>)
 80031e2:	f002 fae1 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000110 	.word	0x20000110

080031f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80031f4:	4802      	ldr	r0, [pc, #8]	@ (8003200 <DMA2_Stream1_IRQHandler+0x10>)
 80031f6:	f002 fad7 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000170 	.word	0x20000170

08003204 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003208:	4802      	ldr	r0, [pc, #8]	@ (8003214 <DMA2_Stream2_IRQHandler+0x10>)
 800320a:	f002 facd 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000504 	.word	0x20000504

08003218 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800321c:	4802      	ldr	r0, [pc, #8]	@ (8003228 <DMA2_Stream5_IRQHandler+0x10>)
 800321e:	f002 fac3 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000564 	.word	0x20000564

0800322c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <SystemInit+0x20>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	4a05      	ldr	r2, [pc, #20]	@ (800324c <SystemInit+0x20>)
 8003238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800323c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim4_up;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08e      	sub	sp, #56	@ 0x38
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003264:	f107 0320 	add.w	r3, r7, #32
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
 800327c:	615a      	str	r2, [r3, #20]
 800327e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003280:	4b2f      	ldr	r3, [pc, #188]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003282:	4a30      	ldr	r2, [pc, #192]	@ (8003344 <MX_TIM3_Init+0xf4>)
 8003284:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1312;
 8003286:	4b2e      	ldr	r3, [pc, #184]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003288:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800328c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328e:	4b2c      	ldr	r3, [pc, #176]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8003294:	4b2a      	ldr	r3, [pc, #168]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003296:	22ff      	movs	r2, #255	@ 0xff
 8003298:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329a:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <MX_TIM3_Init+0xf0>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a0:	4b27      	ldr	r3, [pc, #156]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032a6:	4826      	ldr	r0, [pc, #152]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032a8:	f005 fa7c 	bl	80087a4 <HAL_TIM_Base_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80032b2:	f7ff fb81 	bl	80029b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032c0:	4619      	mov	r1, r3
 80032c2:	481f      	ldr	r0, [pc, #124]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032c4:	f005 fdb4 	bl	8008e30 <HAL_TIM_ConfigClockSource>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80032ce:	f7ff fb73 	bl	80029b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80032d2:	481b      	ldr	r0, [pc, #108]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032d4:	f005 fb1e 	bl	8008914 <HAL_TIM_OC_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80032de:	f7ff fb6b 	bl	80029b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80032e2:	2320      	movs	r3, #32
 80032e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032ea:	f107 0320 	add.w	r3, r7, #32
 80032ee:	4619      	mov	r1, r3
 80032f0:	4813      	ldr	r0, [pc, #76]	@ (8003340 <MX_TIM3_Init+0xf0>)
 80032f2:	f006 f981 	bl	80095f8 <HAL_TIMEx_MasterConfigSynchronization>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80032fc:	f7ff fb5c 	bl	80029b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003300:	2300      	movs	r3, #0
 8003302:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	2200      	movs	r2, #0
 8003314:	4619      	mov	r1, r3
 8003316:	480a      	ldr	r0, [pc, #40]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003318:	f005 fc6c 	bl	8008bf4 <HAL_TIM_OC_ConfigChannel>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003322:	f7ff fb49 	bl	80029b8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <MX_TIM3_Init+0xf0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	4b04      	ldr	r3, [pc, #16]	@ (8003340 <MX_TIM3_Init+0xf0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0208 	orr.w	r2, r2, #8
 8003334:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	3738      	adds	r7, #56	@ 0x38
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000684 	.word	0x20000684
 8003344:	40000400 	.word	0x40000400

08003348 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800334e:	f107 0320 	add.w	r3, r7, #32
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	615a      	str	r2, [r3, #20]
 8003368:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800336a:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <MX_TIM4_Init+0xe8>)
 800336c:	4a31      	ldr	r2, [pc, #196]	@ (8003434 <MX_TIM4_Init+0xec>)
 800336e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 466-1;
 8003370:	4b2f      	ldr	r3, [pc, #188]	@ (8003430 <MX_TIM4_Init+0xe8>)
 8003372:	f240 12d1 	movw	r2, #465	@ 0x1d1
 8003376:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003378:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <MX_TIM4_Init+0xe8>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600-1;
 800337e:	4b2c      	ldr	r3, [pc, #176]	@ (8003430 <MX_TIM4_Init+0xe8>)
 8003380:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8003384:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003386:	4b2a      	ldr	r3, [pc, #168]	@ (8003430 <MX_TIM4_Init+0xe8>)
 8003388:	2200      	movs	r2, #0
 800338a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800338c:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <MX_TIM4_Init+0xe8>)
 800338e:	2280      	movs	r2, #128	@ 0x80
 8003390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003392:	4827      	ldr	r0, [pc, #156]	@ (8003430 <MX_TIM4_Init+0xe8>)
 8003394:	f005 fb17 	bl	80089c6 <HAL_TIM_PWM_Init>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800339e:	f7ff fb0b 	bl	80029b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033aa:	f107 0320 	add.w	r3, r7, #32
 80033ae:	4619      	mov	r1, r3
 80033b0:	481f      	ldr	r0, [pc, #124]	@ (8003430 <MX_TIM4_Init+0xe8>)
 80033b2:	f006 f921 	bl	80095f8 <HAL_TIMEx_MasterConfigSynchronization>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80033bc:	f7ff fafc 	bl	80029b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033c0:	2360      	movs	r3, #96	@ 0x60
 80033c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 290;
 80033c4:	f44f 7391 	mov.w	r3, #290	@ 0x122
 80033c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	2204      	movs	r2, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4815      	ldr	r0, [pc, #84]	@ (8003430 <MX_TIM4_Init+0xe8>)
 80033da:	f005 fc67 	bl	8008cac <HAL_TIM_PWM_ConfigChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80033e4:	f7ff fae8 	bl	80029b8 <Error_Handler>
  }
  sConfigOC.Pulse = 270;
 80033e8:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 80033ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	2208      	movs	r2, #8
 80033f2:	4619      	mov	r1, r3
 80033f4:	480e      	ldr	r0, [pc, #56]	@ (8003430 <MX_TIM4_Init+0xe8>)
 80033f6:	f005 fc59 	bl	8008cac <HAL_TIM_PWM_ConfigChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM4_Init+0xbc>
  {
    Error_Handler();
 8003400:	f7ff fada 	bl	80029b8 <Error_Handler>
  }
  sConfigOC.Pulse = 280;
 8003404:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8003408:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	220c      	movs	r2, #12
 800340e:	4619      	mov	r1, r3
 8003410:	4807      	ldr	r0, [pc, #28]	@ (8003430 <MX_TIM4_Init+0xe8>)
 8003412:	f005 fc4b 	bl	8008cac <HAL_TIM_PWM_ConfigChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800341c:	f7ff facc 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003420:	4803      	ldr	r0, [pc, #12]	@ (8003430 <MX_TIM4_Init+0xe8>)
 8003422:	f000 f8b3 	bl	800358c <HAL_TIM_MspPostInit>

}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	@ 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200006cc 	.word	0x200006cc
 8003434:	40000800 	.word	0x40000800

08003438 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0b      	ldr	r2, [pc, #44]	@ (8003474 <HAL_TIM_Base_MspInit+0x3c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10d      	bne.n	8003466 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_TIM_Base_MspInit+0x40>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_TIM_Base_MspInit+0x40>)
 8003454:	f043 0302 	orr.w	r3, r3, #2
 8003458:	6413      	str	r3, [r2, #64]	@ 0x40
 800345a:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <HAL_TIM_Base_MspInit+0x40>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40000400 	.word	0x40000400
 8003478:	40023800 	.word	0x40023800

0800347c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a3a      	ldr	r2, [pc, #232]	@ (8003574 <HAL_TIM_PWM_MspInit+0xf8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d16d      	bne.n	800356a <HAL_TIM_PWM_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_TIM_PWM_MspInit+0xfc>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	4a38      	ldr	r2, [pc, #224]	@ (8003578 <HAL_TIM_PWM_MspInit+0xfc>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6413      	str	r3, [r2, #64]	@ 0x40
 800349e:	4b36      	ldr	r3, [pc, #216]	@ (8003578 <HAL_TIM_PWM_MspInit+0xfc>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_UP Init */
    hdma_tim4_up.Instance = DMA1_Stream6;
 80034aa:	4b34      	ldr	r3, [pc, #208]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034ac:	4a34      	ldr	r2, [pc, #208]	@ (8003580 <HAL_TIM_PWM_MspInit+0x104>)
 80034ae:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 80034b0:	4b32      	ldr	r3, [pc, #200]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80034b6:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b8:	4b30      	ldr	r3, [pc, #192]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80034be:	4b2f      	ldr	r3, [pc, #188]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 80034c4:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ca:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034cc:	4b2b      	ldr	r3, [pc, #172]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034d2:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034d4:	4b29      	ldr	r3, [pc, #164]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034da:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 80034dc:	4b27      	ldr	r3, [pc, #156]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 80034e2:	4b26      	ldr	r3, [pc, #152]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e8:	4b24      	ldr	r3, [pc, #144]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 80034ee:	4823      	ldr	r0, [pc, #140]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 80034f0:	f002 f854 	bl	800559c <HAL_DMA_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80034fa:	f7ff fa5d 	bl	80029b8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1e      	ldr	r2, [pc, #120]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 8003502:	621a      	str	r2, [r3, #32]
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_TIM_PWM_MspInit+0x100>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 800350a:	4b1e      	ldr	r3, [pc, #120]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 800350c:	4a1e      	ldr	r2, [pc, #120]	@ (8003588 <HAL_TIM_PWM_MspInit+0x10c>)
 800350e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8003510:	4b1c      	ldr	r3, [pc, #112]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 8003512:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003516:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003518:	4b1a      	ldr	r3, [pc, #104]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 8003520:	2200      	movs	r2, #0
 8003522:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 8003526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800352a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800352c:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 800352e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003532:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003534:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 8003536:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800353a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800353c:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003542:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 8003544:	2200      	movs	r2, #0
 8003546:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003548:	4b0e      	ldr	r3, [pc, #56]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 800354a:	2200      	movs	r2, #0
 800354c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800354e:	480d      	ldr	r0, [pc, #52]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 8003550:	f002 f824 	bl	800559c <HAL_DMA_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_TIM_PWM_MspInit+0xe2>
    {
      Error_Handler();
 800355a:	f7ff fa2d 	bl	80029b8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a08      	ldr	r2, [pc, #32]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 8003562:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003564:	4a07      	ldr	r2, [pc, #28]	@ (8003584 <HAL_TIM_PWM_MspInit+0x108>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40000800 	.word	0x40000800
 8003578:	40023800 	.word	0x40023800
 800357c:	20000714 	.word	0x20000714
 8003580:	400260a0 	.word	0x400260a0
 8003584:	20000774 	.word	0x20000774
 8003588:	400260b8 	.word	0x400260b8

0800358c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a12      	ldr	r2, [pc, #72]	@ (80035f4 <HAL_TIM_MspPostInit+0x68>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d11e      	bne.n	80035ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <HAL_TIM_MspPostInit+0x6c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	4a10      	ldr	r2, [pc, #64]	@ (80035f8 <HAL_TIM_MspPostInit+0x6c>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035be:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <HAL_TIM_MspPostInit+0x6c>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80035ca:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80035ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2302      	movs	r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035dc:	2302      	movs	r3, #2
 80035de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	4619      	mov	r1, r3
 80035e6:	4805      	ldr	r0, [pc, #20]	@ (80035fc <HAL_TIM_MspPostInit+0x70>)
 80035e8:	f002 fc2e 	bl	8005e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80035ec:	bf00      	nop
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40000800 	.word	0x40000800
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020400 	.word	0x40020400

08003600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003638 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003604:	f7ff fe12 	bl	800322c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003608:	480c      	ldr	r0, [pc, #48]	@ (800363c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800360a:	490d      	ldr	r1, [pc, #52]	@ (8003640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800360c:	4a0d      	ldr	r2, [pc, #52]	@ (8003644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800360e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003610:	e002      	b.n	8003618 <LoopCopyDataInit>

08003612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003616:	3304      	adds	r3, #4

08003618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800361a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800361c:	d3f9      	bcc.n	8003612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003620:	4c0a      	ldr	r4, [pc, #40]	@ (800364c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003624:	e001      	b.n	800362a <LoopFillZerobss>

08003626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003628:	3204      	adds	r2, #4

0800362a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800362a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800362c:	d3fb      	bcc.n	8003626 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800362e:	f006 f867 	bl	8009700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003632:	f7fe feef 	bl	8002414 <main>
  bx  lr    
 8003636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800363c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003640:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003644:	08009b4c 	.word	0x08009b4c
  ldr r2, =_sbss
 8003648:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800364c:	200007d8 	.word	0x200007d8

08003650 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003650:	e7fe      	b.n	8003650 <CAN1_RX1_IRQHandler>
	...

08003654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003658:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <HAL_Init+0x40>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0d      	ldr	r2, [pc, #52]	@ (8003694 <HAL_Init+0x40>)
 800365e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003664:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <HAL_Init+0x40>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0a      	ldr	r2, [pc, #40]	@ (8003694 <HAL_Init+0x40>)
 800366a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800366e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003670:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <HAL_Init+0x40>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <HAL_Init+0x40>)
 8003676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367c:	2003      	movs	r0, #3
 800367e:	f001 ff4b 	bl	8005518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003682:	200f      	movs	r0, #15
 8003684:	f000 f808 	bl	8003698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003688:	f7ff fd0a 	bl	80030a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023c00 	.word	0x40023c00

08003698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036a0:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <HAL_InitTick+0x54>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b12      	ldr	r3, [pc, #72]	@ (80036f0 <HAL_InitTick+0x58>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 ff63 	bl	8005582 <HAL_SYSTICK_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e00e      	b.n	80036e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b0f      	cmp	r3, #15
 80036ca:	d80a      	bhi.n	80036e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036cc:	2200      	movs	r2, #0
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	f001 ff2b 	bl	800552e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d8:	4a06      	ldr	r2, [pc, #24]	@ (80036f4 <HAL_InitTick+0x5c>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000010 	.word	0x20000010
 80036f0:	20000018 	.word	0x20000018
 80036f4:	20000014 	.word	0x20000014

080036f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_IncTick+0x20>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_IncTick+0x24>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4413      	add	r3, r2
 8003708:	4a04      	ldr	r2, [pc, #16]	@ (800371c <HAL_IncTick+0x24>)
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000018 	.word	0x20000018
 800371c:	200007d4 	.word	0x200007d4

08003720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return uwTick;
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <HAL_GetTick+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	200007d4 	.word	0x200007d4

08003738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003740:	f7ff ffee 	bl	8003720 <HAL_GetTick>
 8003744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d005      	beq.n	800375e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <HAL_Delay+0x44>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800375e:	bf00      	nop
 8003760:	f7ff ffde 	bl	8003720 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	429a      	cmp	r2, r3
 800376e:	d8f7      	bhi.n	8003760 <HAL_Delay+0x28>
  {
  }
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000018 	.word	0x20000018

08003780 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e033      	b.n	80037fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe f82e 	bl	8001800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037c6:	f023 0302 	bic.w	r3, r3, #2
 80037ca:	f043 0202 	orr.w	r2, r3, #2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fd38 	bl	8004248 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	f043 0201 	orr.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80037ee:	e001      	b.n	80037f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_ADC_Start+0x1a>
 800381e:	2302      	movs	r3, #2
 8003820:	e0b2      	b.n	8003988 <HAL_ADC_Start+0x180>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d018      	beq.n	800386a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003848:	4b52      	ldr	r3, [pc, #328]	@ (8003994 <HAL_ADC_Start+0x18c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_ADC_Start+0x190>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0c9a      	lsrs	r2, r3, #18
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800385c:	e002      	b.n	8003864 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	3b01      	subs	r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f9      	bne.n	800385e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d17a      	bne.n	800396e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80038a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	d106      	bne.n	80038c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	f023 0206 	bic.w	r2, r3, #6
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80038c4:	e002      	b.n	80038cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038d4:	4b31      	ldr	r3, [pc, #196]	@ (800399c <HAL_ADC_Start+0x194>)
 80038d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80038e0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d12a      	bne.n	8003944 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <HAL_ADC_Start+0x198>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d015      	beq.n	8003924 <HAL_ADC_Start+0x11c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a29      	ldr	r2, [pc, #164]	@ (80039a4 <HAL_ADC_Start+0x19c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d105      	bne.n	800390e <HAL_ADC_Start+0x106>
 8003902:	4b26      	ldr	r3, [pc, #152]	@ (800399c <HAL_ADC_Start+0x194>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a25      	ldr	r2, [pc, #148]	@ (80039a8 <HAL_ADC_Start+0x1a0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d136      	bne.n	8003986 <HAL_ADC_Start+0x17e>
 8003918:	4b20      	ldr	r3, [pc, #128]	@ (800399c <HAL_ADC_Start+0x194>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d130      	bne.n	8003986 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d129      	bne.n	8003986 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	e020      	b.n	8003986 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <HAL_ADC_Start+0x198>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d11b      	bne.n	8003986 <HAL_ADC_Start+0x17e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d114      	bne.n	8003986 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	e00b      	b.n	8003986 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f043 0210 	orr.w	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f043 0201 	orr.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	20000010 	.word	0x20000010
 8003998:	431bde83 	.word	0x431bde83
 800399c:	40012300 	.word	0x40012300
 80039a0:	40012000 	.word	0x40012000
 80039a4:	40012100 	.word	0x40012100
 80039a8:	40012200 	.word	0x40012200

080039ac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_Start_IT+0x1a>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0bd      	b.n	8003b42 <HAL_ADC_Start_IT+0x196>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d018      	beq.n	8003a0e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039ec:	4b58      	ldr	r3, [pc, #352]	@ (8003b50 <HAL_ADC_Start_IT+0x1a4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a58      	ldr	r2, [pc, #352]	@ (8003b54 <HAL_ADC_Start_IT+0x1a8>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0c9a      	lsrs	r2, r3, #18
 80039f8:	4613      	mov	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003a00:	e002      	b.n	8003a08 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f9      	bne.n	8003a02 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f040 8085 	bne.w	8003b28 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a5c:	d106      	bne.n	8003a6c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	f023 0206 	bic.w	r2, r3, #6
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a6a:	e002      	b.n	8003a72 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a7a:	4b37      	ldr	r3, [pc, #220]	@ (8003b58 <HAL_ADC_Start_IT+0x1ac>)
 8003a7c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003a86:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a96:	f043 0320 	orr.w	r3, r3, #32
 8003a9a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d12a      	bne.n	8003afe <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	@ (8003b5c <HAL_ADC_Start_IT+0x1b0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d015      	beq.n	8003ade <HAL_ADC_Start_IT+0x132>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b60 <HAL_ADC_Start_IT+0x1b4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d105      	bne.n	8003ac8 <HAL_ADC_Start_IT+0x11c>
 8003abc:	4b26      	ldr	r3, [pc, #152]	@ (8003b58 <HAL_ADC_Start_IT+0x1ac>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a25      	ldr	r2, [pc, #148]	@ (8003b64 <HAL_ADC_Start_IT+0x1b8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d136      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
 8003ad2:	4b21      	ldr	r3, [pc, #132]	@ (8003b58 <HAL_ADC_Start_IT+0x1ac>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d130      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d129      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e020      	b.n	8003b40 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <HAL_ADC_Start_IT+0x1b0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d11b      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d114      	bne.n	8003b40 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	e00b      	b.n	8003b40 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	f043 0210 	orr.w	r2, r3, #16
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000010 	.word	0x20000010
 8003b54:	431bde83 	.word	0x431bde83
 8003b58:	40012300 	.word	0x40012300
 8003b5c:	40012000 	.word	0x40012000
 8003b60:	40012100 	.word	0x40012100
 8003b64:	40012200 	.word	0x40012200

08003b68 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d049      	beq.n	8003c32 <HAL_ADC_IRQHandler+0xca>
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d046      	beq.n	8003c32 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d105      	bne.n	8003bbc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d12b      	bne.n	8003c22 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d127      	bne.n	8003c22 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d006      	beq.n	8003bee <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d119      	bne.n	8003c22 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0220 	bic.w	r2, r2, #32
 8003bfc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fe28 	bl	8002878 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0212 	mvn.w	r2, #18
 8003c30:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c40:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d057      	beq.n	8003cf8 <HAL_ADC_IRQHandler+0x190>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d054      	beq.n	8003cf8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d139      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d12b      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d124      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11d      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d119      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cc2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fcf7 	bl	80046dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f06f 020c 	mvn.w	r2, #12
 8003cf6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d06:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d017      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x1d6>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d014      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10d      	bne.n	8003d3e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f944 	bl	8003fbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0201 	mvn.w	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d4c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x218>
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d012      	beq.n	8003d80 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	f043 0202 	orr.w	r2, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0220 	mvn.w	r2, #32
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f92d 	bl	8003fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f06f 0220 	mvn.w	r2, #32
 8003d7e:	601a      	str	r2, [r3, #0]
  }
}
 8003d80:	bf00      	nop
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_ADC_Start_DMA+0x1e>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e0e9      	b.n	8003f7a <HAL_ADC_Start_DMA+0x1f2>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d018      	beq.n	8003dee <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dcc:	4b6d      	ldr	r3, [pc, #436]	@ (8003f84 <HAL_ADC_Start_DMA+0x1fc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a6d      	ldr	r2, [pc, #436]	@ (8003f88 <HAL_ADC_Start_DMA+0x200>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	0c9a      	lsrs	r2, r3, #18
 8003dd8:	4613      	mov	r3, r2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	4413      	add	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003de0:	e002      	b.n	8003de8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f9      	bne.n	8003de2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dfc:	d107      	bne.n	8003e0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e0c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 80a1 	bne.w	8003f60 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5c:	d106      	bne.n	8003e6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f023 0206 	bic.w	r2, r3, #6
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e6a:	e002      	b.n	8003e72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e7a:	4b44      	ldr	r3, [pc, #272]	@ (8003f8c <HAL_ADC_Start_DMA+0x204>)
 8003e7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e82:	4a43      	ldr	r2, [pc, #268]	@ (8003f90 <HAL_ADC_Start_DMA+0x208>)
 8003e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8a:	4a42      	ldr	r2, [pc, #264]	@ (8003f94 <HAL_ADC_Start_DMA+0x20c>)
 8003e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	4a41      	ldr	r2, [pc, #260]	@ (8003f98 <HAL_ADC_Start_DMA+0x210>)
 8003e94:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003eae:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ebe:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	334c      	adds	r3, #76	@ 0x4c
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f001 fc12 	bl	80056f8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d12a      	bne.n	8003f36 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f9c <HAL_ADC_Start_DMA+0x214>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d015      	beq.n	8003f16 <HAL_ADC_Start_DMA+0x18e>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa0 <HAL_ADC_Start_DMA+0x218>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d105      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x178>
 8003ef4:	4b25      	ldr	r3, [pc, #148]	@ (8003f8c <HAL_ADC_Start_DMA+0x204>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a27      	ldr	r2, [pc, #156]	@ (8003fa4 <HAL_ADC_Start_DMA+0x21c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d136      	bne.n	8003f78 <HAL_ADC_Start_DMA+0x1f0>
 8003f0a:	4b20      	ldr	r3, [pc, #128]	@ (8003f8c <HAL_ADC_Start_DMA+0x204>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d130      	bne.n	8003f78 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d129      	bne.n	8003f78 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	e020      	b.n	8003f78 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a18      	ldr	r2, [pc, #96]	@ (8003f9c <HAL_ADC_Start_DMA+0x214>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d11b      	bne.n	8003f78 <HAL_ADC_Start_DMA+0x1f0>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d114      	bne.n	8003f78 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	e00b      	b.n	8003f78 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	f043 0210 	orr.w	r2, r3, #16
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000010 	.word	0x20000010
 8003f88:	431bde83 	.word	0x431bde83
 8003f8c:	40012300 	.word	0x40012300
 8003f90:	08004441 	.word	0x08004441
 8003f94:	080044fb 	.word	0x080044fb
 8003f98:	08004517 	.word	0x08004517
 8003f9c:	40012000 	.word	0x40012000
 8003fa0:	40012100 	.word	0x40012100
 8003fa4:	40012200 	.word	0x40012200

08003fa8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x1c>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e113      	b.n	8004228 <HAL_ADC_ConfigChannel+0x244>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b09      	cmp	r3, #9
 800400e:	d925      	bls.n	800405c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	3b1e      	subs	r3, #30
 8004026:	2207      	movs	r2, #7
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43da      	mvns	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	400a      	ands	r2, r1
 8004034:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68d9      	ldr	r1, [r3, #12]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	b29b      	uxth	r3, r3
 8004046:	4618      	mov	r0, r3
 8004048:	4603      	mov	r3, r0
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4403      	add	r3, r0
 800404e:	3b1e      	subs	r3, #30
 8004050:	409a      	lsls	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	e022      	b.n	80040a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6919      	ldr	r1, [r3, #16]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	461a      	mov	r2, r3
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	2207      	movs	r2, #7
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	400a      	ands	r2, r1
 800407e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6919      	ldr	r1, [r3, #16]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	4618      	mov	r0, r3
 8004092:	4603      	mov	r3, r0
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4403      	add	r3, r0
 8004098:	409a      	lsls	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d824      	bhi.n	80040f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	3b05      	subs	r3, #5
 80040bc:	221f      	movs	r2, #31
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	400a      	ands	r2, r1
 80040ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	4618      	mov	r0, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	3b05      	subs	r3, #5
 80040e6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040f2:	e04c      	b.n	800418e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d824      	bhi.n	8004146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	3b23      	subs	r3, #35	@ 0x23
 800410e:	221f      	movs	r2, #31
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43da      	mvns	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	400a      	ands	r2, r1
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	4618      	mov	r0, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	3b23      	subs	r3, #35	@ 0x23
 8004138:	fa00 f203 	lsl.w	r2, r0, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
 8004144:	e023      	b.n	800418e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	3b41      	subs	r3, #65	@ 0x41
 8004158:	221f      	movs	r2, #31
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	400a      	ands	r2, r1
 8004166:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	4618      	mov	r0, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	3b41      	subs	r3, #65	@ 0x41
 8004182:	fa00 f203 	lsl.w	r2, r0, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800418e:	4b29      	ldr	r3, [pc, #164]	@ (8004234 <HAL_ADC_ConfigChannel+0x250>)
 8004190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a28      	ldr	r2, [pc, #160]	@ (8004238 <HAL_ADC_ConfigChannel+0x254>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10f      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x1d8>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b12      	cmp	r3, #18
 80041a2:	d10b      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <HAL_ADC_ConfigChannel+0x254>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d12b      	bne.n	800421e <HAL_ADC_ConfigChannel+0x23a>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1c      	ldr	r2, [pc, #112]	@ (800423c <HAL_ADC_ConfigChannel+0x258>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <HAL_ADC_ConfigChannel+0x1f4>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b11      	cmp	r3, #17
 80041d6:	d122      	bne.n	800421e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a11      	ldr	r2, [pc, #68]	@ (800423c <HAL_ADC_ConfigChannel+0x258>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d111      	bne.n	800421e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041fa:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <HAL_ADC_ConfigChannel+0x25c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <HAL_ADC_ConfigChannel+0x260>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	0c9a      	lsrs	r2, r3, #18
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004210:	e002      	b.n	8004218 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	3b01      	subs	r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f9      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40012300 	.word	0x40012300
 8004238:	40012000 	.word	0x40012000
 800423c:	10000012 	.word	0x10000012
 8004240:	20000010 	.word	0x20000010
 8004244:	431bde83 	.word	0x431bde83

08004248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004250:	4b79      	ldr	r3, [pc, #484]	@ (8004438 <ADC_Init+0x1f0>)
 8004252:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800427c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	021a      	lsls	r2, r3, #8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	4a58      	ldr	r2, [pc, #352]	@ (800443c <ADC_Init+0x1f4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6899      	ldr	r1, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	e00f      	b.n	8004346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004344:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0202 	bic.w	r2, r2, #2
 8004354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6899      	ldr	r1, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7e1b      	ldrb	r3, [r3, #24]
 8004360:	005a      	lsls	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004382:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	3b01      	subs	r3, #1
 80043a0:	035a      	lsls	r2, r3, #13
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	e007      	b.n	80043bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80043ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	051a      	lsls	r2, r3, #20
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043fe:	025a      	lsls	r2, r3, #9
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6899      	ldr	r1, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	029a      	lsls	r2, r3, #10
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40012300 	.word	0x40012300
 800443c:	0f000001 	.word	0x0f000001

08004440 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004456:	2b00      	cmp	r3, #0
 8004458:	d13c      	bne.n	80044d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d12b      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004478:	2b00      	cmp	r3, #0
 800447a:	d127      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d006      	beq.n	8004498 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004494:	2b00      	cmp	r3, #0
 8004496:	d119      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0220 	bic.w	r2, r2, #32
 80044a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7fe f9d3 	bl	8002878 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044d2:	e00e      	b.n	80044f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fd75 	bl	8003fd0 <HAL_ADC_ErrorCallback>
}
 80044e6:	e004      	b.n	80044f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fd4d 	bl	8003fa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2240      	movs	r2, #64	@ 0x40
 8004528:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fd4a 	bl	8003fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored.
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 800455e:	2302      	movs	r3, #2
 8004560:	e0ab      	b.n	80046ba <HAL_ADCEx_MultiModeStart_DMA+0x176>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d018      	beq.n	80045aa <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	609a      	str	r2, [r3, #8]

    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004588:	4b4e      	ldr	r3, [pc, #312]	@ (80046c4 <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a4e      	ldr	r2, [pc, #312]	@ (80046c8 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	0c9a      	lsrs	r2, r3, #18
 8004594:	4613      	mov	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	4413      	add	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800459c:	e002      	b.n	80045a4 <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f9      	bne.n	800459e <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d173      	bne.n	80046a0 <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f6:	d106      	bne.n	8004606 <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fc:	f023 0206 	bic.w	r2, r3, #6
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	645a      	str	r2, [r3, #68]	@ 0x44
 8004604:	e002      	b.n	800460c <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	4a2c      	ldr	r2, [pc, #176]	@ (80046cc <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 800461a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	4a2b      	ldr	r2, [pc, #172]	@ (80046d0 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8004622:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	4a2a      	ldr	r2, [pc, #168]	@ (80046d4 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 800462a:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0202 	mvn.w	r2, #2
 8004634:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004644:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8004648:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	e005      	b.n	800466e <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	605a      	str	r2, [r3, #4]
    }

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3308      	adds	r3, #8
 8004676:	4619      	mov	r1, r3
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f001 f83c 	bl	80056f8 <HAL_DMA_Start_IT>

    /* if no external trigger present enable software conversion of regular channels */
    if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d114      	bne.n	80046b8 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800469c:	609a      	str	r2, [r3, #8]
 800469e:	e00b      	b.n	80046b8 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	f043 0210 	orr.w	r2, r3, #16
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b0:	f043 0201 	orr.w	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000010 	.word	0x20000010
 80046c8:	431bde83 	.word	0x431bde83
 80046cc:	0800477d 	.word	0x0800477d
 80046d0:	08004823 	.word	0x08004823
 80046d4:	0800483f 	.word	0x0800483f
 80046d8:	40012300 	.word	0x40012300

080046dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004704:	2302      	movs	r3, #2
 8004706:	e031      	b.n	800476c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004710:	4b19      	ldr	r3, [pc, #100]	@ (8004778 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004712:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 021f 	bic.w	r2, r3, #31
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	431a      	orrs	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	431a      	orrs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40012300 	.word	0x40012300

0800477c <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004792:	2b00      	cmp	r3, #0
 8004794:	d13c      	bne.n	8004810 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d12b      	bne.n	8004808 <ADC_MultiModeDMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d127      	bne.n	8004808 <ADC_MultiModeDMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d006      	beq.n	80047d4 <ADC_MultiModeDMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d119      	bne.n	8004808 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0220 	bic.w	r2, r2, #32
 80047e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	f043 0201 	orr.w	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7fe f835 	bl	8002878 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800480e:	e004      	b.n	800481a <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff fbb9 	bl	8003fa8 <HAL_ADC_ConvHalfCpltCallback>
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2240      	movs	r2, #64	@ 0x40
 8004850:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	f043 0204 	orr.w	r2, r3, #4
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_ADC_ErrorCallback(hadc);
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7ff fbb6 	bl	8003fd0 <HAL_ADC_ErrorCallback>
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e0ed      	b.n	8004a5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd f9a4 	bl	8001bd8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048a0:	f7fe ff3e 	bl	8003720 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048a6:	e012      	b.n	80048ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048a8:	f7fe ff3a 	bl	8003720 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b0a      	cmp	r3, #10
 80048b4:	d90b      	bls.n	80048ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2205      	movs	r2, #5
 80048c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0c5      	b.n	8004a5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0e5      	beq.n	80048a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0202 	bic.w	r2, r2, #2
 80048ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048ec:	f7fe ff18 	bl	8003720 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80048f2:	e012      	b.n	800491a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048f4:	f7fe ff14 	bl	8003720 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b0a      	cmp	r3, #10
 8004900:	d90b      	bls.n	800491a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2205      	movs	r2, #5
 8004912:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e09f      	b.n	8004a5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7e1b      	ldrb	r3, [r3, #24]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d108      	bne.n	8004942 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e007      	b.n	8004952 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004950:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7e5b      	ldrb	r3, [r3, #25]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d108      	bne.n	800496c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e007      	b.n	800497c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800497a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7e9b      	ldrb	r3, [r3, #26]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d108      	bne.n	8004996 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0220 	orr.w	r2, r2, #32
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e007      	b.n	80049a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0220 	bic.w	r2, r2, #32
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	7edb      	ldrb	r3, [r3, #27]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d108      	bne.n	80049c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0210 	bic.w	r2, r2, #16
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e007      	b.n	80049d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0210 	orr.w	r2, r2, #16
 80049ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	7f1b      	ldrb	r3, [r3, #28]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d108      	bne.n	80049ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0208 	orr.w	r2, r2, #8
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e007      	b.n	80049fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0208 	bic.w	r2, r2, #8
 80049f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	7f5b      	ldrb	r3, [r3, #29]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d108      	bne.n	8004a14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0204 	orr.w	r2, r2, #4
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e007      	b.n	8004a24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0204 	bic.w	r2, r2, #4
 8004a22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	ea42 0103 	orr.w	r1, r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d12e      	bne.n	8004ad4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8e:	f7fe fe47 	bl	8003720 <HAL_GetTick>
 8004a92:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a94:	e012      	b.n	8004abc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a96:	f7fe fe43 	bl	8003720 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b0a      	cmp	r3, #10
 8004aa2:	d90b      	bls.n	8004abc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2205      	movs	r2, #5
 8004ab4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e012      	b.n	8004ae2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e006      	b.n	8004ae2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
  }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b089      	sub	sp, #36	@ 0x24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004afe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b08:	7ffb      	ldrb	r3, [r7, #31]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d003      	beq.n	8004b16 <HAL_CAN_AddTxMessage+0x2c>
 8004b0e:	7ffb      	ldrb	r3, [r7, #31]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	f040 80ad 	bne.w	8004c70 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8095 	beq.w	8004c60 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b40:	2201      	movs	r2, #1
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	409a      	lsls	r2, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10d      	bne.n	8004b6e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	6809      	ldr	r1, [r1, #0]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	3318      	adds	r3, #24
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	440b      	add	r3, r1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e00f      	b.n	8004b8e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004b82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3318      	adds	r3, #24
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	440b      	add	r3, r1
 8004b8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3318      	adds	r3, #24
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	7d1b      	ldrb	r3, [r3, #20]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d111      	bne.n	8004bce <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	6811      	ldr	r1, [r2, #0]
 8004bbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	3318      	adds	r3, #24
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	440b      	add	r3, r1
 8004bca:	3304      	adds	r3, #4
 8004bcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3307      	adds	r3, #7
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	061a      	lsls	r2, r3, #24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3306      	adds	r3, #6
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	041b      	lsls	r3, r3, #16
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3305      	adds	r3, #5
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	4313      	orrs	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	3204      	adds	r2, #4
 8004bee:	7812      	ldrb	r2, [r2, #0]
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	6811      	ldr	r1, [r2, #0]
 8004bf6:	ea43 0200 	orr.w	r2, r3, r0
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	440b      	add	r3, r1
 8004c00:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004c04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3303      	adds	r3, #3
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	061a      	lsls	r2, r3, #24
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3302      	adds	r3, #2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	4313      	orrs	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	4610      	mov	r0, r2
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	6811      	ldr	r1, [r2, #0]
 8004c2c:	ea43 0200 	orr.w	r2, r3, r0
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004c3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	3318      	adds	r3, #24
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	4413      	add	r3, r2
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	6811      	ldr	r1, [r2, #0]
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	3318      	adds	r3, #24
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	440b      	add	r3, r1
 8004c5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e00e      	b.n	8004c7e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e006      	b.n	8004c7e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
  }
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d003      	beq.n	8004cae <HAL_CAN_GetRxMessage+0x24>
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	f040 8103 	bne.w	8004eb4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0f7      	b.n	8004ec2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d107      	bne.n	8004cf0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0e8      	b.n	8004ec2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	331b      	adds	r3, #27
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	4413      	add	r3, r2
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0204 	and.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10c      	bne.n	8004d28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	331b      	adds	r3, #27
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	4413      	add	r3, r2
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	0d5b      	lsrs	r3, r3, #21
 8004d1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e00b      	b.n	8004d40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	331b      	adds	r3, #27
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	4413      	add	r3, r2
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	08db      	lsrs	r3, r3, #3
 8004d38:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	331b      	adds	r3, #27
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	4413      	add	r3, r2
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0202 	and.w	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	331b      	adds	r3, #27
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	4413      	add	r3, r2
 8004d62:	3304      	adds	r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2208      	movs	r2, #8
 8004d72:	611a      	str	r2, [r3, #16]
 8004d74:	e00b      	b.n	8004d8e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	331b      	adds	r3, #27
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	4413      	add	r3, r2
 8004d82:	3304      	adds	r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 020f 	and.w	r2, r3, #15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	331b      	adds	r3, #27
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	4413      	add	r3, r2
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	331b      	adds	r3, #27
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	4413      	add	r3, r2
 8004db2:	3304      	adds	r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	0a1a      	lsrs	r2, r3, #8
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	0c1a      	lsrs	r2, r3, #16
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	3302      	adds	r3, #2
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0e1a      	lsrs	r2, r3, #24
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	3303      	adds	r3, #3
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	3304      	adds	r3, #4
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	0a1a      	lsrs	r2, r3, #8
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	3305      	adds	r3, #5
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	0c1a      	lsrs	r2, r3, #16
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	3306      	adds	r3, #6
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	0e1a      	lsrs	r2, r3, #24
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	3307      	adds	r3, #7
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0220 	orr.w	r2, r2, #32
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e007      	b.n	8004eb0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0220 	orr.w	r2, r2, #32
 8004eae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e006      	b.n	8004ec2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ede:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d002      	beq.n	8004eec <HAL_CAN_ActivateNotification+0x1e>
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d109      	bne.n	8004f00 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6959      	ldr	r1, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e006      	b.n	8004f0e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b08a      	sub	sp, #40	@ 0x28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d07c      	beq.n	800505a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d023      	beq.n	8004fb2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f983 	bl	8005288 <HAL_CAN_TxMailbox0CompleteCallback>
 8004f82:	e016      	b.n	8004fb2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f96:	e00c      	b.n	8004fb2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004faa:	e002      	b.n	8004fb2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f989 	bl	80052c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d024      	beq.n	8005006 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f963 	bl	800529c <HAL_CAN_TxMailbox1CompleteCallback>
 8004fd6:	e016      	b.n	8005006 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fea:	e00c      	b.n	8005006 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d004      	beq.n	8005000 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ffe:	e002      	b.n	8005006 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f969 	bl	80052d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d024      	beq.n	800505a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005018:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f943 	bl	80052b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800502a:	e016      	b.n	800505a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800503c:	627b      	str	r3, [r7, #36]	@ 0x24
 800503e:	e00c      	b.n	800505a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
 8005052:	e002      	b.n	800505a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f949 	bl	80052ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00c      	beq.n	800507e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2210      	movs	r2, #16
 800507c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d006      	beq.n	80050a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2208      	movs	r2, #8
 8005098:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f930 	bl	8005300 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7fd f919 	bl	80022f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2210      	movs	r2, #16
 80050e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2208      	movs	r2, #8
 80050fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f912 	bl	8005328 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f8f9 	bl	8005314 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00b      	beq.n	8005144 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8fc 	bl	800533c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2208      	movs	r2, #8
 800515e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8f5 	bl	8005350 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d07b      	beq.n	8005268 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d072      	beq.n	8005260 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	f043 0302 	orr.w	r3, r3, #2
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	f043 0304 	orr.w	r3, r3, #4
 80051cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d043      	beq.n	8005260 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d03e      	beq.n	8005260 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051e8:	2b60      	cmp	r3, #96	@ 0x60
 80051ea:	d02b      	beq.n	8005244 <HAL_CAN_IRQHandler+0x32a>
 80051ec:	2b60      	cmp	r3, #96	@ 0x60
 80051ee:	d82e      	bhi.n	800524e <HAL_CAN_IRQHandler+0x334>
 80051f0:	2b50      	cmp	r3, #80	@ 0x50
 80051f2:	d022      	beq.n	800523a <HAL_CAN_IRQHandler+0x320>
 80051f4:	2b50      	cmp	r3, #80	@ 0x50
 80051f6:	d82a      	bhi.n	800524e <HAL_CAN_IRQHandler+0x334>
 80051f8:	2b40      	cmp	r3, #64	@ 0x40
 80051fa:	d019      	beq.n	8005230 <HAL_CAN_IRQHandler+0x316>
 80051fc:	2b40      	cmp	r3, #64	@ 0x40
 80051fe:	d826      	bhi.n	800524e <HAL_CAN_IRQHandler+0x334>
 8005200:	2b30      	cmp	r3, #48	@ 0x30
 8005202:	d010      	beq.n	8005226 <HAL_CAN_IRQHandler+0x30c>
 8005204:	2b30      	cmp	r3, #48	@ 0x30
 8005206:	d822      	bhi.n	800524e <HAL_CAN_IRQHandler+0x334>
 8005208:	2b10      	cmp	r3, #16
 800520a:	d002      	beq.n	8005212 <HAL_CAN_IRQHandler+0x2f8>
 800520c:	2b20      	cmp	r3, #32
 800520e:	d005      	beq.n	800521c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005210:	e01d      	b.n	800524e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	f043 0308 	orr.w	r3, r3, #8
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800521a:	e019      	b.n	8005250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	f043 0310 	orr.w	r3, r3, #16
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005224:	e014      	b.n	8005250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	f043 0320 	orr.w	r3, r3, #32
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800522e:	e00f      	b.n	8005250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005238:	e00a      	b.n	8005250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005242:	e005      	b.n	8005250 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800524c:	e000      	b.n	8005250 <HAL_CAN_IRQHandler+0x336>
            break;
 800524e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800525e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2204      	movs	r2, #4
 8005266:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f872 	bl	8005364 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005280:	bf00      	nop
 8005282:	3728      	adds	r7, #40	@ 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005388:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053aa:	4a04      	ldr	r2, [pc, #16]	@ (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	60d3      	str	r3, [r2, #12]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <__NVIC_GetPriorityGrouping+0x18>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 0307 	and.w	r3, r3, #7
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4907      	ldr	r1, [pc, #28]	@ (8005414 <__NVIC_EnableIRQ+0x38>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db0a      	blt.n	8005442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	490c      	ldr	r1, [pc, #48]	@ (8005464 <__NVIC_SetPriority+0x4c>)
 8005432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005436:	0112      	lsls	r2, r2, #4
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	440b      	add	r3, r1
 800543c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005440:	e00a      	b.n	8005458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4908      	ldr	r1, [pc, #32]	@ (8005468 <__NVIC_SetPriority+0x50>)
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	3b04      	subs	r3, #4
 8005450:	0112      	lsls	r2, r2, #4
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	440b      	add	r3, r1
 8005456:	761a      	strb	r2, [r3, #24]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000e100 	.word	0xe000e100
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	@ 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f1c3 0307 	rsb	r3, r3, #7
 8005486:	2b04      	cmp	r3, #4
 8005488:	bf28      	it	cs
 800548a:	2304      	movcs	r3, #4
 800548c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3304      	adds	r3, #4
 8005492:	2b06      	cmp	r3, #6
 8005494:	d902      	bls.n	800549c <NVIC_EncodePriority+0x30>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3b03      	subs	r3, #3
 800549a:	e000      	b.n	800549e <NVIC_EncodePriority+0x32>
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43da      	mvns	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	401a      	ands	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b4:	f04f 31ff 	mov.w	r1, #4294967295
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	43d9      	mvns	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	4313      	orrs	r3, r2
         );
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3724      	adds	r7, #36	@ 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3b01      	subs	r3, #1
 80054e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054e4:	d301      	bcc.n	80054ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054e6:	2301      	movs	r3, #1
 80054e8:	e00f      	b.n	800550a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005514 <SysTick_Config+0x40>)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054f2:	210f      	movs	r1, #15
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	f7ff ff8e 	bl	8005418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054fc:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <SysTick_Config+0x40>)
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005502:	4b04      	ldr	r3, [pc, #16]	@ (8005514 <SysTick_Config+0x40>)
 8005504:	2207      	movs	r2, #7
 8005506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	e000e010 	.word	0xe000e010

08005518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff29 	bl	8005378 <__NVIC_SetPriorityGrouping>
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800552e:	b580      	push	{r7, lr}
 8005530:	b086      	sub	sp, #24
 8005532:	af00      	add	r7, sp, #0
 8005534:	4603      	mov	r3, r0
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005540:	f7ff ff3e 	bl	80053c0 <__NVIC_GetPriorityGrouping>
 8005544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f7ff ff8e 	bl	800546c <NVIC_EncodePriority>
 8005550:	4602      	mov	r2, r0
 8005552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005556:	4611      	mov	r1, r2
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff5d 	bl	8005418 <__NVIC_SetPriority>
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff31 	bl	80053dc <__NVIC_EnableIRQ>
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ffa2 	bl	80054d4 <SysTick_Config>
 8005590:	4603      	mov	r3, r0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055a8:	f7fe f8ba 	bl	8003720 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e099      	b.n	80056ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d8:	e00f      	b.n	80055fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055da:	f7fe f8a1 	bl	8003720 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d908      	bls.n	80055fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2203      	movs	r2, #3
 80055f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e078      	b.n	80056ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e8      	bne.n	80055da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4b38      	ldr	r3, [pc, #224]	@ (80056f4 <HAL_DMA_Init+0x158>)
 8005614:	4013      	ands	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005626:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	2b04      	cmp	r3, #4
 8005652:	d107      	bne.n	8005664 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565c:	4313      	orrs	r3, r2
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 0307 	bic.w	r3, r3, #7
 800567a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	2b04      	cmp	r3, #4
 800568c:	d117      	bne.n	80056be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00e      	beq.n	80056be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa6f 	bl	8005b84 <DMA_CheckFifoParam>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2240      	movs	r2, #64	@ 0x40
 80056b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80056ba:	2301      	movs	r3, #1
 80056bc:	e016      	b.n	80056ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa26 	bl	8005b18 <DMA_CalcBaseAndBitshift>
 80056cc:	4603      	mov	r3, r0
 80056ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d4:	223f      	movs	r2, #63	@ 0x3f
 80056d6:	409a      	lsls	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	f010803f 	.word	0xf010803f

080056f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_DMA_Start_IT+0x26>
 800571a:	2302      	movs	r3, #2
 800571c:	e040      	b.n	80057a0 <HAL_DMA_Start_IT+0xa8>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b01      	cmp	r3, #1
 8005730:	d12f      	bne.n	8005792 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f9b8 	bl	8005abc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	223f      	movs	r2, #63	@ 0x3f
 8005752:	409a      	lsls	r2, r3
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0216 	orr.w	r2, r2, #22
 8005766:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0208 	orr.w	r2, r2, #8
 800577e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	e005      	b.n	800579e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800579a:	2302      	movs	r3, #2
 800579c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057b4:	4b8e      	ldr	r3, [pc, #568]	@ (80059f0 <HAL_DMA_IRQHandler+0x248>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a8e      	ldr	r2, [pc, #568]	@ (80059f4 <HAL_DMA_IRQHandler+0x24c>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0a9b      	lsrs	r3, r3, #10
 80057c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d2:	2208      	movs	r2, #8
 80057d4:	409a      	lsls	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01a      	beq.n	8005814 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d013      	beq.n	8005814 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0204 	bic.w	r2, r2, #4
 80057fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005800:	2208      	movs	r2, #8
 8005802:	409a      	lsls	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580c:	f043 0201 	orr.w	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005818:	2201      	movs	r2, #1
 800581a:	409a      	lsls	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005836:	2201      	movs	r2, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005842:	f043 0202 	orr.w	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584e:	2204      	movs	r2, #4
 8005850:	409a      	lsls	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4013      	ands	r3, r2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d012      	beq.n	8005880 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586c:	2204      	movs	r2, #4
 800586e:	409a      	lsls	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005878:	f043 0204 	orr.w	r2, r3, #4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005884:	2210      	movs	r2, #16
 8005886:	409a      	lsls	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d043      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d03c      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a2:	2210      	movs	r2, #16
 80058a4:	409a      	lsls	r2, r3
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d108      	bne.n	80058d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d024      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
 80058d6:	e01f      	b.n	8005918 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01b      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4798      	blx	r3
 80058e8:	e016      	b.n	8005918 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0208 	bic.w	r2, r2, #8
 8005906:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591c:	2220      	movs	r2, #32
 800591e:	409a      	lsls	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 808f 	beq.w	8005a48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8087 	beq.w	8005a48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593e:	2220      	movs	r2, #32
 8005940:	409a      	lsls	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b05      	cmp	r3, #5
 8005950:	d136      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0216 	bic.w	r2, r2, #22
 8005960:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695a      	ldr	r2, [r3, #20]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005970:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <HAL_DMA_IRQHandler+0x1da>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0208 	bic.w	r2, r2, #8
 8005990:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005996:	223f      	movs	r2, #63	@ 0x3f
 8005998:	409a      	lsls	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d07e      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
        }
        return;
 80059be:	e079      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01d      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d031      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
 80059ec:	e02c      	b.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
 80059ee:	bf00      	nop
 80059f0:	20000010 	.word	0x20000010
 80059f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d023      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
 8005a08:	e01e      	b.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10f      	bne.n	8005a38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0210 	bic.w	r2, r2, #16
 8005a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d032      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2205      	movs	r2, #5
 8005a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d307      	bcc.n	8005a90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f2      	bne.n	8005a74 <HAL_DMA_IRQHandler+0x2cc>
 8005a8e:	e000      	b.n	8005a92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
 8005ab2:	e000      	b.n	8005ab6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ab4:	bf00      	nop
    }
  }
}
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b40      	cmp	r3, #64	@ 0x40
 8005ae8:	d108      	bne.n	8005afc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005afa:	e007      	b.n	8005b0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	60da      	str	r2, [r3, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	3b10      	subs	r3, #16
 8005b28:	4a14      	ldr	r2, [pc, #80]	@ (8005b7c <DMA_CalcBaseAndBitshift+0x64>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	091b      	lsrs	r3, r3, #4
 8005b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b32:	4a13      	ldr	r2, [pc, #76]	@ (8005b80 <DMA_CalcBaseAndBitshift+0x68>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d909      	bls.n	8005b5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	1d1a      	adds	r2, r3, #4
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b58:	e007      	b.n	8005b6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	aaaaaaab 	.word	0xaaaaaaab
 8005b80:	08009b34 	.word	0x08009b34

08005b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11f      	bne.n	8005bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d856      	bhi.n	8005c52 <DMA_CheckFifoParam+0xce>
 8005ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <DMA_CheckFifoParam+0x28>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005bcf 	.word	0x08005bcf
 8005bb4:	08005bbd 	.word	0x08005bbd
 8005bb8:	08005c53 	.word	0x08005c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d046      	beq.n	8005c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bcc:	e043      	b.n	8005c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bd6:	d140      	bne.n	8005c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bdc:	e03d      	b.n	8005c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be6:	d121      	bne.n	8005c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d837      	bhi.n	8005c5e <DMA_CheckFifoParam+0xda>
 8005bee:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf4 <DMA_CheckFifoParam+0x70>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c0b 	.word	0x08005c0b
 8005bfc:	08005c05 	.word	0x08005c05
 8005c00:	08005c1d 	.word	0x08005c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      break;
 8005c08:	e030      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d025      	beq.n	8005c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c1a:	e022      	b.n	8005c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c24:	d11f      	bne.n	8005c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c2a:	e01c      	b.n	8005c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d903      	bls.n	8005c3a <DMA_CheckFifoParam+0xb6>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d003      	beq.n	8005c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c38:	e018      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3e:	e015      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00e      	beq.n	8005c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c50:	e00b      	b.n	8005c6a <DMA_CheckFifoParam+0xe6>
      break;
 8005c52:	bf00      	nop
 8005c54:	e00a      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c56:	bf00      	nop
 8005c58:	e008      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e006      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e08d      	b.n	8005daa <HAL_FMPI2C_Init+0x12e>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d106      	bne.n	8005ca8 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fc f894 	bl	8001dd0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2224      	movs	r2, #36	@ 0x24
 8005cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ccc:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cdc:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d107      	bne.n	8005cf6 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	e006      	b.n	8005d04 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d108      	bne.n	8005d1e <HAL_FMPI2C_Init+0xa2>
  {
    SET_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d1a:	605a      	str	r2, [r3, #4]
 8005d1c:	e007      	b.n	8005d2e <HAL_FMPI2C_Init+0xb2>
  }
  else
  {
    /* Clear the FMPI2C ADD10 bit */
    CLEAR_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d50:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69d9      	ldr	r1, [r3, #28]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1a      	ldr	r2, [r3, #32]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	645a      	str	r2, [r3, #68]	@ 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d138      	bne.n	8005e3a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e032      	b.n	8005e3c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2224      	movs	r2, #36	@ 0x24
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0201 	bic.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	@ 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	e165      	b.n	8006130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e64:	2201      	movs	r2, #1
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4013      	ands	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f040 8154 	bne.w	800612a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d005      	beq.n	8005e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d130      	bne.n	8005efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4013      	ands	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	f003 0201 	and.w	r2, r3, #1
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d017      	beq.n	8005f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	2203      	movs	r2, #3
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d123      	bne.n	8005f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	08da      	lsrs	r2, r3, #3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3208      	adds	r2, #8
 8005f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	220f      	movs	r2, #15
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	4013      	ands	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	08da      	lsrs	r2, r3, #3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3208      	adds	r2, #8
 8005f86:	69b9      	ldr	r1, [r7, #24]
 8005f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	2203      	movs	r2, #3
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 0203 	and.w	r2, r3, #3
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80ae 	beq.w	800612a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8006148 <HAL_GPIO_Init+0x300>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8006148 <HAL_GPIO_Init+0x300>)
 8005fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fde:	4b5a      	ldr	r3, [pc, #360]	@ (8006148 <HAL_GPIO_Init+0x300>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fea:	4a58      	ldr	r2, [pc, #352]	@ (800614c <HAL_GPIO_Init+0x304>)
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	089b      	lsrs	r3, r3, #2
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	43db      	mvns	r3, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4013      	ands	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a4f      	ldr	r2, [pc, #316]	@ (8006150 <HAL_GPIO_Init+0x308>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d025      	beq.n	8006062 <HAL_GPIO_Init+0x21a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a4e      	ldr	r2, [pc, #312]	@ (8006154 <HAL_GPIO_Init+0x30c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01f      	beq.n	800605e <HAL_GPIO_Init+0x216>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a4d      	ldr	r2, [pc, #308]	@ (8006158 <HAL_GPIO_Init+0x310>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d019      	beq.n	800605a <HAL_GPIO_Init+0x212>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a4c      	ldr	r2, [pc, #304]	@ (800615c <HAL_GPIO_Init+0x314>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_GPIO_Init+0x20e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a4b      	ldr	r2, [pc, #300]	@ (8006160 <HAL_GPIO_Init+0x318>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00d      	beq.n	8006052 <HAL_GPIO_Init+0x20a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a4a      	ldr	r2, [pc, #296]	@ (8006164 <HAL_GPIO_Init+0x31c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <HAL_GPIO_Init+0x206>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a49      	ldr	r2, [pc, #292]	@ (8006168 <HAL_GPIO_Init+0x320>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d101      	bne.n	800604a <HAL_GPIO_Init+0x202>
 8006046:	2306      	movs	r3, #6
 8006048:	e00c      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 800604a:	2307      	movs	r3, #7
 800604c:	e00a      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 800604e:	2305      	movs	r3, #5
 8006050:	e008      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 8006052:	2304      	movs	r3, #4
 8006054:	e006      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 8006056:	2303      	movs	r3, #3
 8006058:	e004      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 800605a:	2302      	movs	r3, #2
 800605c:	e002      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_GPIO_Init+0x21c>
 8006062:	2300      	movs	r3, #0
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	f002 0203 	and.w	r2, r2, #3
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	4093      	lsls	r3, r2
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4313      	orrs	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006074:	4935      	ldr	r1, [pc, #212]	@ (800614c <HAL_GPIO_Init+0x304>)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	089b      	lsrs	r3, r3, #2
 800607a:	3302      	adds	r3, #2
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006082:	4b3a      	ldr	r3, [pc, #232]	@ (800616c <HAL_GPIO_Init+0x324>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	43db      	mvns	r3, r3
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4013      	ands	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060a6:	4a31      	ldr	r2, [pc, #196]	@ (800616c <HAL_GPIO_Init+0x324>)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060ac:	4b2f      	ldr	r3, [pc, #188]	@ (800616c <HAL_GPIO_Init+0x324>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060d0:	4a26      	ldr	r2, [pc, #152]	@ (800616c <HAL_GPIO_Init+0x324>)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060d6:	4b25      	ldr	r3, [pc, #148]	@ (800616c <HAL_GPIO_Init+0x324>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	43db      	mvns	r3, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4013      	ands	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060fa:	4a1c      	ldr	r2, [pc, #112]	@ (800616c <HAL_GPIO_Init+0x324>)
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006100:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <HAL_GPIO_Init+0x324>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006124:	4a11      	ldr	r2, [pc, #68]	@ (800616c <HAL_GPIO_Init+0x324>)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3301      	adds	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b0f      	cmp	r3, #15
 8006134:	f67f ae96 	bls.w	8005e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3724      	adds	r7, #36	@ 0x24
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40023800 	.word	0x40023800
 800614c:	40013800 	.word	0x40013800
 8006150:	40020000 	.word	0x40020000
 8006154:	40020400 	.word	0x40020400
 8006158:	40020800 	.word	0x40020800
 800615c:	40020c00 	.word	0x40020c00
 8006160:	40021000 	.word	0x40021000
 8006164:	40021400 	.word	0x40021400
 8006168:	40021800 	.word	0x40021800
 800616c:	40013c00 	.word	0x40013c00

08006170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	807b      	strh	r3, [r7, #2]
 800617c:	4613      	mov	r3, r2
 800617e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006180:	787b      	ldrb	r3, [r7, #1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006186:	887a      	ldrh	r2, [r7, #2]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800618c:	e003      	b.n	8006196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800618e:	887b      	ldrh	r3, [r7, #2]
 8006190:	041a      	lsls	r2, r3, #16
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	619a      	str	r2, [r3, #24]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061b4:	887a      	ldrh	r2, [r7, #2]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4013      	ands	r3, r2
 80061ba:	041a      	lsls	r2, r3, #16
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	43d9      	mvns	r1, r3
 80061c0:	887b      	ldrh	r3, [r7, #2]
 80061c2:	400b      	ands	r3, r1
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	619a      	str	r2, [r3, #24]
}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e12b      	b.n	8006442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fb ff56 	bl	80020b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2224      	movs	r2, #36	@ 0x24
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800622a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800623a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800623c:	f000 fac4 	bl	80067c8 <HAL_RCC_GetPCLK1Freq>
 8006240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4a81      	ldr	r2, [pc, #516]	@ (800644c <HAL_I2C_Init+0x274>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d807      	bhi.n	800625c <HAL_I2C_Init+0x84>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4a80      	ldr	r2, [pc, #512]	@ (8006450 <HAL_I2C_Init+0x278>)
 8006250:	4293      	cmp	r3, r2
 8006252:	bf94      	ite	ls
 8006254:	2301      	movls	r3, #1
 8006256:	2300      	movhi	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	e006      	b.n	800626a <HAL_I2C_Init+0x92>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a7d      	ldr	r2, [pc, #500]	@ (8006454 <HAL_I2C_Init+0x27c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	bf94      	ite	ls
 8006264:	2301      	movls	r3, #1
 8006266:	2300      	movhi	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e0e7      	b.n	8006442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a78      	ldr	r2, [pc, #480]	@ (8006458 <HAL_I2C_Init+0x280>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	0c9b      	lsrs	r3, r3, #18
 800627c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a6a      	ldr	r2, [pc, #424]	@ (800644c <HAL_I2C_Init+0x274>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d802      	bhi.n	80062ac <HAL_I2C_Init+0xd4>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	3301      	adds	r3, #1
 80062aa:	e009      	b.n	80062c0 <HAL_I2C_Init+0xe8>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80062b2:	fb02 f303 	mul.w	r3, r2, r3
 80062b6:	4a69      	ldr	r2, [pc, #420]	@ (800645c <HAL_I2C_Init+0x284>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	099b      	lsrs	r3, r3, #6
 80062be:	3301      	adds	r3, #1
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	430b      	orrs	r3, r1
 80062c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80062d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	495c      	ldr	r1, [pc, #368]	@ (800644c <HAL_I2C_Init+0x274>)
 80062dc:	428b      	cmp	r3, r1
 80062de:	d819      	bhi.n	8006314 <HAL_I2C_Init+0x13c>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1e59      	subs	r1, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80062f4:	400b      	ands	r3, r1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <HAL_I2C_Init+0x138>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1e59      	subs	r1, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	fbb1 f3f3 	udiv	r3, r1, r3
 8006308:	3301      	adds	r3, #1
 800630a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630e:	e051      	b.n	80063b4 <HAL_I2C_Init+0x1dc>
 8006310:	2304      	movs	r3, #4
 8006312:	e04f      	b.n	80063b4 <HAL_I2C_Init+0x1dc>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d111      	bne.n	8006340 <HAL_I2C_Init+0x168>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	1e58      	subs	r0, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6859      	ldr	r1, [r3, #4]
 8006324:	460b      	mov	r3, r1
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	440b      	add	r3, r1
 800632a:	fbb0 f3f3 	udiv	r3, r0, r3
 800632e:	3301      	adds	r3, #1
 8006330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf0c      	ite	eq
 8006338:	2301      	moveq	r3, #1
 800633a:	2300      	movne	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e012      	b.n	8006366 <HAL_I2C_Init+0x18e>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1e58      	subs	r0, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6859      	ldr	r1, [r3, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	0099      	lsls	r1, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	fbb0 f3f3 	udiv	r3, r0, r3
 8006356:	3301      	adds	r3, #1
 8006358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635c:	2b00      	cmp	r3, #0
 800635e:	bf0c      	ite	eq
 8006360:	2301      	moveq	r3, #1
 8006362:	2300      	movne	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <HAL_I2C_Init+0x196>
 800636a:	2301      	movs	r3, #1
 800636c:	e022      	b.n	80063b4 <HAL_I2C_Init+0x1dc>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10e      	bne.n	8006394 <HAL_I2C_Init+0x1bc>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1e58      	subs	r0, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6859      	ldr	r1, [r3, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	440b      	add	r3, r1
 8006384:	fbb0 f3f3 	udiv	r3, r0, r3
 8006388:	3301      	adds	r3, #1
 800638a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800638e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006392:	e00f      	b.n	80063b4 <HAL_I2C_Init+0x1dc>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	1e58      	subs	r0, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6859      	ldr	r1, [r3, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	0099      	lsls	r1, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063aa:	3301      	adds	r3, #1
 80063ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	6809      	ldr	r1, [r1, #0]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69da      	ldr	r2, [r3, #28]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80063e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6911      	ldr	r1, [r2, #16]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	68d2      	ldr	r2, [r2, #12]
 80063ee:	4311      	orrs	r1, r2
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	430b      	orrs	r3, r1
 80063f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	000186a0 	.word	0x000186a0
 8006450:	001e847f 	.word	0x001e847f
 8006454:	003d08ff 	.word	0x003d08ff
 8006458:	431bde83 	.word	0x431bde83
 800645c:	10624dd3 	.word	0x10624dd3

08006460 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af02      	add	r7, sp, #8
 8006466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006468:	f7fd f95a 	bl	8003720 <HAL_GetTick>
 800646c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e069      	b.n	800654c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fc fac5 	bl	8002a1c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006492:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f85e 	bl	8006558 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	021a      	lsls	r2, r3, #8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	2120      	movs	r1, #32
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f856 	bl	8006574 <QSPI_WaitFlagStateUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80064cc:	7afb      	ldrb	r3, [r7, #11]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d137      	bne.n	8006542 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80064dc:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	0611      	lsls	r1, r2, #24
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68d2      	ldr	r2, [r2, #12]
 80064ea:	4311      	orrs	r1, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	69d2      	ldr	r2, [r2, #28]
 80064f0:	4311      	orrs	r1, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6a12      	ldr	r2, [r2, #32]
 80064f6:	4311      	orrs	r1, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <HAL_QSPI_Init+0xf4>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6912      	ldr	r2, [r2, #16]
 800650e:	0411      	lsls	r1, r2, #16
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6952      	ldr	r2, [r2, #20]
 8006514:	4311      	orrs	r1, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6992      	ldr	r2, [r2, #24]
 800651a:	4311      	orrs	r1, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	430b      	orrs	r3, r1
 8006522:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800654a:	7afb      	ldrb	r3, [r7, #11]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	ffe0f8fe 	.word	0xffe0f8fe

08006558 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006584:	e01a      	b.n	80065bc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d016      	beq.n	80065bc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800658e:	f7fd f8c7 	bl	8003720 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	429a      	cmp	r2, r3
 800659c:	d302      	bcc.n	80065a4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10b      	bne.n	80065bc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2204      	movs	r2, #4
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b0:	f043 0201 	orr.w	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e00e      	b.n	80065da <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bf14      	ite	ne
 80065ca:	2301      	movne	r3, #1
 80065cc:	2300      	moveq	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d1d6      	bne.n	8006586 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0cc      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065f8:	4b68      	ldr	r3, [pc, #416]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d90c      	bls.n	8006620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b65      	ldr	r3, [pc, #404]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b63      	ldr	r3, [pc, #396]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e0b8      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d020      	beq.n	800666e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006638:	4b59      	ldr	r3, [pc, #356]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4a58      	ldr	r2, [pc, #352]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006650:	4b53      	ldr	r3, [pc, #332]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4a52      	ldr	r2, [pc, #328]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006656:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800665a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800665c:	4b50      	ldr	r3, [pc, #320]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	494d      	ldr	r1, [pc, #308]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	4313      	orrs	r3, r2
 800666c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d044      	beq.n	8006704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d107      	bne.n	8006692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006682:	4b47      	ldr	r3, [pc, #284]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d119      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e07f      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d003      	beq.n	80066a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d107      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a2:	4b3f      	ldr	r3, [pc, #252]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e06f      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b2:	4b3b      	ldr	r3, [pc, #236]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e067      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066c2:	4b37      	ldr	r3, [pc, #220]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f023 0203 	bic.w	r2, r3, #3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4934      	ldr	r1, [pc, #208]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066d4:	f7fd f824 	bl	8003720 <HAL_GetTick>
 80066d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066da:	e00a      	b.n	80066f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066dc:	f7fd f820 	bl	8003720 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e04f      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f2:	4b2b      	ldr	r3, [pc, #172]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 020c 	and.w	r2, r3, #12
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	429a      	cmp	r2, r3
 8006702:	d1eb      	bne.n	80066dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006704:	4b25      	ldr	r3, [pc, #148]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d20c      	bcs.n	800672c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b22      	ldr	r3, [pc, #136]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b20      	ldr	r3, [pc, #128]	@ (800679c <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e032      	b.n	8006792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d008      	beq.n	800674a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006738:	4b19      	ldr	r3, [pc, #100]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4916      	ldr	r1, [pc, #88]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	4313      	orrs	r3, r2
 8006748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006756:	4b12      	ldr	r3, [pc, #72]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	490e      	ldr	r1, [pc, #56]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	4313      	orrs	r3, r2
 8006768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800676a:	f000 fdb5 	bl	80072d8 <HAL_RCC_GetSysClockFreq>
 800676e:	4602      	mov	r2, r0
 8006770:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	490a      	ldr	r1, [pc, #40]	@ (80067a4 <HAL_RCC_ClockConfig+0x1c0>)
 800677c:	5ccb      	ldrb	r3, [r1, r3]
 800677e:	fa22 f303 	lsr.w	r3, r2, r3
 8006782:	4a09      	ldr	r2, [pc, #36]	@ (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006786:	4b09      	ldr	r3, [pc, #36]	@ (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f7fc ff84 	bl	8003698 <HAL_InitTick>

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40023c00 	.word	0x40023c00
 80067a0:	40023800 	.word	0x40023800
 80067a4:	08009b1c 	.word	0x08009b1c
 80067a8:	20000010 	.word	0x20000010
 80067ac:	20000014 	.word	0x20000014

080067b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b0:	b480      	push	{r7}
 80067b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067b4:	4b03      	ldr	r3, [pc, #12]	@ (80067c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000010 	.word	0x20000010

080067c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067cc:	f7ff fff0 	bl	80067b0 <HAL_RCC_GetHCLKFreq>
 80067d0:	4602      	mov	r2, r0
 80067d2:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	0a9b      	lsrs	r3, r3, #10
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	4903      	ldr	r1, [pc, #12]	@ (80067ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80067de:	5ccb      	ldrb	r3, [r1, r3]
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40023800 	.word	0x40023800
 80067ec:	08009b2c 	.word	0x08009b2c

080067f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08c      	sub	sp, #48	@ 0x30
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d010      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006828:	4b6f      	ldr	r3, [pc, #444]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800682e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	496c      	ldr	r1, [pc, #432]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006846:	2301      	movs	r3, #1
 8006848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d010      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006856:	4b64      	ldr	r3, [pc, #400]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800685c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006864:	4960      	ldr	r1, [pc, #384]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006874:	2301      	movs	r3, #1
 8006876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d017      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006884:	4b58      	ldr	r3, [pc, #352]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800688a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006892:	4955      	ldr	r1, [pc, #340]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800689e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068a2:	d101      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80068a4:	2301      	movs	r3, #1
 80068a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80068b0:	2301      	movs	r3, #1
 80068b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d017      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068c0:	4b49      	ldr	r3, [pc, #292]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ce:	4946      	ldr	r1, [pc, #280]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068de:	d101      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80068e0:	2301      	movs	r3, #1
 80068e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80068ec:	2301      	movs	r3, #1
 80068ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 808a 	beq.w	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068fe:	2300      	movs	r3, #0
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	4b39      	ldr	r3, [pc, #228]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006906:	4a38      	ldr	r2, [pc, #224]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800690c:	6413      	str	r3, [r2, #64]	@ 0x40
 800690e:	4b36      	ldr	r3, [pc, #216]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800691a:	4b34      	ldr	r3, [pc, #208]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a33      	ldr	r2, [pc, #204]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006924:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006926:	f7fc fefb 	bl	8003720 <HAL_GetTick>
 800692a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800692c:	e008      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800692e:	f7fc fef7 	bl	8003720 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e278      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006940:	4b2a      	ldr	r3, [pc, #168]	@ (80069ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0f0      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800694c:	4b26      	ldr	r3, [pc, #152]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006954:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d02f      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	429a      	cmp	r2, r3
 8006968:	d028      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800696a:	4b1f      	ldr	r3, [pc, #124]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006972:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006974:	4b1e      	ldr	r3, [pc, #120]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006976:	2201      	movs	r2, #1
 8006978:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800697a:	4b1d      	ldr	r3, [pc, #116]	@ (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006980:	4a19      	ldr	r2, [pc, #100]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006986:	4b18      	ldr	r3, [pc, #96]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b01      	cmp	r3, #1
 8006990:	d114      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006992:	f7fc fec5 	bl	8003720 <HAL_GetTick>
 8006996:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006998:	e00a      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800699a:	f7fc fec1 	bl	8003720 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e240      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b0:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0ee      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c8:	d114      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80069ca:	4b07      	ldr	r3, [pc, #28]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80069da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069de:	4902      	ldr	r1, [pc, #8]	@ (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	608b      	str	r3, [r1, #8]
 80069e4:	e00c      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80069e6:	bf00      	nop
 80069e8:	40023800 	.word	0x40023800
 80069ec:	40007000 	.word	0x40007000
 80069f0:	42470e40 	.word	0x42470e40
 80069f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4a49      	ldr	r2, [pc, #292]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80069fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80069fe:	6093      	str	r3, [r2, #8]
 8006a00:	4b47      	ldr	r3, [pc, #284]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a0c:	4944      	ldr	r1, [pc, #272]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8006a24:	4b3f      	ldr	r3, [pc, #252]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006a26:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006a34:	4b3a      	ldr	r3, [pc, #232]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a3a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a42:	4937      	ldr	r1, [pc, #220]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a56:	4b32      	ldr	r3, [pc, #200]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a5c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a64:	492e      	ldr	r1, [pc, #184]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d011      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a78:	4b29      	ldr	r3, [pc, #164]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a7e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a86:	4926      	ldr	r1, [pc, #152]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a96:	d101      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab6:	491a      	ldr	r1, [pc, #104]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d011      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006aca:	4b15      	ldr	r3, [pc, #84]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad8:	4911      	ldr	r1, [pc, #68]	@ (8006b20 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ae8:	d101      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006aea:	2301      	movs	r3, #1
 8006aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d005      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006afc:	f040 80ff 	bne.w	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b00:	4b09      	ldr	r3, [pc, #36]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b06:	f7fc fe0b 	bl	8003720 <HAL_GetTick>
 8006b0a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b0c:	e00e      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b0e:	f7fc fe07 	bl	8003720 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d907      	bls.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e188      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006b20:	40023800 	.word	0x40023800
 8006b24:	424711e0 	.word	0x424711e0
 8006b28:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ea      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d028      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d124      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006b60:	4b71      	ldr	r3, [pc, #452]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b66:	0c1b      	lsrs	r3, r3, #16
 8006b68:	f003 0303 	and.w	r3, r3, #3
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b72:	4b6d      	ldr	r3, [pc, #436]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b78:	0e1b      	lsrs	r3, r3, #24
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	019b      	lsls	r3, r3, #6
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	3b01      	subs	r3, #1
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	071b      	lsls	r3, r3, #28
 8006ba2:	4961      	ldr	r1, [pc, #388]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bbe:	d00a      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d035      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd4:	d130      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006bd6:	4b54      	ldr	r3, [pc, #336]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bdc:	0c1b      	lsrs	r3, r3, #16
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	3301      	adds	r3, #1
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006be8:	4b4f      	ldr	r3, [pc, #316]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bee:	0f1b      	lsrs	r3, r3, #28
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	019b      	lsls	r3, r3, #6
 8006c00:	431a      	orrs	r2, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	3b01      	subs	r3, #1
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	061b      	lsls	r3, r3, #24
 8006c12:	431a      	orrs	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	071b      	lsls	r3, r3, #28
 8006c18:	4943      	ldr	r1, [pc, #268]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c20:	4b41      	ldr	r3, [pc, #260]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c26:	f023 021f 	bic.w	r2, r3, #31
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	493d      	ldr	r1, [pc, #244]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d029      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c4c:	d124      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006c4e:	4b36      	ldr	r3, [pc, #216]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c54:	0c1b      	lsrs	r3, r3, #16
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c60:	4b31      	ldr	r3, [pc, #196]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c66:	0f1b      	lsrs	r3, r3, #28
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	019b      	lsls	r3, r3, #6
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	3b01      	subs	r3, #1
 8006c82:	041b      	lsls	r3, r3, #16
 8006c84:	431a      	orrs	r2, r3
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	061b      	lsls	r3, r3, #24
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	071b      	lsls	r3, r3, #28
 8006c90:	4925      	ldr	r1, [pc, #148]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	019b      	lsls	r3, r3, #6
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	085b      	lsrs	r3, r3, #1
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	041b      	lsls	r3, r3, #16
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	061b      	lsls	r3, r3, #24
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	071b      	lsls	r3, r3, #28
 8006cca:	4917      	ldr	r1, [pc, #92]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006cd2:	4b16      	ldr	r3, [pc, #88]	@ (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cd8:	f7fc fd22 	bl	8003720 <HAL_GetTick>
 8006cdc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ce0:	f7fc fd1e 	bl	8003720 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e09f      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f0      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	f040 8095 	bne.w	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0c:	f7fc fd08 	bl	8003720 <HAL_GetTick>
 8006d10:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d12:	e00f      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d14:	f7fc fd04 	bl	8003720 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d908      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e085      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	42470068 	.word	0x42470068
 8006d30:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d34:	4b41      	ldr	r3, [pc, #260]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d40:	d0e8      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d02b      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d127      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006d6a:	4b34      	ldr	r3, [pc, #208]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d70:	0c1b      	lsrs	r3, r3, #16
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	3301      	adds	r3, #1
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	019b      	lsls	r3, r3, #6
 8006d86:	431a      	orrs	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	085b      	lsrs	r3, r3, #1
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d96:	061b      	lsls	r3, r3, #24
 8006d98:	4928      	ldr	r1, [pc, #160]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006da0:	4b26      	ldr	r3, [pc, #152]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006da6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dae:	3b01      	subs	r3, #1
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	4922      	ldr	r1, [pc, #136]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01d      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dce:	d118      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd6:	0e1b      	lsrs	r3, r3, #24
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	019b      	lsls	r3, r3, #6
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	085b      	lsrs	r3, r3, #1
 8006df0:	3b01      	subs	r3, #1
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	061b      	lsls	r3, r3, #24
 8006dfa:	4910      	ldr	r1, [pc, #64]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e02:	4b0f      	ldr	r3, [pc, #60]	@ (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e08:	f7fc fc8a 	bl	8003720 <HAL_GetTick>
 8006e0c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e10:	f7fc fc86 	bl	8003720 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e007      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e22:	4b06      	ldr	r3, [pc, #24]	@ (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e2e:	d1ef      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3730      	adds	r7, #48	@ 0x30
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	42470070 	.word	0x42470070

08006e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	@ 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	2b07      	cmp	r3, #7
 8006e6a:	f200 8224 	bhi.w	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08007077 	.word	0x08007077
 8006e78:	080071a1 	.word	0x080071a1
 8006e7c:	080072b7 	.word	0x080072b7
 8006e80:	08006e95 	.word	0x08006e95
 8006e84:	080072b7 	.word	0x080072b7
 8006e88:	080072b7 	.word	0x080072b7
 8006e8c:	080072b7 	.word	0x080072b7
 8006e90:	08006e95 	.word	0x08006e95
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8006e94:	4ba8      	ldr	r3, [pc, #672]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e9a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006eaa:	f000 80d6 	beq.w	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006eb4:	f200 80dd 	bhi.w	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ebe:	f000 809f 	beq.w	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ec8:	f200 80d3 	bhi.w	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ed2:	d05b      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eda:	f200 80ca 	bhi.w	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ee4:	f000 80b6 	beq.w	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006eee:	f200 80c0 	bhi.w	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ef8:	f000 8082 	beq.w	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f02:	f200 80b6 	bhi.w	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f12:	d03b      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8006f14:	e0ad      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006f16:	4b88      	ldr	r3, [pc, #544]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d109      	bne.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8006f22:	4b85      	ldr	r3, [pc, #532]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f2c:	4a83      	ldr	r2, [pc, #524]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e008      	b.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8006f36:	4b80      	ldr	r3, [pc, #512]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f40:	4a7f      	ldr	r2, [pc, #508]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8006f48:	4b7b      	ldr	r3, [pc, #492]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4e:	0e1b      	lsrs	r3, r3, #24
 8006f50:	f003 030f 	and.w	r3, r3, #15
 8006f54:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8006f56:	4b78      	ldr	r3, [pc, #480]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5c:	099b      	lsrs	r3, r3, #6
 8006f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	fb03 f202 	mul.w	r2, r3, r2
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8006f70:	4b71      	ldr	r3, [pc, #452]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8006f80:	69fa      	ldr	r2, [r7, #28]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	61fb      	str	r3, [r7, #28]
          break;
 8006f8a:	e073      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f98:	4b67      	ldr	r3, [pc, #412]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fa2:	4a66      	ldr	r2, [pc, #408]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e008      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8006fac:	4b62      	ldr	r3, [pc, #392]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fb6:	4a62      	ldr	r2, [pc, #392]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8006fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fc4:	0e1b      	lsrs	r3, r3, #24
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8006fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fd2:	099b      	lsrs	r3, r3, #6
 8006fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	fb03 f202 	mul.w	r2, r3, r2
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8006fe6:	4b54      	ldr	r3, [pc, #336]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	61fb      	str	r3, [r7, #28]
          break;
 8006ffe:	e039      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007000:	4b4d      	ldr	r3, [pc, #308]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d108      	bne.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800700c:	4b4a      	ldr	r3, [pc, #296]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007014:	4a49      	ldr	r2, [pc, #292]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007016:	fbb2 f3f3 	udiv	r3, r2, r3
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e007      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800701e:	4b46      	ldr	r3, [pc, #280]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007026:	4a46      	ldr	r2, [pc, #280]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800702e:	4b42      	ldr	r3, [pc, #264]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	0f1b      	lsrs	r3, r3, #28
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800703a:	4b3f      	ldr	r3, [pc, #252]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	099b      	lsrs	r3, r3, #6
 8007040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	fb03 f202 	mul.w	r2, r3, r2
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	61fb      	str	r3, [r7, #28]
          break;
 8007052:	e00f      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007054:	4b3b      	ldr	r3, [pc, #236]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007056:	61fb      	str	r3, [r7, #28]
          break;
 8007058:	e00c      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800705a:	4b37      	ldr	r3, [pc, #220]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d102      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8007066:	4b35      	ldr	r3, [pc, #212]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007068:	61fb      	str	r3, [r7, #28]
          break;
 800706a:	e003      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800706c:	4b34      	ldr	r3, [pc, #208]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800706e:	61fb      	str	r3, [r7, #28]
          break;
 8007070:	e000      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8007072:	bf00      	nop
        }
      }
      break;
 8007074:	e120      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007076:	4b30      	ldr	r3, [pc, #192]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800707c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8007088:	d079      	beq.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8007090:	f200 8082 	bhi.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800709a:	d03c      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070a2:	d879      	bhi.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d006      	beq.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070b0:	d172      	bne.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80070b2:	4b24      	ldr	r3, [pc, #144]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80070b4:	61fb      	str	r3, [r7, #28]
          break;
 80070b6:	e072      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80070b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070c4:	d109      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80070c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80070c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80070d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d6:	61bb      	str	r3, [r7, #24]
 80070d8:	e008      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80070da:	4b17      	ldr	r3, [pc, #92]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070e4:	4a15      	ldr	r2, [pc, #84]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80070e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ea:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80070ec:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80070ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070f2:	099b      	lsrs	r3, r3, #6
 80070f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
 80070fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007100:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007106:	0f1b      	lsrs	r3, r3, #28
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007112:	61fb      	str	r3, [r7, #28]
          break;
 8007114:	e043      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007116:	4b08      	ldr	r3, [pc, #32]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800711e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007122:	d111      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007124:	4b04      	ldr	r3, [pc, #16]	@ (8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800712c:	4a04      	ldr	r2, [pc, #16]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800712e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	e010      	b.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8007136:	bf00      	nop
 8007138:	40023800 	.word	0x40023800
 800713c:	00f42400 	.word	0x00f42400
 8007140:	016e3600 	.word	0x016e3600
 8007144:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007148:	4b5f      	ldr	r3, [pc, #380]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007150:	4a5e      	ldr	r2, [pc, #376]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8007152:	fbb2 f3f3 	udiv	r3, r2, r3
 8007156:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007158:	4b5b      	ldr	r3, [pc, #364]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	099b      	lsrs	r3, r3, #6
 800715e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800716a:	4b57      	ldr	r3, [pc, #348]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	0f1b      	lsrs	r3, r3, #28
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	fbb2 f3f3 	udiv	r3, r2, r3
 800717a:	61fb      	str	r3, [r7, #28]
          break;
 800717c:	e00f      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800717e:	4b52      	ldr	r3, [pc, #328]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800718a:	d102      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800718c:	4b50      	ldr	r3, [pc, #320]	@ (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 800718e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007190:	e005      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8007192:	4b4e      	ldr	r3, [pc, #312]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8007194:	61fb      	str	r3, [r7, #28]
          break;
 8007196:	e002      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	61fb      	str	r3, [r7, #28]
          break;
 800719c:	bf00      	nop
        }
      }
      break;
 800719e:	e08b      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80071a0:	4b49      	ldr	r3, [pc, #292]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80071a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071a6:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80071b2:	d06f      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80071ba:	d878      	bhi.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071c2:	d03c      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071ca:	d870      	bhi.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d006      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071d8:	d169      	bne.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80071da:	4b3e      	ldr	r3, [pc, #248]	@ (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 80071dc:	61fb      	str	r3, [r7, #28]
          break;
 80071de:	e069      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80071e0:	4b39      	ldr	r3, [pc, #228]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071ec:	d109      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80071ee:	4b36      	ldr	r3, [pc, #216]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80071f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071f8:	4a35      	ldr	r2, [pc, #212]	@ (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e008      	b.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007202:	4b31      	ldr	r3, [pc, #196]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800720c:	4a2f      	ldr	r2, [pc, #188]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007214:	4b2c      	ldr	r3, [pc, #176]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800721a:	099b      	lsrs	r3, r3, #6
 800721c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007228:	4b27      	ldr	r3, [pc, #156]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800722a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800722e:	0f1b      	lsrs	r3, r3, #28
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	61fb      	str	r3, [r7, #28]
          break;
 800723c:	e03a      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800723e:	4b22      	ldr	r3, [pc, #136]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800724a:	d108      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800724c:	4b1e      	ldr	r3, [pc, #120]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007254:	4a1e      	ldr	r2, [pc, #120]	@ (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8007256:	fbb2 f3f3 	udiv	r3, r2, r3
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e007      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800725e:	4b1a      	ldr	r3, [pc, #104]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007266:	4a19      	ldr	r2, [pc, #100]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8007268:	fbb2 f3f3 	udiv	r3, r2, r3
 800726c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800726e:	4b16      	ldr	r3, [pc, #88]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	099b      	lsrs	r3, r3, #6
 8007274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007280:	4b11      	ldr	r3, [pc, #68]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	0f1b      	lsrs	r3, r3, #28
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007290:	61fb      	str	r3, [r7, #28]
          break;
 8007292:	e00f      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007294:	4b0c      	ldr	r3, [pc, #48]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800729c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072a0:	d102      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80072a2:	4b0b      	ldr	r3, [pc, #44]	@ (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80072a4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80072a6:	e005      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80072a8:	4b08      	ldr	r3, [pc, #32]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80072aa:	61fb      	str	r3, [r7, #28]
          break;
 80072ac:	e002      	b.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
          break;
 80072b2:	bf00      	nop
        }
      }
      break;
 80072b4:	e000      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  default:
    {
       break;
 80072b6:	bf00      	nop
    }
  }
  return frequency;
 80072b8:	69fb      	ldr	r3, [r7, #28]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3724      	adds	r7, #36	@ 0x24
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40023800 	.word	0x40023800
 80072cc:	00f42400 	.word	0x00f42400
 80072d0:	016e3600 	.word	0x016e3600
 80072d4:	00bb8000 	.word	0x00bb8000

080072d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072dc:	b0a6      	sub	sp, #152	@ 0x98
 80072de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072fe:	4bc8      	ldr	r3, [pc, #800]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 030c 	and.w	r3, r3, #12
 8007306:	2b0c      	cmp	r3, #12
 8007308:	f200 817e 	bhi.w	8007608 <HAL_RCC_GetSysClockFreq+0x330>
 800730c:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <HAL_RCC_GetSysClockFreq+0x3c>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007349 	.word	0x08007349
 8007318:	08007609 	.word	0x08007609
 800731c:	08007609 	.word	0x08007609
 8007320:	08007609 	.word	0x08007609
 8007324:	08007351 	.word	0x08007351
 8007328:	08007609 	.word	0x08007609
 800732c:	08007609 	.word	0x08007609
 8007330:	08007609 	.word	0x08007609
 8007334:	08007359 	.word	0x08007359
 8007338:	08007609 	.word	0x08007609
 800733c:	08007609 	.word	0x08007609
 8007340:	08007609 	.word	0x08007609
 8007344:	080074c3 	.word	0x080074c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007348:	4bb6      	ldr	r3, [pc, #728]	@ (8007624 <HAL_RCC_GetSysClockFreq+0x34c>)
 800734a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 800734e:	e15f      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007350:	4bb5      	ldr	r3, [pc, #724]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x350>)
 8007352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007356:	e15b      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007358:	4bb1      	ldr	r3, [pc, #708]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007364:	4bae      	ldr	r3, [pc, #696]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d031      	beq.n	80073d4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007370:	4bab      	ldr	r3, [pc, #684]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	099b      	lsrs	r3, r3, #6
 8007376:	2200      	movs	r2, #0
 8007378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800737a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800737c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800737e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007382:	663b      	str	r3, [r7, #96]	@ 0x60
 8007384:	2300      	movs	r3, #0
 8007386:	667b      	str	r3, [r7, #100]	@ 0x64
 8007388:	4ba7      	ldr	r3, [pc, #668]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x350>)
 800738a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800738e:	462a      	mov	r2, r5
 8007390:	fb03 f202 	mul.w	r2, r3, r2
 8007394:	2300      	movs	r3, #0
 8007396:	4621      	mov	r1, r4
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	4aa2      	ldr	r2, [pc, #648]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x350>)
 80073a0:	4621      	mov	r1, r4
 80073a2:	fba1 1202 	umull	r1, r2, r1, r2
 80073a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80073a8:	460a      	mov	r2, r1
 80073aa:	67ba      	str	r2, [r7, #120]	@ 0x78
 80073ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80073ae:	4413      	add	r3, r2
 80073b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073b6:	2200      	movs	r2, #0
 80073b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073ba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80073bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80073c4:	f7f9 f92c 	bl	8000620 <__aeabi_uldivmod>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4613      	mov	r3, r2
 80073ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073d2:	e064      	b.n	800749e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073d4:	4b92      	ldr	r3, [pc, #584]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	099b      	lsrs	r3, r3, #6
 80073da:	2200      	movs	r2, #0
 80073dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80073de:	657a      	str	r2, [r7, #84]	@ 0x54
 80073e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073e8:	2300      	movs	r3, #0
 80073ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80073f0:	4622      	mov	r2, r4
 80073f2:	462b      	mov	r3, r5
 80073f4:	f04f 0000 	mov.w	r0, #0
 80073f8:	f04f 0100 	mov.w	r1, #0
 80073fc:	0159      	lsls	r1, r3, #5
 80073fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007402:	0150      	lsls	r0, r2, #5
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4621      	mov	r1, r4
 800740a:	1a51      	subs	r1, r2, r1
 800740c:	6139      	str	r1, [r7, #16]
 800740e:	4629      	mov	r1, r5
 8007410:	eb63 0301 	sbc.w	r3, r3, r1
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007422:	4659      	mov	r1, fp
 8007424:	018b      	lsls	r3, r1, #6
 8007426:	4651      	mov	r1, sl
 8007428:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800742c:	4651      	mov	r1, sl
 800742e:	018a      	lsls	r2, r1, #6
 8007430:	4651      	mov	r1, sl
 8007432:	ebb2 0801 	subs.w	r8, r2, r1
 8007436:	4659      	mov	r1, fp
 8007438:	eb63 0901 	sbc.w	r9, r3, r1
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007448:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800744c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007450:	4690      	mov	r8, r2
 8007452:	4699      	mov	r9, r3
 8007454:	4623      	mov	r3, r4
 8007456:	eb18 0303 	adds.w	r3, r8, r3
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	462b      	mov	r3, r5
 800745e:	eb49 0303 	adc.w	r3, r9, r3
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007470:	4629      	mov	r1, r5
 8007472:	028b      	lsls	r3, r1, #10
 8007474:	4621      	mov	r1, r4
 8007476:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800747a:	4621      	mov	r1, r4
 800747c:	028a      	lsls	r2, r1, #10
 800747e:	4610      	mov	r0, r2
 8007480:	4619      	mov	r1, r3
 8007482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007486:	2200      	movs	r2, #0
 8007488:	643b      	str	r3, [r7, #64]	@ 0x40
 800748a:	647a      	str	r2, [r7, #68]	@ 0x44
 800748c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007490:	f7f9 f8c6 	bl	8000620 <__aeabi_uldivmod>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4613      	mov	r3, r2
 800749a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800749e:	4b60      	ldr	r3, [pc, #384]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	f003 0303 	and.w	r3, r3, #3
 80074a8:	3301      	adds	r3, #1
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 80074b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80074c0:	e0a6      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074c2:	4b57      	ldr	r3, [pc, #348]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074ce:	4b54      	ldr	r3, [pc, #336]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d02a      	beq.n	8007530 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074da:	4b51      	ldr	r3, [pc, #324]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	099b      	lsrs	r3, r3, #6
 80074e0:	2200      	movs	r2, #0
 80074e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80074ec:	2100      	movs	r1, #0
 80074ee:	4b4e      	ldr	r3, [pc, #312]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x350>)
 80074f0:	fb03 f201 	mul.w	r2, r3, r1
 80074f4:	2300      	movs	r3, #0
 80074f6:	fb00 f303 	mul.w	r3, r0, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	4a4a      	ldr	r2, [pc, #296]	@ (8007628 <HAL_RCC_GetSysClockFreq+0x350>)
 80074fe:	fba0 1202 	umull	r1, r2, r0, r2
 8007502:	677a      	str	r2, [r7, #116]	@ 0x74
 8007504:	460a      	mov	r2, r1
 8007506:	673a      	str	r2, [r7, #112]	@ 0x70
 8007508:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800750a:	4413      	add	r3, r2
 800750c:	677b      	str	r3, [r7, #116]	@ 0x74
 800750e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007512:	2200      	movs	r2, #0
 8007514:	633b      	str	r3, [r7, #48]	@ 0x30
 8007516:	637a      	str	r2, [r7, #52]	@ 0x34
 8007518:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800751c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007520:	f7f9 f87e 	bl	8000620 <__aeabi_uldivmod>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4613      	mov	r3, r2
 800752a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800752e:	e05b      	b.n	80075e8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007530:	4b3b      	ldr	r3, [pc, #236]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	099b      	lsrs	r3, r3, #6
 8007536:	2200      	movs	r2, #0
 8007538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800753a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800753c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	623b      	str	r3, [r7, #32]
 8007544:	2300      	movs	r3, #0
 8007546:	627b      	str	r3, [r7, #36]	@ 0x24
 8007548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	f04f 0000 	mov.w	r0, #0
 8007554:	f04f 0100 	mov.w	r1, #0
 8007558:	0159      	lsls	r1, r3, #5
 800755a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800755e:	0150      	lsls	r0, r2, #5
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4641      	mov	r1, r8
 8007566:	ebb2 0a01 	subs.w	sl, r2, r1
 800756a:	4649      	mov	r1, r9
 800756c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800757c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007584:	ebb2 040a 	subs.w	r4, r2, sl
 8007588:	eb63 050b 	sbc.w	r5, r3, fp
 800758c:	f04f 0200 	mov.w	r2, #0
 8007590:	f04f 0300 	mov.w	r3, #0
 8007594:	00eb      	lsls	r3, r5, #3
 8007596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800759a:	00e2      	lsls	r2, r4, #3
 800759c:	4614      	mov	r4, r2
 800759e:	461d      	mov	r5, r3
 80075a0:	4643      	mov	r3, r8
 80075a2:	18e3      	adds	r3, r4, r3
 80075a4:	603b      	str	r3, [r7, #0]
 80075a6:	464b      	mov	r3, r9
 80075a8:	eb45 0303 	adc.w	r3, r5, r3
 80075ac:	607b      	str	r3, [r7, #4]
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	f04f 0300 	mov.w	r3, #0
 80075b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075ba:	4629      	mov	r1, r5
 80075bc:	028b      	lsls	r3, r1, #10
 80075be:	4621      	mov	r1, r4
 80075c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075c4:	4621      	mov	r1, r4
 80075c6:	028a      	lsls	r2, r1, #10
 80075c8:	4610      	mov	r0, r2
 80075ca:	4619      	mov	r1, r3
 80075cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075d0:	2200      	movs	r2, #0
 80075d2:	61bb      	str	r3, [r7, #24]
 80075d4:	61fa      	str	r2, [r7, #28]
 80075d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075da:	f7f9 f821 	bl	8000620 <__aeabi_uldivmod>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4613      	mov	r3, r2
 80075e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80075e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x348>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	0f1b      	lsrs	r3, r3, #28
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80075f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80075fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007606:	e003      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007608:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <HAL_RCC_GetSysClockFreq+0x34c>)
 800760a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800760e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007610:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8007614:	4618      	mov	r0, r3
 8007616:	3798      	adds	r7, #152	@ 0x98
 8007618:	46bd      	mov	sp, r7
 800761a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800761e:	bf00      	nop
 8007620:	40023800 	.word	0x40023800
 8007624:	00f42400 	.word	0x00f42400
 8007628:	016e3600 	.word	0x016e3600

0800762c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e28d      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 8083 	beq.w	8007752 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800764c:	4b94      	ldr	r3, [pc, #592]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 030c 	and.w	r3, r3, #12
 8007654:	2b04      	cmp	r3, #4
 8007656:	d019      	beq.n	800768c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007658:	4b91      	ldr	r3, [pc, #580]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007660:	2b08      	cmp	r3, #8
 8007662:	d106      	bne.n	8007672 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007664:	4b8e      	ldr	r3, [pc, #568]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800766c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007670:	d00c      	beq.n	800768c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007672:	4b8b      	ldr	r3, [pc, #556]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800767a:	2b0c      	cmp	r3, #12
 800767c:	d112      	bne.n	80076a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800767e:	4b88      	ldr	r3, [pc, #544]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800768a:	d10b      	bne.n	80076a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800768c:	4b84      	ldr	r3, [pc, #528]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d05b      	beq.n	8007750 <HAL_RCC_OscConfig+0x124>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d157      	bne.n	8007750 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e25a      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ac:	d106      	bne.n	80076bc <HAL_RCC_OscConfig+0x90>
 80076ae:	4b7c      	ldr	r3, [pc, #496]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a7b      	ldr	r2, [pc, #492]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	e01d      	b.n	80076f8 <HAL_RCC_OscConfig+0xcc>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076c4:	d10c      	bne.n	80076e0 <HAL_RCC_OscConfig+0xb4>
 80076c6:	4b76      	ldr	r3, [pc, #472]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a75      	ldr	r2, [pc, #468]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	4b73      	ldr	r3, [pc, #460]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a72      	ldr	r2, [pc, #456]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e00b      	b.n	80076f8 <HAL_RCC_OscConfig+0xcc>
 80076e0:	4b6f      	ldr	r3, [pc, #444]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a6e      	ldr	r2, [pc, #440]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	4b6c      	ldr	r3, [pc, #432]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a6b      	ldr	r2, [pc, #428]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80076f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d013      	beq.n	8007728 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fc f80e 	bl	8003720 <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007708:	f7fc f80a 	bl	8003720 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b64      	cmp	r3, #100	@ 0x64
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e21f      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800771a:	4b61      	ldr	r3, [pc, #388]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0xdc>
 8007726:	e014      	b.n	8007752 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007728:	f7fb fffa 	bl	8003720 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007730:	f7fb fff6 	bl	8003720 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b64      	cmp	r3, #100	@ 0x64
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e20b      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007742:	4b57      	ldr	r3, [pc, #348]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x104>
 800774e:	e000      	b.n	8007752 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d06f      	beq.n	800783e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800775e:	4b50      	ldr	r3, [pc, #320]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 030c 	and.w	r3, r3, #12
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800776a:	4b4d      	ldr	r3, [pc, #308]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007772:	2b08      	cmp	r3, #8
 8007774:	d105      	bne.n	8007782 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007776:	4b4a      	ldr	r3, [pc, #296]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007782:	4b47      	ldr	r3, [pc, #284]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800778a:	2b0c      	cmp	r3, #12
 800778c:	d11c      	bne.n	80077c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800778e:	4b44      	ldr	r3, [pc, #272]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d116      	bne.n	80077c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800779a:	4b41      	ldr	r3, [pc, #260]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <HAL_RCC_OscConfig+0x186>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d001      	beq.n	80077b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e1d3      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b2:	4b3b      	ldr	r3, [pc, #236]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4937      	ldr	r1, [pc, #220]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077c6:	e03a      	b.n	800783e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d020      	beq.n	8007812 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077d0:	4b34      	ldr	r3, [pc, #208]	@ (80078a4 <HAL_RCC_OscConfig+0x278>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d6:	f7fb ffa3 	bl	8003720 <HAL_GetTick>
 80077da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077dc:	e008      	b.n	80077f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077de:	f7fb ff9f 	bl	8003720 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d901      	bls.n	80077f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e1b4      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f0:	4b2b      	ldr	r3, [pc, #172]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0f0      	beq.n	80077de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077fc:	4b28      	ldr	r3, [pc, #160]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	4925      	ldr	r1, [pc, #148]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 800780c:	4313      	orrs	r3, r2
 800780e:	600b      	str	r3, [r1, #0]
 8007810:	e015      	b.n	800783e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007812:	4b24      	ldr	r3, [pc, #144]	@ (80078a4 <HAL_RCC_OscConfig+0x278>)
 8007814:	2200      	movs	r2, #0
 8007816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007818:	f7fb ff82 	bl	8003720 <HAL_GetTick>
 800781c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800781e:	e008      	b.n	8007832 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007820:	f7fb ff7e 	bl	8003720 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e193      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007832:	4b1b      	ldr	r3, [pc, #108]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f0      	bne.n	8007820 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b00      	cmp	r3, #0
 8007848:	d036      	beq.n	80078b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d016      	beq.n	8007880 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007852:	4b15      	ldr	r3, [pc, #84]	@ (80078a8 <HAL_RCC_OscConfig+0x27c>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007858:	f7fb ff62 	bl	8003720 <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800785e:	e008      	b.n	8007872 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007860:	f7fb ff5e 	bl	8003720 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e173      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007872:	4b0b      	ldr	r3, [pc, #44]	@ (80078a0 <HAL_RCC_OscConfig+0x274>)
 8007874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f0      	beq.n	8007860 <HAL_RCC_OscConfig+0x234>
 800787e:	e01b      	b.n	80078b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007880:	4b09      	ldr	r3, [pc, #36]	@ (80078a8 <HAL_RCC_OscConfig+0x27c>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007886:	f7fb ff4b 	bl	8003720 <HAL_GetTick>
 800788a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800788c:	e00e      	b.n	80078ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800788e:	f7fb ff47 	bl	8003720 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b02      	cmp	r3, #2
 800789a:	d907      	bls.n	80078ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e15c      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
 80078a0:	40023800 	.word	0x40023800
 80078a4:	42470000 	.word	0x42470000
 80078a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078ac:	4b8a      	ldr	r3, [pc, #552]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80078ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1ea      	bne.n	800788e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8097 	beq.w	80079f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078c6:	2300      	movs	r3, #0
 80078c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078ca:	4b83      	ldr	r3, [pc, #524]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80078cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10f      	bne.n	80078f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	4b7f      	ldr	r3, [pc, #508]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	4a7e      	ldr	r2, [pc, #504]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80078e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80078e6:	4b7c      	ldr	r3, [pc, #496]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ee:	60bb      	str	r3, [r7, #8]
 80078f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078f2:	2301      	movs	r3, #1
 80078f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078f6:	4b79      	ldr	r3, [pc, #484]	@ (8007adc <HAL_RCC_OscConfig+0x4b0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d118      	bne.n	8007934 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007902:	4b76      	ldr	r3, [pc, #472]	@ (8007adc <HAL_RCC_OscConfig+0x4b0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a75      	ldr	r2, [pc, #468]	@ (8007adc <HAL_RCC_OscConfig+0x4b0>)
 8007908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800790c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800790e:	f7fb ff07 	bl	8003720 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007916:	f7fb ff03 	bl	8003720 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e118      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007928:	4b6c      	ldr	r3, [pc, #432]	@ (8007adc <HAL_RCC_OscConfig+0x4b0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d106      	bne.n	800794a <HAL_RCC_OscConfig+0x31e>
 800793c:	4b66      	ldr	r3, [pc, #408]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 800793e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007940:	4a65      	ldr	r2, [pc, #404]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	6713      	str	r3, [r2, #112]	@ 0x70
 8007948:	e01c      	b.n	8007984 <HAL_RCC_OscConfig+0x358>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b05      	cmp	r3, #5
 8007950:	d10c      	bne.n	800796c <HAL_RCC_OscConfig+0x340>
 8007952:	4b61      	ldr	r3, [pc, #388]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007956:	4a60      	ldr	r2, [pc, #384]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007958:	f043 0304 	orr.w	r3, r3, #4
 800795c:	6713      	str	r3, [r2, #112]	@ 0x70
 800795e:	4b5e      	ldr	r3, [pc, #376]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007962:	4a5d      	ldr	r2, [pc, #372]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007964:	f043 0301 	orr.w	r3, r3, #1
 8007968:	6713      	str	r3, [r2, #112]	@ 0x70
 800796a:	e00b      	b.n	8007984 <HAL_RCC_OscConfig+0x358>
 800796c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 800796e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007970:	4a59      	ldr	r2, [pc, #356]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007972:	f023 0301 	bic.w	r3, r3, #1
 8007976:	6713      	str	r3, [r2, #112]	@ 0x70
 8007978:	4b57      	ldr	r3, [pc, #348]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 800797a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797c:	4a56      	ldr	r2, [pc, #344]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 800797e:	f023 0304 	bic.w	r3, r3, #4
 8007982:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d015      	beq.n	80079b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800798c:	f7fb fec8 	bl	8003720 <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007992:	e00a      	b.n	80079aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007994:	f7fb fec4 	bl	8003720 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e0d7      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079aa:	4b4b      	ldr	r3, [pc, #300]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80079ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0ee      	beq.n	8007994 <HAL_RCC_OscConfig+0x368>
 80079b6:	e014      	b.n	80079e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b8:	f7fb feb2 	bl	8003720 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079be:	e00a      	b.n	80079d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079c0:	f7fb feae 	bl	8003720 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e0c1      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d6:	4b40      	ldr	r3, [pc, #256]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1ee      	bne.n	80079c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d105      	bne.n	80079f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079e8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	4a3a      	ldr	r2, [pc, #232]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 80079ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80ad 	beq.w	8007b58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079fe:	4b36      	ldr	r3, [pc, #216]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 030c 	and.w	r3, r3, #12
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d060      	beq.n	8007acc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d145      	bne.n	8007a9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a12:	4b33      	ldr	r3, [pc, #204]	@ (8007ae0 <HAL_RCC_OscConfig+0x4b4>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a18:	f7fb fe82 	bl	8003720 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a20:	f7fb fe7e 	bl	8003720 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e093      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a32:	4b29      	ldr	r3, [pc, #164]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f0      	bne.n	8007a20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69da      	ldr	r2, [r3, #28]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4c:	019b      	lsls	r3, r3, #6
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a54:	085b      	lsrs	r3, r3, #1
 8007a56:	3b01      	subs	r3, #1
 8007a58:	041b      	lsls	r3, r3, #16
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a60:	061b      	lsls	r3, r3, #24
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	071b      	lsls	r3, r3, #28
 8007a6a:	491b      	ldr	r1, [pc, #108]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a70:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <HAL_RCC_OscConfig+0x4b4>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a76:	f7fb fe53 	bl	8003720 <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a7e:	f7fb fe4f 	bl	8003720 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e064      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a90:	4b11      	ldr	r3, [pc, #68]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <HAL_RCC_OscConfig+0x452>
 8007a9c:	e05c      	b.n	8007b58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ae0 <HAL_RCC_OscConfig+0x4b4>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa4:	f7fb fe3c 	bl	8003720 <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aac:	f7fb fe38 	bl	8003720 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e04d      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007abe:	4b06      	ldr	r3, [pc, #24]	@ (8007ad8 <HAL_RCC_OscConfig+0x4ac>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1f0      	bne.n	8007aac <HAL_RCC_OscConfig+0x480>
 8007aca:	e045      	b.n	8007b58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d107      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e040      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	40007000 	.word	0x40007000
 8007ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8007b64 <HAL_RCC_OscConfig+0x538>)
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d030      	beq.n	8007b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d129      	bne.n	8007b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d122      	bne.n	8007b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007b14:	4013      	ands	r3, r2
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d119      	bne.n	8007b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d10f      	bne.n	8007b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d107      	bne.n	8007b54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d001      	beq.n	8007b58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e000      	b.n	8007b5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	40023800 	.word	0x40023800

08007b68 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e10c      	b.n	8007da4 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fa fff2 	bl	8002b88 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f903 	bl	8007db8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f938 	bl	8007e28 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d030      	beq.n	8007c22 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f975 	bl	8007eb0 <SAI_GetInputClock>
 8007bc6:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	025b      	lsls	r3, r3, #9
 8007bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bde:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4a72      	ldr	r2, [pc, #456]	@ (8007dac <HAL_SAI_Init+0x244>)
 8007be4:	fba2 2303 	umull	r2, r3, r2, r3
 8007be8:	08da      	lsrs	r2, r3, #3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8007bee:	68f9      	ldr	r1, [r7, #12]
 8007bf0:	4b6e      	ldr	r3, [pc, #440]	@ (8007dac <HAL_SAI_Init+0x244>)
 8007bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8007bf6:	08da      	lsrs	r2, r3, #3
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	1aca      	subs	r2, r1, r3
 8007c02:	2a08      	cmp	r2, #8
 8007c04:	d904      	bls.n	8007c10 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d104      	bne.n	8007c22 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1c:	085a      	lsrs	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_SAI_Init+0xca>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d109      	bne.n	8007c46 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <HAL_SAI_Init+0xd6>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e001      	b.n	8007c42 <HAL_SAI_Init+0xda>
 8007c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	e008      	b.n	8007c58 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d102      	bne.n	8007c54 <HAL_SAI_Init+0xec>
 8007c4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c52:	e000      	b.n	8007c56 <HAL_SAI_Init+0xee>
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d811      	bhi.n	8007c84 <HAL_SAI_Init+0x11c>
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d20b      	bcs.n	8007c7c <HAL_SAI_Init+0x114>
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <HAL_SAI_Init+0x106>
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d003      	beq.n	8007c74 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007c6c:	e00a      	b.n	8007c84 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	613b      	str	r3, [r7, #16]
    break;
 8007c72:	e008      	b.n	8007c86 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c78:	613b      	str	r3, [r7, #16]
    break;
 8007c7a:	e004      	b.n	8007c86 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007c80:	613b      	str	r3, [r7, #16]
    break;
 8007c82:	e000      	b.n	8007c86 <HAL_SAI_Init+0x11e>
      break;
 8007c84:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6819      	ldr	r1, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	4b47      	ldr	r3, [pc, #284]	@ (8007db0 <HAL_SAI_Init+0x248>)
 8007c92:	400b      	ands	r3, r1
 8007c94:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6819      	ldr	r1, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007caa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007cbe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007cca:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	051b      	lsls	r3, r3, #20
 8007cd2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6812      	ldr	r2, [r2, #0]
 8007ce6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007cea:	f023 030f 	bic.w	r3, r3, #15
 8007cee:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6859      	ldr	r1, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6899      	ldr	r1, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	4b26      	ldr	r3, [pc, #152]	@ (8007db4 <HAL_SAI_Init+0x24c>)
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6899      	ldr	r1, [r3, #8]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d28:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d2e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007d34:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007d3a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d40:	3b01      	subs	r3, #1
 8007d42:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007d44:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68d9      	ldr	r1, [r3, #12]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007d5c:	400b      	ands	r3, r1
 8007d5e:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68d9      	ldr	r1, [r3, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d6e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d74:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007d76:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	cccccccd 	.word	0xcccccccd
 8007db0:	ff05c010 	.word	0xff05c010
 8007db4:	fff88000 	.word	0xfff88000

08007db8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007dc0:	4b17      	ldr	r3, [pc, #92]	@ (8007e20 <SAI_Disable+0x68>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a17      	ldr	r2, [pc, #92]	@ (8007e24 <SAI_Disable+0x6c>)
 8007dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dca:	0b1b      	lsrs	r3, r3, #12
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007de2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	1e5a      	subs	r2, r3, #1
 8007de8:	60fa      	str	r2, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007df4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	72fb      	strb	r3, [r7, #11]
      break;
 8007e02:	e006      	b.n	8007e12 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e8      	bne.n	8007de4 <SAI_Disable+0x2c>

  return status;
 8007e12:	7afb      	ldrb	r3, [r7, #11]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000010 	.word	0x20000010
 8007e24:	95cbec1b 	.word	0x95cbec1b

08007e28 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d00c      	beq.n	8007e52 <SAI_BlockSynchroConfig+0x2a>
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d80d      	bhi.n	8007e58 <SAI_BlockSynchroConfig+0x30>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <SAI_BlockSynchroConfig+0x1e>
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d003      	beq.n	8007e4c <SAI_BlockSynchroConfig+0x24>
 8007e44:	e008      	b.n	8007e58 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
      break;
 8007e4a:	e008      	b.n	8007e5e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007e4c:	2310      	movs	r3, #16
 8007e4e:	60fb      	str	r3, [r7, #12]
      break;
 8007e50:	e005      	b.n	8007e5e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007e52:	2320      	movs	r3, #32
 8007e54:	60fb      	str	r3, [r7, #12]
      break;
 8007e56:	e002      	b.n	8007e5e <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]
      break;
 8007e5c:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d103      	bne.n	8007e6e <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f043 0301 	orr.w	r3, r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a0b      	ldr	r2, [pc, #44]	@ (8007ea0 <SAI_BlockSynchroConfig+0x78>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <SAI_BlockSynchroConfig+0x5a>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a09      	ldr	r2, [pc, #36]	@ (8007ea4 <SAI_BlockSynchroConfig+0x7c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d103      	bne.n	8007e8a <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 8007e82:	4a09      	ldr	r2, [pc, #36]	@ (8007ea8 <SAI_BlockSynchroConfig+0x80>)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	e003      	b.n	8007e92 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007e8a:	4a08      	ldr	r2, [pc, #32]	@ (8007eac <SAI_BlockSynchroConfig+0x84>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40015804 	.word	0x40015804
 8007ea4:	40015824 	.word	0x40015824
 8007ea8:	40015800 	.word	0x40015800
 8007eac:	40015c00 	.word	0x40015c00

08007eb0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8007eec <SAI_GetInputClock+0x3c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <SAI_GetInputClock+0x20>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a09      	ldr	r2, [pc, #36]	@ (8007ef0 <SAI_GetInputClock+0x40>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d104      	bne.n	8007eda <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007ed0:	2004      	movs	r0, #4
 8007ed2:	f7fe ffb7 	bl	8006e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	e003      	b.n	8007ee2 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007eda:	2008      	movs	r0, #8
 8007edc:	f7fe ffb2 	bl	8006e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ee0:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	40015804 	.word	0x40015804
 8007ef0:	40015824 	.word	0x40015824

08007ef4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e07b      	b.n	8007ffe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d108      	bne.n	8007f20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f16:	d009      	beq.n	8007f2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	61da      	str	r2, [r3, #28]
 8007f1e:	e005      	b.n	8007f2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fa ff1c 	bl	8002d84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0302 	and.w	r3, r3, #2
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fb0:	ea42 0103 	orr.w	r1, r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	0c1b      	lsrs	r3, r3, #16
 8007fca:	f003 0104 	and.w	r1, r3, #4
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd2:	f003 0210 	and.w	r2, r3, #16
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b088      	sub	sp, #32
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_SPI_Transmit+0x22>
 8008024:	2302      	movs	r3, #2
 8008026:	e12d      	b.n	8008284 <HAL_SPI_Transmit+0x27e>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008030:	f7fb fb76 	bl	8003720 <HAL_GetTick>
 8008034:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b01      	cmp	r3, #1
 8008044:	d002      	beq.n	800804c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008046:	2302      	movs	r3, #2
 8008048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800804a:	e116      	b.n	800827a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <HAL_SPI_Transmit+0x52>
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d102      	bne.n	800805e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800805c:	e10d      	b.n	800827a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2203      	movs	r2, #3
 8008062:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	88fa      	ldrh	r2, [r7, #6]
 8008076:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	88fa      	ldrh	r2, [r7, #6]
 800807c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080a4:	d10f      	bne.n	80080c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d0:	2b40      	cmp	r3, #64	@ 0x40
 80080d2:	d007      	beq.n	80080e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ec:	d14f      	bne.n	800818e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <HAL_SPI_Transmit+0xf6>
 80080f6:	8afb      	ldrh	r3, [r7, #22]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d142      	bne.n	8008182 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008100:	881a      	ldrh	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810c:	1c9a      	adds	r2, r3, #2
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008120:	e02f      	b.n	8008182 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b02      	cmp	r3, #2
 800812e:	d112      	bne.n	8008156 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008134:	881a      	ldrh	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008140:	1c9a      	adds	r2, r3, #2
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008154:	e015      	b.n	8008182 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008156:	f7fb fae3 	bl	8003720 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d803      	bhi.n	800816e <HAL_SPI_Transmit+0x168>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816c:	d102      	bne.n	8008174 <HAL_SPI_Transmit+0x16e>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008180:	e07b      	b.n	800827a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1ca      	bne.n	8008122 <HAL_SPI_Transmit+0x11c>
 800818c:	e050      	b.n	8008230 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <HAL_SPI_Transmit+0x196>
 8008196:	8afb      	ldrh	r3, [r7, #22]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d144      	bne.n	8008226 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80081c2:	e030      	b.n	8008226 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d113      	bne.n	80081fa <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	330c      	adds	r3, #12
 80081dc:	7812      	ldrb	r2, [r2, #0]
 80081de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80081f8:	e015      	b.n	8008226 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081fa:	f7fb fa91 	bl	8003720 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d803      	bhi.n	8008212 <HAL_SPI_Transmit+0x20c>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008210:	d102      	bne.n	8008218 <HAL_SPI_Transmit+0x212>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008224:	e029      	b.n	800827a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1c9      	bne.n	80081c4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 fa61 	bl	80086fc <SPI_EndRxTxTransaction>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2220      	movs	r2, #32
 8008244:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10a      	bne.n	8008264 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800824e:	2300      	movs	r3, #0
 8008250:	613b      	str	r3, [r7, #16]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	77fb      	strb	r3, [r7, #31]
 8008270:	e003      	b.n	800827a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008282:	7ffb      	ldrb	r3, [r7, #31]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3720      	adds	r7, #32
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08c      	sub	sp, #48	@ 0x30
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800829a:	2301      	movs	r3, #1
 800829c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <HAL_SPI_TransmitReceive+0x26>
 80082ae:	2302      	movs	r3, #2
 80082b0:	e198      	b.n	80085e4 <HAL_SPI_TransmitReceive+0x358>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082ba:	f7fb fa31 	bl	8003720 <HAL_GetTick>
 80082be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80082d0:	887b      	ldrh	r3, [r7, #2]
 80082d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80082d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d00f      	beq.n	80082fc <HAL_SPI_TransmitReceive+0x70>
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082e2:	d107      	bne.n	80082f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d103      	bne.n	80082f4 <HAL_SPI_TransmitReceive+0x68>
 80082ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d003      	beq.n	80082fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80082f4:	2302      	movs	r3, #2
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80082fa:	e16d      	b.n	80085d8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <HAL_SPI_TransmitReceive+0x82>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <HAL_SPI_TransmitReceive+0x82>
 8008308:	887b      	ldrh	r3, [r7, #2]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d103      	bne.n	8008316 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008314:	e160      	b.n	80085d8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b04      	cmp	r3, #4
 8008320:	d003      	beq.n	800832a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2205      	movs	r2, #5
 8008326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	887a      	ldrh	r2, [r7, #2]
 800833a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	887a      	ldrh	r2, [r7, #2]
 8008340:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	887a      	ldrh	r2, [r7, #2]
 800834c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	887a      	ldrh	r2, [r7, #2]
 8008352:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800836a:	2b40      	cmp	r3, #64	@ 0x40
 800836c:	d007      	beq.n	800837e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800837c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008386:	d17c      	bne.n	8008482 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <HAL_SPI_TransmitReceive+0x10a>
 8008390:	8b7b      	ldrh	r3, [r7, #26]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d16a      	bne.n	800846c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800839a:	881a      	ldrh	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a6:	1c9a      	adds	r2, r3, #2
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083ba:	e057      	b.n	800846c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d11b      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x176>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d016      	beq.n	8008402 <HAL_SPI_TransmitReceive+0x176>
 80083d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d113      	bne.n	8008402 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083de:	881a      	ldrh	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ea:	1c9a      	adds	r2, r3, #2
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b01      	cmp	r3, #1
 800840e:	d119      	bne.n	8008444 <HAL_SPI_TransmitReceive+0x1b8>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d014      	beq.n	8008444 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	b292      	uxth	r2, r2
 8008426:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842c:	1c9a      	adds	r2, r3, #2
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008440:	2301      	movs	r3, #1
 8008442:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008444:	f7fb f96c 	bl	8003720 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008450:	429a      	cmp	r2, r3
 8008452:	d80b      	bhi.n	800846c <HAL_SPI_TransmitReceive+0x1e0>
 8008454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845a:	d007      	beq.n	800846c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800846a:	e0b5      	b.n	80085d8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1a2      	bne.n	80083bc <HAL_SPI_TransmitReceive+0x130>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d19d      	bne.n	80083bc <HAL_SPI_TransmitReceive+0x130>
 8008480:	e080      	b.n	8008584 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_SPI_TransmitReceive+0x204>
 800848a:	8b7b      	ldrh	r3, [r7, #26]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d16f      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	330c      	adds	r3, #12
 800849a:	7812      	ldrb	r2, [r2, #0]
 800849c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084b6:	e05b      	b.n	8008570 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d11c      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x274>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d017      	beq.n	8008500 <HAL_SPI_TransmitReceive+0x274>
 80084d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d114      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	330c      	adds	r3, #12
 80084e0:	7812      	ldrb	r2, [r2, #0]
 80084e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b01      	cmp	r3, #1
 800850c:	d119      	bne.n	8008542 <HAL_SPI_TransmitReceive+0x2b6>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d014      	beq.n	8008542 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800853e:	2301      	movs	r3, #1
 8008540:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008542:	f7fb f8ed 	bl	8003720 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800854e:	429a      	cmp	r2, r3
 8008550:	d803      	bhi.n	800855a <HAL_SPI_TransmitReceive+0x2ce>
 8008552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d102      	bne.n	8008560 <HAL_SPI_TransmitReceive+0x2d4>
 800855a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855c:	2b00      	cmp	r3, #0
 800855e:	d107      	bne.n	8008570 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800856e:	e033      	b.n	80085d8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d19e      	bne.n	80084b8 <HAL_SPI_TransmitReceive+0x22c>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d199      	bne.n	80084b8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008586:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 f8b7 	bl	80086fc <SPI_EndRxTxTransaction>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2220      	movs	r2, #32
 800859e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80085a0:	e01a      	b.n	80085d8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ce:	e003      	b.n	80085d8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80085e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3730      	adds	r7, #48	@ 0x30
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	4613      	mov	r3, r2
 80085fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085fc:	f7fb f890 	bl	8003720 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	4413      	add	r3, r2
 800860a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800860c:	f7fb f888 	bl	8003720 <HAL_GetTick>
 8008610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008612:	4b39      	ldr	r3, [pc, #228]	@ (80086f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	015b      	lsls	r3, r3, #5
 8008618:	0d1b      	lsrs	r3, r3, #20
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	fb02 f303 	mul.w	r3, r2, r3
 8008620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008622:	e054      	b.n	80086ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862a:	d050      	beq.n	80086ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800862c:	f7fb f878 	bl	8003720 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	69fa      	ldr	r2, [r7, #28]
 8008638:	429a      	cmp	r2, r3
 800863a:	d902      	bls.n	8008642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d13d      	bne.n	80086be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800865a:	d111      	bne.n	8008680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008664:	d004      	beq.n	8008670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800866e:	d107      	bne.n	8008680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800867e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008688:	d10f      	bne.n	80086aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80086a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e017      	b.n	80086ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4013      	ands	r3, r2
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	429a      	cmp	r2, r3
 80086dc:	bf0c      	ite	eq
 80086de:	2301      	moveq	r3, #1
 80086e0:	2300      	movne	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d19b      	bne.n	8008624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000010 	.word	0x20000010

080086fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af02      	add	r7, sp, #8
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2201      	movs	r2, #1
 8008710:	2102      	movs	r1, #2
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7ff ff6a 	bl	80085ec <SPI_WaitFlagStateUntilTimeout>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008722:	f043 0220 	orr.w	r2, r3, #32
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e032      	b.n	8008794 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800872e:	4b1b      	ldr	r3, [pc, #108]	@ (800879c <SPI_EndRxTxTransaction+0xa0>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1b      	ldr	r2, [pc, #108]	@ (80087a0 <SPI_EndRxTxTransaction+0xa4>)
 8008734:	fba2 2303 	umull	r2, r3, r2, r3
 8008738:	0d5b      	lsrs	r3, r3, #21
 800873a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800874c:	d112      	bne.n	8008774 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2200      	movs	r2, #0
 8008756:	2180      	movs	r1, #128	@ 0x80
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7ff ff47 	bl	80085ec <SPI_WaitFlagStateUntilTimeout>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d016      	beq.n	8008792 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008768:	f043 0220 	orr.w	r2, r3, #32
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e00f      	b.n	8008794 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	3b01      	subs	r3, #1
 800877e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800878a:	2b80      	cmp	r3, #128	@ 0x80
 800878c:	d0f2      	beq.n	8008774 <SPI_EndRxTxTransaction+0x78>
 800878e:	e000      	b.n	8008792 <SPI_EndRxTxTransaction+0x96>
        break;
 8008790:	bf00      	nop
  }

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000010 	.word	0x20000010
 80087a0:	165e9f81 	.word	0x165e9f81

080087a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e041      	b.n	800883a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7fa fe34 	bl	8003438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3304      	adds	r3, #4
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f000 fbec 	bl	8008fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b01      	cmp	r3, #1
 8008856:	d001      	beq.n	800885c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e046      	b.n	80088ea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a23      	ldr	r2, [pc, #140]	@ (80088f8 <HAL_TIM_Base_Start+0xb4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d022      	beq.n	80088b4 <HAL_TIM_Base_Start+0x70>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008876:	d01d      	beq.n	80088b4 <HAL_TIM_Base_Start+0x70>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a1f      	ldr	r2, [pc, #124]	@ (80088fc <HAL_TIM_Base_Start+0xb8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d018      	beq.n	80088b4 <HAL_TIM_Base_Start+0x70>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a1e      	ldr	r2, [pc, #120]	@ (8008900 <HAL_TIM_Base_Start+0xbc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d013      	beq.n	80088b4 <HAL_TIM_Base_Start+0x70>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a1c      	ldr	r2, [pc, #112]	@ (8008904 <HAL_TIM_Base_Start+0xc0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00e      	beq.n	80088b4 <HAL_TIM_Base_Start+0x70>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a1b      	ldr	r2, [pc, #108]	@ (8008908 <HAL_TIM_Base_Start+0xc4>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d009      	beq.n	80088b4 <HAL_TIM_Base_Start+0x70>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a19      	ldr	r2, [pc, #100]	@ (800890c <HAL_TIM_Base_Start+0xc8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d004      	beq.n	80088b4 <HAL_TIM_Base_Start+0x70>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a18      	ldr	r2, [pc, #96]	@ (8008910 <HAL_TIM_Base_Start+0xcc>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d111      	bne.n	80088d8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b06      	cmp	r3, #6
 80088c4:	d010      	beq.n	80088e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0201 	orr.w	r2, r2, #1
 80088d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d6:	e007      	b.n	80088e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0201 	orr.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	40010000 	.word	0x40010000
 80088fc:	40000400 	.word	0x40000400
 8008900:	40000800 	.word	0x40000800
 8008904:	40000c00 	.word	0x40000c00
 8008908:	40010400 	.word	0x40010400
 800890c:	40014000 	.word	0x40014000
 8008910:	40001800 	.word	0x40001800

08008914 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e041      	b.n	80089aa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d106      	bne.n	8008940 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f839 	bl	80089b2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3304      	adds	r3, #4
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f000 fb34 	bl	8008fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e041      	b.n	8008a5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fa fd45 	bl	800347c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2202      	movs	r2, #2
 80089f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	3304      	adds	r3, #4
 8008a02:	4619      	mov	r1, r3
 8008a04:	4610      	mov	r0, r2
 8008a06:	f000 fadb 	bl	8008fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <HAL_TIM_PWM_Start+0x24>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	bf14      	ite	ne
 8008a80:	2301      	movne	r3, #1
 8008a82:	2300      	moveq	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	e022      	b.n	8008ace <HAL_TIM_PWM_Start+0x6a>
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d109      	bne.n	8008aa2 <HAL_TIM_PWM_Start+0x3e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	bf14      	ite	ne
 8008a9a:	2301      	movne	r3, #1
 8008a9c:	2300      	moveq	r3, #0
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	e015      	b.n	8008ace <HAL_TIM_PWM_Start+0x6a>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	d109      	bne.n	8008abc <HAL_TIM_PWM_Start+0x58>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	bf14      	ite	ne
 8008ab4:	2301      	movne	r3, #1
 8008ab6:	2300      	moveq	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	e008      	b.n	8008ace <HAL_TIM_PWM_Start+0x6a>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	bf14      	ite	ne
 8008ac8:	2301      	movne	r3, #1
 8008aca:	2300      	moveq	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e07c      	b.n	8008bd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <HAL_TIM_PWM_Start+0x82>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ae4:	e013      	b.n	8008b0e <HAL_TIM_PWM_Start+0xaa>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d104      	bne.n	8008af6 <HAL_TIM_PWM_Start+0x92>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008af4:	e00b      	b.n	8008b0e <HAL_TIM_PWM_Start+0xaa>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d104      	bne.n	8008b06 <HAL_TIM_PWM_Start+0xa2>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b04:	e003      	b.n	8008b0e <HAL_TIM_PWM_Start+0xaa>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2202      	movs	r2, #2
 8008b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2201      	movs	r2, #1
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fd48 	bl	80095ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a2d      	ldr	r2, [pc, #180]	@ (8008bd8 <HAL_TIM_PWM_Start+0x174>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d004      	beq.n	8008b30 <HAL_TIM_PWM_Start+0xcc>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bdc <HAL_TIM_PWM_Start+0x178>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d101      	bne.n	8008b34 <HAL_TIM_PWM_Start+0xd0>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <HAL_TIM_PWM_Start+0xd2>
 8008b34:	2300      	movs	r3, #0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a22      	ldr	r2, [pc, #136]	@ (8008bd8 <HAL_TIM_PWM_Start+0x174>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d022      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x136>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b5c:	d01d      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x136>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a1f      	ldr	r2, [pc, #124]	@ (8008be0 <HAL_TIM_PWM_Start+0x17c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d018      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x136>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008be4 <HAL_TIM_PWM_Start+0x180>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d013      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x136>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a1c      	ldr	r2, [pc, #112]	@ (8008be8 <HAL_TIM_PWM_Start+0x184>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d00e      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x136>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a16      	ldr	r2, [pc, #88]	@ (8008bdc <HAL_TIM_PWM_Start+0x178>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d009      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x136>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a18      	ldr	r2, [pc, #96]	@ (8008bec <HAL_TIM_PWM_Start+0x188>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d004      	beq.n	8008b9a <HAL_TIM_PWM_Start+0x136>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a16      	ldr	r2, [pc, #88]	@ (8008bf0 <HAL_TIM_PWM_Start+0x18c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d111      	bne.n	8008bbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b06      	cmp	r3, #6
 8008baa:	d010      	beq.n	8008bce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bbc:	e007      	b.n	8008bce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0201 	orr.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40010000 	.word	0x40010000
 8008bdc:	40010400 	.word	0x40010400
 8008be0:	40000400 	.word	0x40000400
 8008be4:	40000800 	.word	0x40000800
 8008be8:	40000c00 	.word	0x40000c00
 8008bec:	40014000 	.word	0x40014000
 8008bf0:	40001800 	.word	0x40001800

08008bf4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e048      	b.n	8008ca4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b0c      	cmp	r3, #12
 8008c1e:	d839      	bhi.n	8008c94 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008c20:	a201      	add	r2, pc, #4	@ (adr r2, 8008c28 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008c5d 	.word	0x08008c5d
 8008c2c:	08008c95 	.word	0x08008c95
 8008c30:	08008c95 	.word	0x08008c95
 8008c34:	08008c95 	.word	0x08008c95
 8008c38:	08008c6b 	.word	0x08008c6b
 8008c3c:	08008c95 	.word	0x08008c95
 8008c40:	08008c95 	.word	0x08008c95
 8008c44:	08008c95 	.word	0x08008c95
 8008c48:	08008c79 	.word	0x08008c79
 8008c4c:	08008c95 	.word	0x08008c95
 8008c50:	08008c95 	.word	0x08008c95
 8008c54:	08008c95 	.word	0x08008c95
 8008c58:	08008c87 	.word	0x08008c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fa58 	bl	8009118 <TIM_OC1_SetConfig>
      break;
 8008c68:	e017      	b.n	8008c9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fac1 	bl	80091f8 <TIM_OC2_SetConfig>
      break;
 8008c76:	e010      	b.n	8008c9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fb30 	bl	80092e4 <TIM_OC3_SetConfig>
      break;
 8008c84:	e009      	b.n	8008c9a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fb9d 	bl	80093cc <TIM_OC4_SetConfig>
      break;
 8008c92:	e002      	b.n	8008c9a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	75fb      	strb	r3, [r7, #23]
      break;
 8008c98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e0ae      	b.n	8008e28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b0c      	cmp	r3, #12
 8008cd6:	f200 809f 	bhi.w	8008e18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008cda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008d15 	.word	0x08008d15
 8008ce4:	08008e19 	.word	0x08008e19
 8008ce8:	08008e19 	.word	0x08008e19
 8008cec:	08008e19 	.word	0x08008e19
 8008cf0:	08008d55 	.word	0x08008d55
 8008cf4:	08008e19 	.word	0x08008e19
 8008cf8:	08008e19 	.word	0x08008e19
 8008cfc:	08008e19 	.word	0x08008e19
 8008d00:	08008d97 	.word	0x08008d97
 8008d04:	08008e19 	.word	0x08008e19
 8008d08:	08008e19 	.word	0x08008e19
 8008d0c:	08008e19 	.word	0x08008e19
 8008d10:	08008dd7 	.word	0x08008dd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68b9      	ldr	r1, [r7, #8]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 f9fc 	bl	8009118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699a      	ldr	r2, [r3, #24]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f042 0208 	orr.w	r2, r2, #8
 8008d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699a      	ldr	r2, [r3, #24]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0204 	bic.w	r2, r2, #4
 8008d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6999      	ldr	r1, [r3, #24]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	691a      	ldr	r2, [r3, #16]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	619a      	str	r2, [r3, #24]
      break;
 8008d52:	e064      	b.n	8008e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 fa4c 	bl	80091f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	699a      	ldr	r2, [r3, #24]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6999      	ldr	r1, [r3, #24]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	021a      	lsls	r2, r3, #8
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	619a      	str	r2, [r3, #24]
      break;
 8008d94:	e043      	b.n	8008e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 faa1 	bl	80092e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f042 0208 	orr.w	r2, r2, #8
 8008db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69da      	ldr	r2, [r3, #28]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0204 	bic.w	r2, r2, #4
 8008dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69d9      	ldr	r1, [r3, #28]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	691a      	ldr	r2, [r3, #16]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	61da      	str	r2, [r3, #28]
      break;
 8008dd4:	e023      	b.n	8008e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68b9      	ldr	r1, [r7, #8]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 faf5 	bl	80093cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69da      	ldr	r2, [r3, #28]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69da      	ldr	r2, [r3, #28]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	69d9      	ldr	r1, [r3, #28]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	021a      	lsls	r2, r3, #8
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	61da      	str	r2, [r3, #28]
      break;
 8008e16:	e002      	b.n	8008e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_TIM_ConfigClockSource+0x1c>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e0b4      	b.n	8008fb6 <HAL_TIM_ConfigClockSource+0x186>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e84:	d03e      	beq.n	8008f04 <HAL_TIM_ConfigClockSource+0xd4>
 8008e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e8a:	f200 8087 	bhi.w	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
 8008e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e92:	f000 8086 	beq.w	8008fa2 <HAL_TIM_ConfigClockSource+0x172>
 8008e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e9a:	d87f      	bhi.n	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
 8008e9c:	2b70      	cmp	r3, #112	@ 0x70
 8008e9e:	d01a      	beq.n	8008ed6 <HAL_TIM_ConfigClockSource+0xa6>
 8008ea0:	2b70      	cmp	r3, #112	@ 0x70
 8008ea2:	d87b      	bhi.n	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
 8008ea4:	2b60      	cmp	r3, #96	@ 0x60
 8008ea6:	d050      	beq.n	8008f4a <HAL_TIM_ConfigClockSource+0x11a>
 8008ea8:	2b60      	cmp	r3, #96	@ 0x60
 8008eaa:	d877      	bhi.n	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
 8008eac:	2b50      	cmp	r3, #80	@ 0x50
 8008eae:	d03c      	beq.n	8008f2a <HAL_TIM_ConfigClockSource+0xfa>
 8008eb0:	2b50      	cmp	r3, #80	@ 0x50
 8008eb2:	d873      	bhi.n	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
 8008eb4:	2b40      	cmp	r3, #64	@ 0x40
 8008eb6:	d058      	beq.n	8008f6a <HAL_TIM_ConfigClockSource+0x13a>
 8008eb8:	2b40      	cmp	r3, #64	@ 0x40
 8008eba:	d86f      	bhi.n	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
 8008ebc:	2b30      	cmp	r3, #48	@ 0x30
 8008ebe:	d064      	beq.n	8008f8a <HAL_TIM_ConfigClockSource+0x15a>
 8008ec0:	2b30      	cmp	r3, #48	@ 0x30
 8008ec2:	d86b      	bhi.n	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
 8008ec4:	2b20      	cmp	r3, #32
 8008ec6:	d060      	beq.n	8008f8a <HAL_TIM_ConfigClockSource+0x15a>
 8008ec8:	2b20      	cmp	r3, #32
 8008eca:	d867      	bhi.n	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d05c      	beq.n	8008f8a <HAL_TIM_ConfigClockSource+0x15a>
 8008ed0:	2b10      	cmp	r3, #16
 8008ed2:	d05a      	beq.n	8008f8a <HAL_TIM_ConfigClockSource+0x15a>
 8008ed4:	e062      	b.n	8008f9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ee6:	f000 fb41 	bl	800956c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ef8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	609a      	str	r2, [r3, #8]
      break;
 8008f02:	e04f      	b.n	8008fa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f14:	f000 fb2a 	bl	800956c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f26:	609a      	str	r2, [r3, #8]
      break;
 8008f28:	e03c      	b.n	8008fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f36:	461a      	mov	r2, r3
 8008f38:	f000 fa9e 	bl	8009478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2150      	movs	r1, #80	@ 0x50
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 faf7 	bl	8009536 <TIM_ITRx_SetConfig>
      break;
 8008f48:	e02c      	b.n	8008fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f56:	461a      	mov	r2, r3
 8008f58:	f000 fabd 	bl	80094d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2160      	movs	r1, #96	@ 0x60
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fae7 	bl	8009536 <TIM_ITRx_SetConfig>
      break;
 8008f68:	e01c      	b.n	8008fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f76:	461a      	mov	r2, r3
 8008f78:	f000 fa7e 	bl	8009478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2140      	movs	r1, #64	@ 0x40
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fad7 	bl	8009536 <TIM_ITRx_SetConfig>
      break;
 8008f88:	e00c      	b.n	8008fa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4619      	mov	r1, r3
 8008f94:	4610      	mov	r0, r2
 8008f96:	f000 face 	bl	8009536 <TIM_ITRx_SetConfig>
      break;
 8008f9a:	e003      	b.n	8008fa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008fa0:	e000      	b.n	8008fa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008fa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a46      	ldr	r2, [pc, #280]	@ (80090ec <TIM_Base_SetConfig+0x12c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d013      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fde:	d00f      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a43      	ldr	r2, [pc, #268]	@ (80090f0 <TIM_Base_SetConfig+0x130>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d00b      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a42      	ldr	r2, [pc, #264]	@ (80090f4 <TIM_Base_SetConfig+0x134>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d007      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a41      	ldr	r2, [pc, #260]	@ (80090f8 <TIM_Base_SetConfig+0x138>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d003      	beq.n	8009000 <TIM_Base_SetConfig+0x40>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a40      	ldr	r2, [pc, #256]	@ (80090fc <TIM_Base_SetConfig+0x13c>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d108      	bne.n	8009012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a35      	ldr	r2, [pc, #212]	@ (80090ec <TIM_Base_SetConfig+0x12c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d02b      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009020:	d027      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a32      	ldr	r2, [pc, #200]	@ (80090f0 <TIM_Base_SetConfig+0x130>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d023      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a31      	ldr	r2, [pc, #196]	@ (80090f4 <TIM_Base_SetConfig+0x134>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01f      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a30      	ldr	r2, [pc, #192]	@ (80090f8 <TIM_Base_SetConfig+0x138>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d01b      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a2f      	ldr	r2, [pc, #188]	@ (80090fc <TIM_Base_SetConfig+0x13c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d017      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a2e      	ldr	r2, [pc, #184]	@ (8009100 <TIM_Base_SetConfig+0x140>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d013      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a2d      	ldr	r2, [pc, #180]	@ (8009104 <TIM_Base_SetConfig+0x144>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00f      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a2c      	ldr	r2, [pc, #176]	@ (8009108 <TIM_Base_SetConfig+0x148>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d00b      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a2b      	ldr	r2, [pc, #172]	@ (800910c <TIM_Base_SetConfig+0x14c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d007      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a2a      	ldr	r2, [pc, #168]	@ (8009110 <TIM_Base_SetConfig+0x150>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d003      	beq.n	8009072 <TIM_Base_SetConfig+0xb2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a29      	ldr	r2, [pc, #164]	@ (8009114 <TIM_Base_SetConfig+0x154>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d108      	bne.n	8009084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a10      	ldr	r2, [pc, #64]	@ (80090ec <TIM_Base_SetConfig+0x12c>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d003      	beq.n	80090b8 <TIM_Base_SetConfig+0xf8>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a12      	ldr	r2, [pc, #72]	@ (80090fc <TIM_Base_SetConfig+0x13c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d103      	bne.n	80090c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	691a      	ldr	r2, [r3, #16]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d105      	bne.n	80090de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	f023 0201 	bic.w	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	611a      	str	r2, [r3, #16]
  }
}
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	40010000 	.word	0x40010000
 80090f0:	40000400 	.word	0x40000400
 80090f4:	40000800 	.word	0x40000800
 80090f8:	40000c00 	.word	0x40000c00
 80090fc:	40010400 	.word	0x40010400
 8009100:	40014000 	.word	0x40014000
 8009104:	40014400 	.word	0x40014400
 8009108:	40014800 	.word	0x40014800
 800910c:	40001800 	.word	0x40001800
 8009110:	40001c00 	.word	0x40001c00
 8009114:	40002000 	.word	0x40002000

08009118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	f023 0201 	bic.w	r2, r3, #1
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0303 	bic.w	r3, r3, #3
 800914e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f023 0302 	bic.w	r3, r3, #2
 8009160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	4313      	orrs	r3, r2
 800916a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a20      	ldr	r2, [pc, #128]	@ (80091f0 <TIM_OC1_SetConfig+0xd8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d003      	beq.n	800917c <TIM_OC1_SetConfig+0x64>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a1f      	ldr	r2, [pc, #124]	@ (80091f4 <TIM_OC1_SetConfig+0xdc>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d10c      	bne.n	8009196 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f023 0308 	bic.w	r3, r3, #8
 8009182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f023 0304 	bic.w	r3, r3, #4
 8009194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a15      	ldr	r2, [pc, #84]	@ (80091f0 <TIM_OC1_SetConfig+0xd8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d003      	beq.n	80091a6 <TIM_OC1_SetConfig+0x8e>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a14      	ldr	r2, [pc, #80]	@ (80091f4 <TIM_OC1_SetConfig+0xdc>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d111      	bne.n	80091ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	4313      	orrs	r3, r2
 80091be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	621a      	str	r2, [r3, #32]
}
 80091e4:	bf00      	nop
 80091e6:	371c      	adds	r7, #28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	40010000 	.word	0x40010000
 80091f4:	40010400 	.word	0x40010400

080091f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	f023 0210 	bic.w	r2, r3, #16
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800922e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f023 0320 	bic.w	r3, r3, #32
 8009242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	4313      	orrs	r3, r2
 800924e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a22      	ldr	r2, [pc, #136]	@ (80092dc <TIM_OC2_SetConfig+0xe4>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d003      	beq.n	8009260 <TIM_OC2_SetConfig+0x68>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a21      	ldr	r2, [pc, #132]	@ (80092e0 <TIM_OC2_SetConfig+0xe8>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d10d      	bne.n	800927c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	011b      	lsls	r3, r3, #4
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	4313      	orrs	r3, r2
 8009272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800927a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a17      	ldr	r2, [pc, #92]	@ (80092dc <TIM_OC2_SetConfig+0xe4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_OC2_SetConfig+0x94>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a16      	ldr	r2, [pc, #88]	@ (80092e0 <TIM_OC2_SetConfig+0xe8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d113      	bne.n	80092b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800929a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	621a      	str	r2, [r3, #32]
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	40010000 	.word	0x40010000
 80092e0:	40010400 	.word	0x40010400

080092e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f023 0303 	bic.w	r3, r3, #3
 800931a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	4313      	orrs	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800932c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	021b      	lsls	r3, r3, #8
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	4313      	orrs	r3, r2
 8009338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a21      	ldr	r2, [pc, #132]	@ (80093c4 <TIM_OC3_SetConfig+0xe0>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d003      	beq.n	800934a <TIM_OC3_SetConfig+0x66>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a20      	ldr	r2, [pc, #128]	@ (80093c8 <TIM_OC3_SetConfig+0xe4>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d10d      	bne.n	8009366 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	4313      	orrs	r3, r2
 800935c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a16      	ldr	r2, [pc, #88]	@ (80093c4 <TIM_OC3_SetConfig+0xe0>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d003      	beq.n	8009376 <TIM_OC3_SetConfig+0x92>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a15      	ldr	r2, [pc, #84]	@ (80093c8 <TIM_OC3_SetConfig+0xe4>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d113      	bne.n	800939e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800937c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4313      	orrs	r3, r2
 800939c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	621a      	str	r2, [r3, #32]
}
 80093b8:	bf00      	nop
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40010400 	.word	0x40010400

080093cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	031b      	lsls	r3, r3, #12
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	4313      	orrs	r3, r2
 8009422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a12      	ldr	r2, [pc, #72]	@ (8009470 <TIM_OC4_SetConfig+0xa4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_OC4_SetConfig+0x68>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <TIM_OC4_SetConfig+0xa8>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d109      	bne.n	8009448 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800943a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	019b      	lsls	r3, r3, #6
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	4313      	orrs	r3, r2
 8009446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	621a      	str	r2, [r3, #32]
}
 8009462:	bf00      	nop
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40010000 	.word	0x40010000
 8009474:	40010400 	.word	0x40010400

08009478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	f023 0201 	bic.w	r2, r3, #1
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	011b      	lsls	r3, r3, #4
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f023 030a 	bic.w	r3, r3, #10
 80094b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	621a      	str	r2, [r3, #32]
}
 80094ca:	bf00      	nop
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b087      	sub	sp, #28
 80094da:	af00      	add	r7, sp, #0
 80094dc:	60f8      	str	r0, [r7, #12]
 80094de:	60b9      	str	r1, [r7, #8]
 80094e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	f023 0210 	bic.w	r2, r3, #16
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	031b      	lsls	r3, r3, #12
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009512:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	011b      	lsls	r3, r3, #4
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	4313      	orrs	r3, r2
 800951c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	621a      	str	r2, [r3, #32]
}
 800952a:	bf00      	nop
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009536:	b480      	push	{r7}
 8009538:	b085      	sub	sp, #20
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800954c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4313      	orrs	r3, r2
 8009554:	f043 0307 	orr.w	r3, r3, #7
 8009558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	609a      	str	r2, [r3, #8]
}
 8009560:	bf00      	nop
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	021a      	lsls	r2, r3, #8
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	431a      	orrs	r2, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4313      	orrs	r3, r2
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	4313      	orrs	r3, r2
 8009598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	609a      	str	r2, [r3, #8]
}
 80095a0:	bf00      	nop
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	f003 031f 	and.w	r3, r3, #31
 80095be:	2201      	movs	r2, #1
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6a1a      	ldr	r2, [r3, #32]
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	43db      	mvns	r3, r3
 80095ce:	401a      	ands	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a1a      	ldr	r2, [r3, #32]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f003 031f 	and.w	r3, r3, #31
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	fa01 f303 	lsl.w	r3, r1, r3
 80095e4:	431a      	orrs	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	621a      	str	r2, [r3, #32]
}
 80095ea:	bf00      	nop
 80095ec:	371c      	adds	r7, #28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
	...

080095f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009608:	2b01      	cmp	r3, #1
 800960a:	d101      	bne.n	8009610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800960c:	2302      	movs	r3, #2
 800960e:	e05a      	b.n	80096c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a21      	ldr	r2, [pc, #132]	@ (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d022      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800965c:	d01d      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a1d      	ldr	r2, [pc, #116]	@ (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d018      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a1b      	ldr	r2, [pc, #108]	@ (80096dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d013      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a1a      	ldr	r2, [pc, #104]	@ (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d00e      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a18      	ldr	r2, [pc, #96]	@ (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d009      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a17      	ldr	r2, [pc, #92]	@ (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d004      	beq.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a15      	ldr	r2, [pc, #84]	@ (80096ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d10c      	bne.n	80096b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40010400 	.word	0x40010400
 80096e8:	40014000 	.word	0x40014000
 80096ec:	40001800 	.word	0x40001800

080096f0 <memset>:
 80096f0:	4402      	add	r2, r0
 80096f2:	4603      	mov	r3, r0
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d100      	bne.n	80096fa <memset+0xa>
 80096f8:	4770      	bx	lr
 80096fa:	f803 1b01 	strb.w	r1, [r3], #1
 80096fe:	e7f9      	b.n	80096f4 <memset+0x4>

08009700 <__libc_init_array>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	4d0d      	ldr	r5, [pc, #52]	@ (8009738 <__libc_init_array+0x38>)
 8009704:	4c0d      	ldr	r4, [pc, #52]	@ (800973c <__libc_init_array+0x3c>)
 8009706:	1b64      	subs	r4, r4, r5
 8009708:	10a4      	asrs	r4, r4, #2
 800970a:	2600      	movs	r6, #0
 800970c:	42a6      	cmp	r6, r4
 800970e:	d109      	bne.n	8009724 <__libc_init_array+0x24>
 8009710:	4d0b      	ldr	r5, [pc, #44]	@ (8009740 <__libc_init_array+0x40>)
 8009712:	4c0c      	ldr	r4, [pc, #48]	@ (8009744 <__libc_init_array+0x44>)
 8009714:	f000 f826 	bl	8009764 <_init>
 8009718:	1b64      	subs	r4, r4, r5
 800971a:	10a4      	asrs	r4, r4, #2
 800971c:	2600      	movs	r6, #0
 800971e:	42a6      	cmp	r6, r4
 8009720:	d105      	bne.n	800972e <__libc_init_array+0x2e>
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	f855 3b04 	ldr.w	r3, [r5], #4
 8009728:	4798      	blx	r3
 800972a:	3601      	adds	r6, #1
 800972c:	e7ee      	b.n	800970c <__libc_init_array+0xc>
 800972e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009732:	4798      	blx	r3
 8009734:	3601      	adds	r6, #1
 8009736:	e7f2      	b.n	800971e <__libc_init_array+0x1e>
 8009738:	08009b44 	.word	0x08009b44
 800973c:	08009b44 	.word	0x08009b44
 8009740:	08009b44 	.word	0x08009b44
 8009744:	08009b48 	.word	0x08009b48

08009748 <memcpy>:
 8009748:	440a      	add	r2, r1
 800974a:	4291      	cmp	r1, r2
 800974c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009750:	d100      	bne.n	8009754 <memcpy+0xc>
 8009752:	4770      	bx	lr
 8009754:	b510      	push	{r4, lr}
 8009756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800975e:	4291      	cmp	r1, r2
 8009760:	d1f9      	bne.n	8009756 <memcpy+0xe>
 8009762:	bd10      	pop	{r4, pc}

08009764 <_init>:
 8009764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009766:	bf00      	nop
 8009768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976a:	bc08      	pop	{r3}
 800976c:	469e      	mov	lr, r3
 800976e:	4770      	bx	lr

08009770 <_fini>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	bf00      	nop
 8009774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009776:	bc08      	pop	{r3}
 8009778:	469e      	mov	lr, r3
 800977a:	4770      	bx	lr
