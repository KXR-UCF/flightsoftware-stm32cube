
flightsoftwaremx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000639c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006560  08006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006920  08006920  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006928  08006928  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  2000000c  0800693c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800693c  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018920  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311a  00000000  00000000  0003899f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  0003bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012f9  00000000  00000000  0003d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e9f  00000000  00000000  0003e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d727  00000000  00000000  00063468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e66c1  00000000  00000000  00080b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068ec  00000000  00000000  00167250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016db3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006548 	.word	0x08006548

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08006548 	.word	0x08006548

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <ad7124_noCheckReadRegister>:
#include "AD7124.h"



int8_t ad7124_noCheckReadRegister(struct ad7124_dev *dev, struct ad7124_registerData *p_reg)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b08b      	sub	sp, #44	; 0x2c
 8000504:	af02      	add	r7, sp, #8
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
    int8_t flag, i = 0, add_status_length = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	77bb      	strb	r3, [r7, #30]
 800050e:	2300      	movs	r3, #0
 8000510:	777b      	strb	r3, [r7, #29]
    uint8_t txBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000512:	4a6f      	ldr	r2, [pc, #444]	; (80006d0 <ad7124_noCheckReadRegister+0x1d0>)
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051c:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t rxBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000520:	4a6b      	ldr	r2, [pc, #428]	; (80006d0 <ad7124_noCheckReadRegister+0x1d0>)
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Build Command word
    txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg->addr);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	b25b      	sxtb	r3, r3
 8000534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000538:	b25b      	sxtb	r3, r3
 800053a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800053e:	b25b      	sxtb	r3, r3
 8000540:	b2db      	uxtb	r3, r3
 8000542:	743b      	strb	r3, [r7, #16]

    /*
     * If this is an AD7124_DATA register read, and the DATA_STATUS bit is set
     * in ADC_CONTROL, need to read 4, not 3 bytes for DATA with flag
     */
    if ((p_reg->addr == AD7124_DATA_REG) &&
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b02      	cmp	r3, #2
 800054a:	d109      	bne.n	8000560 <ad7124_noCheckReadRegister+0x60>
        (dev->regs[AD7124_ADC_Control].value & AD7124_ADC_CTRL_REG_DATA_STATUS))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	3310      	adds	r3, #16
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    if ((p_reg->addr == AD7124_DATA_REG) &&
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <ad7124_noCheckReadRegister+0x60>
        add_status_length = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	777b      	strb	r3, [r7, #29]

    uint16_t length = (((dev->useCRC != AD7124_DISABLE_CRC) ? p_reg->size + 1 : p_reg->size) + 1 + add_status_length);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <ad7124_noCheckReadRegister+0x76>
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	b29b      	uxth	r3, r3
 8000570:	3302      	adds	r3, #2
 8000572:	b29b      	uxth	r3, r3
 8000574:	e004      	b.n	8000580 <ad7124_noCheckReadRegister+0x80>
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	b29b      	uxth	r3, r3
 800057c:	3301      	adds	r3, #1
 800057e:	b29b      	uxth	r3, r3
 8000580:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8000584:	b292      	uxth	r2, r2
 8000586:	4413      	add	r3, r2
 8000588:	837b      	strh	r3, [r7, #26]

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6858      	ldr	r0, [r3, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	891b      	ldrh	r3, [r3, #8]
 8000592:	2200      	movs	r2, #0
 8000594:	4619      	mov	r1, r3
 8000596:	f003 fb13 	bl	8003bc0 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_TransmitReceive(dev->hspi, &txBuf[0], &rxBuf[0], length, HAL_MAX_DELAY) != HAL_OK);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	8b7b      	ldrh	r3, [r7, #26]
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	f107 0110 	add.w	r1, r7, #16
 80005a8:	f04f 34ff 	mov.w	r4, #4294967295
 80005ac:	9400      	str	r4, [sp, #0]
 80005ae:	f004 ff6b 	bl	8005488 <HAL_SPI_TransmitReceive>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf14      	ite	ne
 80005b8:	2301      	movne	r3, #1
 80005ba:	2300      	moveq	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	77fb      	strb	r3, [r7, #31]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6858      	ldr	r0, [r3, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	891b      	ldrh	r3, [r3, #8]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	f003 faf8 	bl	8003bc0 <HAL_GPIO_WritePin>

    if (flag)
 80005d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d002      	beq.n	80005de <ad7124_noCheckReadRegister+0xde>
        return flag;
 80005d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80005dc:	e074      	b.n	80006c8 <ad7124_noCheckReadRegister+0x1c8>

    // Check the CRC
    if (dev->useCRC == AD7124_USE_CRC)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d137      	bne.n	8000658 <ad7124_noCheckReadRegister+0x158>
    {
    	txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg->addr);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	743b      	strb	r3, [r7, #16]
        for (i = 1; i < p_reg->size + 2 + add_status_length; ++i)
 80005fe:	2301      	movs	r3, #1
 8000600:	77bb      	strb	r3, [r7, #30]
 8000602:	e00f      	b.n	8000624 <ad7124_noCheckReadRegister+0x124>
        	txBuf[i] = rxBuf[i];
 8000604:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8000608:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800060c:	3220      	adds	r2, #32
 800060e:	443a      	add	r2, r7
 8000610:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000614:	3320      	adds	r3, #32
 8000616:	443b      	add	r3, r7
 8000618:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (i = 1; i < p_reg->size + 2 + add_status_length; ++i)
 800061c:	7fbb      	ldrb	r3, [r7, #30]
 800061e:	3301      	adds	r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	77bb      	strb	r3, [r7, #30]
 8000624:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	1c99      	adds	r1, r3, #2
 800062e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000632:	440b      	add	r3, r1
 8000634:	429a      	cmp	r2, r3
 8000636:	dbe5      	blt.n	8000604 <ad7124_noCheckReadRegister+0x104>
        flag = ad7124_computeCrc8(txBuf, p_reg->size + 2 + add_status_length);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	7f7b      	ldrb	r3, [r7, #29]
 8000640:	4413      	add	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	3302      	adds	r3, #2
 8000646:	b2da      	uxtb	r2, r3
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f9ea 	bl	8000a28 <ad7124_computeCrc8>
 8000654:	4603      	mov	r3, r0
 8000656:	77fb      	strb	r3, [r7, #31]
    }

    if (flag)
 8000658:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <ad7124_noCheckReadRegister+0x166>
        return flag;
 8000660:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000664:	e030      	b.n	80006c8 <ad7124_noCheckReadRegister+0x1c8>
    /*
     * if reading Data with 4 bytes, need to copy the flag byte to the flag
     * register struct value member
     */

    if (add_status_length)
 8000666:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d009      	beq.n	8000682 <ad7124_noCheckReadRegister+0x182>
        dev->regs[AD7124_Status].value = rxBuf[p_reg->size + 1];
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	3301      	adds	r3, #1
 8000674:	3320      	adds	r3, #32
 8000676:	443b      	add	r3, r7
 8000678:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	605a      	str	r2, [r3, #4]

    // Build the result
    p_reg->value = 0;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
    for (i = 1; i < p_reg->size + 1; i++)
 8000688:	2301      	movs	r3, #1
 800068a:	77bb      	strb	r3, [r7, #30]
 800068c:	e015      	b.n	80006ba <ad7124_noCheckReadRegister+0x1ba>
    {
        p_reg->value <<= 8;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	021a      	lsls	r2, r3, #8
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	605a      	str	r2, [r3, #4]
        p_reg->value += rxBuf[i];
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80006a0:	3220      	adds	r2, #32
 80006a2:	443a      	add	r2, r7
 80006a4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80006a8:	441a      	add	r2, r3
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	605a      	str	r2, [r3, #4]
    for (i = 1; i < p_reg->size + 1; i++)
 80006ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	77bb      	strb	r3, [r7, #30]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dae3      	bge.n	800068e <ad7124_noCheckReadRegister+0x18e>
    }

    return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3724      	adds	r7, #36	; 0x24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	08006560 	.word	0x08006560

080006d4 <ad7124_noCheckWriteRegister>:

int8_t ad7124_noCheckWriteRegister(struct ad7124_dev *dev, struct ad7124_registerData p_reg)
{
 80006d4:	b084      	sub	sp, #16
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b088      	sub	sp, #32
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80006e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t reg_value = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    int8_t flag, i = 0, add_status_length = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	76fb      	strb	r3, [r7, #27]
 80006ee:	2300      	movs	r3, #0
 80006f0:	76bb      	strb	r3, [r7, #26]
    uint8_t txBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80006f2:	4a41      	ldr	r2, [pc, #260]	; (80007f8 <ad7124_noCheckWriteRegister+0x124>)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Build Command word
    txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg.addr);
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000708:	b25b      	sxtb	r3, r3
 800070a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070e:	b25b      	sxtb	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	733b      	strb	r3, [r7, #12]

    // Fill the write buffer
    reg_value = p_reg.value;
 8000714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000716:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < p_reg.size; i++)
 8000718:	2300      	movs	r3, #0
 800071a:	76fb      	strb	r3, [r7, #27]
 800071c:	e012      	b.n	8000744 <ad7124_noCheckWriteRegister+0x70>
    {
        txBuf[p_reg.size - i] = reg_value & 0xFF;
 800071e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000720:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	69fa      	ldr	r2, [r7, #28]
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	3320      	adds	r3, #32
 800072c:	443b      	add	r3, r7
 800072e:	f803 2c14 	strb.w	r2, [r3, #-20]
        reg_value >>= 8;
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	121b      	asrs	r3, r3, #8
 8000736:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < p_reg.size; i++)
 8000738:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	3301      	adds	r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	76fb      	strb	r3, [r7, #27]
 8000744:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8000748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800074a:	429a      	cmp	r2, r3
 800074c:	dbe7      	blt.n	800071e <ad7124_noCheckWriteRegister+0x4a>
    }

    // Compute the CRC
    if (dev->useCRC != AD7124_DISABLE_CRC)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d012      	beq.n	800077e <ad7124_noCheckWriteRegister+0xaa>
    {
        flag = ad7124_computeCrc8(txBuf, p_reg.size + 1);
 8000758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f95e 	bl	8000a28 <ad7124_computeCrc8>
 800076c:	4603      	mov	r3, r0
 800076e:	767b      	strb	r3, [r7, #25]
        txBuf[p_reg.size + 1] = flag;
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000772:	3301      	adds	r3, #1
 8000774:	7e7a      	ldrb	r2, [r7, #25]
 8000776:	3320      	adds	r3, #32
 8000778:	443b      	add	r3, r7
 800077a:	f803 2c14 	strb.w	r2, [r3, #-20]
    }

    uint16_t length = (((dev->useCRC != AD7124_DISABLE_CRC) ? p_reg.size + 1 : p_reg.size) + 1 + add_status_length);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d004      	beq.n	8000792 <ad7124_noCheckWriteRegister+0xbe>
 8000788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078a:	b29b      	uxth	r3, r3
 800078c:	3302      	adds	r3, #2
 800078e:	b29b      	uxth	r3, r3
 8000790:	e003      	b.n	800079a <ad7124_noCheckWriteRegister+0xc6>
 8000792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000794:	b29b      	uxth	r3, r3
 8000796:	3301      	adds	r3, #1
 8000798:	b29b      	uxth	r3, r3
 800079a:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800079e:	b292      	uxth	r2, r2
 80007a0:	4413      	add	r3, r2
 80007a2:	82fb      	strh	r3, [r7, #22]

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6858      	ldr	r0, [r3, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	891b      	ldrh	r3, [r3, #8]
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	f003 fa06 	bl	8003bc0 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_Transmit(dev->hspi, txBuf, length , HAL_MAX_DELAY) != HAL_OK);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	8afa      	ldrh	r2, [r7, #22]
 80007ba:	f107 010c 	add.w	r1, r7, #12
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	f004 fd1e 	bl	8005202 <HAL_SPI_Transmit>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf14      	ite	ne
 80007cc:	2301      	movne	r3, #1
 80007ce:	2300      	moveq	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	767b      	strb	r3, [r7, #25]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6858      	ldr	r0, [r3, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	891b      	ldrh	r3, [r3, #8]
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	f003 f9ee 	bl	8003bc0 <HAL_GPIO_WritePin>

    return flag;
 80007e4:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	08006560 	.word	0x08006560

080007fc <ad7124_readRegister>:

int8_t ad7124_readRegister(struct ad7124_dev *dev, struct ad7124_registerData *p_reg)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
    int8_t flag;

    if (p_reg->addr != AD7124_ERR_REG && dev->isReady)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b06      	cmp	r3, #6
 800080c:	d014      	beq.n	8000838 <ad7124_readRegister+0x3c>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00f      	beq.n	8000838 <ad7124_readRegister+0x3c>
    {
        flag = ad7124_waitForSpiReady(dev,
                                      dev->responseTimeout);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
        flag = ad7124_waitForSpiReady(dev,
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f893 	bl	800094c <ad7124_waitForSpiReady>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]
        if (flag)
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <ad7124_readRegister+0x3c>
            return flag;
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	e004      	b.n	8000842 <ad7124_readRegister+0x46>
    }

    return ad7124_noCheckReadRegister(dev, p_reg);
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fe60 	bl	8000500 <ad7124_noCheckReadRegister>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <ad7124_writeRegister>:
    return 0;
}

int8_t ad7124_writeRegister(struct ad7124_dev *dev,
                            struct ad7124_registerData p_reg)
{
 800084a:	b084      	sub	sp, #16
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af02      	add	r7, sp, #8
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	f107 001c 	add.w	r0, r7, #28
 8000858:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int8_t flag;

    if (dev->isReady)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d00f      	beq.n	8000886 <ad7124_writeRegister+0x3c>
    {
        flag = ad7124_waitForSpiReady(dev,
                                         dev->responseTimeout);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
        flag = ad7124_waitForSpiReady(dev,
 800086c:	4619      	mov	r1, r3
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f000 f86c 	bl	800094c <ad7124_waitForSpiReady>
 8000874:	4603      	mov	r3, r0
 8000876:	73fb      	strb	r3, [r7, #15]
        if (flag)
 8000878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <ad7124_writeRegister+0x3c>
            return flag;
 8000880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000884:	e008      	b.n	8000898 <ad7124_writeRegister+0x4e>
    }

    return ad7124_noCheckWriteRegister(dev,
 8000886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff1f 	bl	80006d4 <ad7124_noCheckWriteRegister>
 8000896:	4603      	mov	r3, r0
                                       p_reg);
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008a2:	b004      	add	sp, #16
 80008a4:	4770      	bx	lr
	...

080008a8 <ad7124_reset>:

    return ad7124_writeRegister(dev, dev->regs[reg]);
}

int8_t ad7124_reset(struct ad7124_dev *dev)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    int8_t flag = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	75fb      	strb	r3, [r7, #23]
    uint8_t txBuf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 80008b4:	4a24      	ldr	r2, [pc, #144]	; (8000948 <ad7124_reset+0xa0>)
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008be:	e883 0003 	stmia.w	r3, {r0, r1}

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6858      	ldr	r0, [r3, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	891b      	ldrh	r3, [r3, #8]
 80008ca:	2200      	movs	r2, #0
 80008cc:	4619      	mov	r1, r3
 80008ce:	f003 f977 	bl	8003bc0 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_Transmit(dev->hspi, txBuf, 8, HAL_MAX_DELAY) != HAL_OK);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f107 010c 	add.w	r1, r7, #12
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	2208      	movs	r2, #8
 80008e0:	f004 fc8f 	bl	8005202 <HAL_SPI_Transmit>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	bf14      	ite	ne
 80008ea:	2301      	movne	r3, #1
 80008ec:	2300      	moveq	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6858      	ldr	r0, [r3, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	891b      	ldrh	r3, [r3, #8]
 80008fa:	2201      	movs	r2, #1
 80008fc:	4619      	mov	r1, r3
 80008fe:	f003 f95f 	bl	8003bc0 <HAL_GPIO_WritePin>

    if (flag)
 8000902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <ad7124_reset+0x68>
        return flag;
 800090a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800090e:	e016      	b.n	800093e <ad7124_reset+0x96>

    /* CRC is disabled after reset */
    dev->useCRC = AD7124_DISABLE_CRC;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	741a      	strb	r2, [r3, #16]

    /* Read POR bit to clear */
    flag = ad7124_waitToPowerOn(dev, dev->responseTimeout);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800091c:	4619      	mov	r1, r3
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 f84b 	bl	80009ba <ad7124_waitToPowerOn>
 8000924:	4603      	mov	r3, r0
 8000926:	75fb      	strb	r3, [r7, #23]
    if (flag)
 8000928:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d002      	beq.n	8000936 <ad7124_reset+0x8e>
        return flag;
 8000930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000934:	e003      	b.n	800093e <ad7124_reset+0x96>

    // Recommened 4ms delay
    HAL_Delay(4);
 8000936:	2004      	movs	r0, #4
 8000938:	f001 fef4 	bl	8002724 <HAL_Delay>

    return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08006568 	.word	0x08006568

0800094c <ad7124_waitForSpiReady>:

// Waits until the device can accept read and write user actions
int8_t ad7124_waitForSpiReady(struct ad7124_dev *dev, uint32_t timeout)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
    struct ad7124_registerData *regs;
    int8_t flag;
    int8_t ready;

    regs = dev->regs;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	613b      	str	r3, [r7, #16]

    while (!ready && --timeout)
 800095c:	e019      	b.n	8000992 <ad7124_waitForSpiReady+0x46>
    {
        // read the value of the error registers
        flag = ad7124_readRegister(dev, &regs[AD7124_Error]);
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	3360      	adds	r3, #96	; 0x60
 8000962:	4619      	mov	r1, r3
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff49 	bl	80007fc <ad7124_readRegister>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
        if (flag)
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <ad7124_waitForSpiReady+0x30>
            return flag;
 8000976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097a:	e01a      	b.n	80009b2 <ad7124_waitForSpiReady+0x66>

        ready = (regs[AD7124_Error].value & AD7124_ERR_REG_SPI_IGNORE_ERR) == 0;
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	3360      	adds	r3, #96	; 0x60
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	75fb      	strb	r3, [r7, #23]
    while (!ready && --timeout)
 8000992:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d105      	bne.n	80009a6 <ad7124_waitForSpiReady+0x5a>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	3b01      	subs	r3, #1
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1db      	bne.n	800095e <ad7124_waitForSpiReady+0x12>
    }

    if (!timeout)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <ad7124_waitForSpiReady+0x64>
        return 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e000      	b.n	80009b2 <ad7124_waitForSpiReady+0x66>

    return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <ad7124_waitToPowerOn>:

// Waits until the device finishes the power-on reset operations
int8_t ad7124_waitToPowerOn(struct ad7124_dev *dev, uint32_t timeout)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6039      	str	r1, [r7, #0]
    struct ad7124_registerData *regs;
    int32_t flag;
    int8_t powered_on;

    regs = dev->regs;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	613b      	str	r3, [r7, #16]

    while (!powered_on && --timeout)
 80009ca:	e015      	b.n	80009f8 <ad7124_waitToPowerOn+0x3e>
    {
        flag = ad7124_readRegister(dev, &regs[AD7124_Status]);
 80009cc:	6939      	ldr	r1, [r7, #16]
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ff14 	bl	80007fc <ad7124_readRegister>
 80009d4:	4603      	mov	r3, r0
 80009d6:	60fb      	str	r3, [r7, #12]

        if (flag)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <ad7124_waitToPowerOn+0x2a>
            return flag;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	e01d      	b.n	8000a20 <ad7124_waitToPowerOn+0x66>

        // Check the POR_FLAG bit in the flag Register
        powered_on = (regs[AD7124_Status].value & AD7124_STATUS_REG_POR_FLAG) == 0;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	75fb      	strb	r3, [r7, #23]
    while (!powered_on && --timeout)
 80009f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d105      	bne.n	8000a0c <ad7124_waitToPowerOn+0x52>
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1df      	bne.n	80009cc <ad7124_waitToPowerOn+0x12>
    }

    if (!(timeout || powered_on))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d105      	bne.n	8000a1e <ad7124_waitToPowerOn+0x64>
 8000a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <ad7124_waitToPowerOn+0x64>
        return 1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <ad7124_waitToPowerOn+0x66>
    return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <ad7124_computeCrc8>:
    return 0;
}

// Computes the CRC checksum for a data buffer
int8_t ad7124_computeCrc8(uint8_t* p_buf, uint8_t buf_size)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
    uint8_t crc = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73bb      	strb	r3, [r7, #14]

    while (buf_size)
 8000a3c:	e02e      	b.n	8000a9c <ad7124_computeCrc8+0x74>
    {
        for (i = 0x80; i != 0; i >>= 1)
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	73fb      	strb	r3, [r7, #15]
 8000a42:	e022      	b.n	8000a8a <ad7124_computeCrc8+0x62>
        {
            uint8_t cmp1 = (crc & 0x80) != 0;
 8000a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	09db      	lsrs	r3, r3, #7
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	737b      	strb	r3, [r7, #13]
            uint8_t cmp2 = (*p_buf & i) != 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	4013      	ands	r3, r2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf14      	ite	ne
 8000a5e:	2301      	movne	r3, #1
 8000a60:	2300      	moveq	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	733b      	strb	r3, [r7, #12]
            if (cmp1 != cmp2)
 8000a66:	7b7a      	ldrb	r2, [r7, #13]
 8000a68:	7b3b      	ldrb	r3, [r7, #12]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d007      	beq.n	8000a7e <ad7124_computeCrc8+0x56>
            {
                /* MSB of CRC register XOR input Bit from Data */
                crc <<= 1;
 8000a6e:	7bbb      	ldrb	r3, [r7, #14]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	73bb      	strb	r3, [r7, #14]
                crc ^= AD7124_CRC8_POLYNOMIAL_REPRESENTATION;
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	f083 0307 	eor.w	r3, r3, #7
 8000a7a:	73bb      	strb	r3, [r7, #14]
 8000a7c:	e002      	b.n	8000a84 <ad7124_computeCrc8+0x5c>
            }
            else
            {
                crc <<= 1;
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	73bb      	strb	r3, [r7, #14]
        for (i = 0x80; i != 0; i >>= 1)
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	085b      	lsrs	r3, r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1d9      	bne.n	8000a44 <ad7124_computeCrc8+0x1c>
            }
        }
        p_buf++;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3301      	adds	r3, #1
 8000a94:	607b      	str	r3, [r7, #4]
        buf_size--;
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	70fb      	strb	r3, [r7, #3]
    while (buf_size)
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1cd      	bne.n	8000a3e <ad7124_computeCrc8+0x16>
    }

    return crc;
 8000aa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <ad7124_setAdcControl>:

    return 0;
}

int8_t ad7124_setAdcControl(struct ad7124_dev *dev, enum ad7124_mode operating_mode, enum ad7124_power_mode power_mode, uint8_t ref_en, uint8_t clk_sel)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	4608      	mov	r0, r1
 8000abc:	4611      	mov	r1, r2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	70fb      	strb	r3, [r7, #3]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70bb      	strb	r3, [r7, #2]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	707b      	strb	r3, [r7, #1]
	struct ad7124_registerData *r = &dev->regs[AD7124_ADC_Control];
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	3310      	adds	r3, #16
 8000ad2:	60fb      	str	r3, [r7, #12]

    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
               AD7124_ADC_CTRL_REG_POWER_MODE(power_mode) |
 8000adc:	78bb      	ldrb	r3, [r7, #2]
 8000ade:	019b      	lsls	r3, r3, #6
 8000ae0:	b2db      	uxtb	r3, r3
    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000ae2:	431a      	orrs	r2, r3
               AD7124_ADC_CTRL_REG_CLK_SEL(clk_sel) |
 8000ae4:	7e3b      	ldrb	r3, [r7, #24]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
               AD7124_ADC_CTRL_REG_POWER_MODE(power_mode) |
 8000aea:	4313      	orrs	r3, r2
               (ref_en ? AD7124_ADC_CTRL_REG_REF_EN : 0) |
 8000aec:	787a      	ldrb	r2, [r7, #1]
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d002      	beq.n	8000af8 <ad7124_setAdcControl+0x46>
 8000af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af6:	e000      	b.n	8000afa <ad7124_setAdcControl+0x48>
 8000af8:	2200      	movs	r2, #0
               AD7124_ADC_CTRL_REG_CLK_SEL(clk_sel) |
 8000afa:	4313      	orrs	r3, r2
               (ref_en ? AD7124_ADC_CTRL_REG_REF_EN : 0) |
 8000afc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	605a      	str	r2, [r3, #4]
               AD7124_ADC_CTRL_REG_DOUT_RDY_DEL;

    return ad7124_writeRegister(dev, *r);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	9200      	str	r2, [sp, #0]
 8000b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fe9c 	bl	800084a <ad7124_writeRegister>
 8000b12:	4603      	mov	r3, r0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <ad7124_setConfig>:

int8_t ad7124_setConfig(struct ad7124_dev *dev, uint8_t cfg, enum ad7124_reference_source ref, enum ad7124_PgaSel pga, int8_t bipolar, enum ad7124_BurnoutCurrent burnout)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	4608      	mov	r0, r1
 8000b26:	4611      	mov	r1, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	70fb      	strb	r3, [r7, #3]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70bb      	strb	r3, [r7, #2]
 8000b32:	4613      	mov	r3, r2
 8000b34:	707b      	strb	r3, [r7, #1]
    if (cfg < 8)
 8000b36:	78fb      	ldrb	r3, [r7, #3]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d82b      	bhi.n	8000b94 <ad7124_setConfig+0x78>
    {
        struct ad7124_registerData *r;

        cfg += AD7124_Config_0;
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	3319      	adds	r3, #25
 8000b40:	70fb      	strb	r3, [r7, #3]
        r = &dev->regs[cfg];
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68da      	ldr	r2, [r3, #12]
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]

        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b4e:	78bb      	ldrb	r3, [r7, #2]
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	f003 0218 	and.w	r2, r3, #24
                   AD7124_CFG_REG_PGA(pga) |
 8000b56:	787b      	ldrb	r3, [r7, #1]
 8000b58:	f003 0307 	and.w	r3, r3, #7
        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b5c:	4313      	orrs	r3, r2
                   (bipolar ? AD7124_CFG_REG_BIPOLAR : 0) |
 8000b5e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d002      	beq.n	8000b6c <ad7124_setConfig+0x50>
 8000b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b6a:	e000      	b.n	8000b6e <ad7124_setConfig+0x52>
 8000b6c:	2200      	movs	r2, #0
                   AD7124_CFG_REG_PGA(pga) |
 8000b6e:	431a      	orrs	r2, r3
                   AD7124_CFG_REG_BURNOUT(burnout) |
 8000b70:	7f3b      	ldrb	r3, [r7, #28]
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
                   (bipolar ? AD7124_CFG_REG_BIPOLAR : 0) |
 8000b78:	4313      	orrs	r3, r2
                   AD7124_CFG_REG_REF_BUFP | AD7124_CFG_REG_REF_BUFM |
                   AD7124_CFG_REG_AIN_BUFP | AD7124_CFG_REG_AINN_BUFM;
 8000b7a:	f443 72f0 	orr.w	r2, r3, #480	; 0x1e0
        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	605a      	str	r2, [r3, #4]
        return ad7124_writeRegister(dev, *r);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	9200      	str	r2, [sp, #0]
 8000b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fe5d 	bl	800084a <ad7124_writeRegister>
 8000b90:	4603      	mov	r3, r0
 8000b92:	e001      	b.n	8000b98 <ad7124_setConfig+0x7c>
    }
    return -1;
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ad7124_setChannel>:

int8_t ad7124_setChannel(struct ad7124_dev *dev, uint8_t ch, uint8_t cfg, enum ad7124_analog_input ainp, enum ad7124_analog_input ainm, uint8_t enable)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4603      	mov	r3, r0
 8000bb0:	70fb      	strb	r3, [r7, #3]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	70bb      	strb	r3, [r7, #2]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	707b      	strb	r3, [r7, #1]
    if ((ch < 16) && (cfg < 8))
 8000bba:	78fb      	ldrb	r3, [r7, #3]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d82b      	bhi.n	8000c18 <ad7124_setChannel+0x78>
 8000bc0:	78bb      	ldrb	r3, [r7, #2]
 8000bc2:	2b07      	cmp	r3, #7
 8000bc4:	d828      	bhi.n	8000c18 <ad7124_setChannel+0x78>
    {
    	struct ad7124_registerData *r;

        ch += AD7124_Channel_0;
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	3309      	adds	r3, #9
 8000bca:	70fb      	strb	r3, [r7, #3]
        r = &dev->regs[ch];
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4413      	add	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 8000bd8:	78bb      	ldrb	r3, [r7, #2]
 8000bda:	031b      	lsls	r3, r3, #12
 8000bdc:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                   AD7124_CH_MAP_REG_AINP(ainp) |
 8000be0:	787b      	ldrb	r3, [r7, #1]
 8000be2:	015b      	lsls	r3, r3, #5
 8000be4:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 8000be8:	431a      	orrs	r2, r3
                   AD7124_CH_MAP_REG_AINM(ainm) |
 8000bea:	7e3b      	ldrb	r3, [r7, #24]
 8000bec:	f003 031f 	and.w	r3, r3, #31
                   AD7124_CH_MAP_REG_AINP(ainp) |
 8000bf0:	4313      	orrs	r3, r2
                   (enable ? AD7124_CH_MAP_REG_CH_ENABLE : 0);
 8000bf2:	7f3a      	ldrb	r2, [r7, #28]
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	d002      	beq.n	8000bfe <ad7124_setChannel+0x5e>
 8000bf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bfc:	e000      	b.n	8000c00 <ad7124_setChannel+0x60>
 8000bfe:	2200      	movs	r2, #0
                   AD7124_CH_MAP_REG_AINM(ainm) |
 8000c00:	431a      	orrs	r2, r3
        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	605a      	str	r2, [r3, #4]

        return ad7124_writeRegister(dev, *r);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	9200      	str	r2, [sp, #0]
 8000c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fe1b 	bl	800084a <ad7124_writeRegister>
 8000c14:	4603      	mov	r3, r0
 8000c16:	e001      	b.n	8000c1c <ad7124_setChannel+0x7c>
    }
    return -1;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <ad7124_init>:
}


// Initializes the AD7124.
int8_t ad7124_init(struct ad7124_dev *device, SPI_HandleTypeDef *hspi, GPIO_TypeDef *ncs_GPIOx, uint16_t ncs_GPIO_pin, enum ad7124_device_type device_type, struct ad7124_registerData *ad7124_init_regs_default)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	807b      	strh	r3, [r7, #2]
    int8_t flag;
    uint8_t i;

    device->regs = ad7124_init_regs_default;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c36:	60da      	str	r2, [r3, #12]
    device->responseTimeout = 1000;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c3e:	825a      	strh	r2, [r3, #18]
    device->isReady = 0;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2200      	movs	r2, #0
 8000c44:	745a      	strb	r2, [r3, #17]
    device->useCRC = 0;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	741a      	strb	r2, [r3, #16]

    /* Initialize the SPI communication. */
    device->hspi = hspi;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	601a      	str	r2, [r3, #0]
    device->ncs_GPIOx = ncs_GPIOx;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	605a      	str	r2, [r3, #4]
    device->ncs_GPIO_pin = ncs_GPIO_pin;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	887a      	ldrh	r2, [r7, #2]
 8000c5c:	811a      	strh	r2, [r3, #8]
    device->active_device = device_type;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c64:	755a      	strb	r2, [r3, #21]

    /*  Reset the device interface.*/
    flag = ad7124_reset(device);
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f7ff fe1e 	bl	80008a8 <ad7124_reset>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	757b      	strb	r3, [r7, #21]

    /* Initialize ADC */
    ad7124_setAdcControl(device, AD7124_STANDBY, AD7124_LOW_POWER, 0, 0);
 8000c70:	2300      	movs	r3, #0
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2300      	movs	r3, #0
 8000c76:	2200      	movs	r2, #0
 8000c78:	2102      	movs	r1, #2
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff ff19 	bl	8000ab2 <ad7124_setAdcControl>

    /* Read ID register to identify the part. */
    flag = ad7124_readRegister(device, &device->regs[AD7124_ID_REG]);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	3350      	adds	r3, #80	; 0x50
 8000c86:	4619      	mov	r1, r3
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff fdb7 	bl	80007fc <ad7124_readRegister>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	757b      	strb	r3, [r7, #21]

    if (device->active_device == ID_AD7124_4)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	7d5b      	ldrb	r3, [r3, #21]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d107      	bne.n	8000caa <ad7124_init+0x86>
    {
        if (!(device->regs[AD7124_ID_REG].value == AD7124_4_ID))
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	3350      	adds	r3, #80	; 0x50
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b14      	cmp	r3, #20
 8000ca4:	d00d      	beq.n	8000cc2 <ad7124_init+0x9e>
            return 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e066      	b.n	8000d78 <ad7124_init+0x154>
    }
    else if (device->active_device == ID_AD7124_8)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	7d5b      	ldrb	r3, [r3, #21]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d107      	bne.n	8000cc2 <ad7124_init+0x9e>
    {
        if (!(device->regs[AD7124_ID_REG].value == AD7124_8_ID))
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	3350      	adds	r3, #80	; 0x50
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b16      	cmp	r3, #22
 8000cbc:	d001      	beq.n	8000cc2 <ad7124_init+0x9e>
            return 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e05a      	b.n	8000d78 <ad7124_init+0x154>
    }

    // Sets up the 8 channels
    for (i = 0; i < AD7124_MAX_SETUPS; i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	75fb      	strb	r3, [r7, #23]
 8000cc6:	e026      	b.n	8000d16 <ad7124_init+0xf2>
    {
        flag = ad7124_setConfig(device,i,INTERNAL_REF,Pga1,1,BurnoutOff);
 8000cc8:	7df9      	ldrb	r1, [r7, #23]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff ff20 	bl	8000b1c <ad7124_setConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	757b      	strb	r3, [r7, #21]
        if (flag)
 8000ce0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <ad7124_init+0xc8>
            return 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e045      	b.n	8000d78 <ad7124_init+0x154>

        flag = ad7124_setChannel(device,i,i,i,AD7124_AVSS,0);
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	7dfa      	ldrb	r2, [r7, #23]
 8000cf0:	7df9      	ldrb	r1, [r7, #23]
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	9001      	str	r0, [sp, #4]
 8000cf6:	2011      	movs	r0, #17
 8000cf8:	9000      	str	r0, [sp, #0]
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff ff50 	bl	8000ba0 <ad7124_setChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	757b      	strb	r3, [r7, #21]
        if (flag)
 8000d04:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <ad7124_init+0xec>
            return 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e033      	b.n	8000d78 <ad7124_init+0x154>
    for (i = 0; i < AD7124_MAX_SETUPS; i++)
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	3301      	adds	r3, #1
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	2b07      	cmp	r3, #7
 8000d1a:	d9d5      	bls.n	8000cc8 <ad7124_init+0xa4>
    }

    flag = ad7124_setAdcControl(device, AD7124_STANDBY, AD7124_HIGH_POWER, 1, 0);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	2202      	movs	r2, #2
 8000d24:	2102      	movs	r1, #2
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f7ff fec3 	bl	8000ab2 <ad7124_setAdcControl>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	757b      	strb	r3, [r7, #21]

    if (flag)
 8000d30:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <ad7124_init+0x118>
        return 1;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e01d      	b.n	8000d78 <ad7124_init+0x154>

    // Reads Calbiration Data
    for (uint8_t i = 0; i < 8; i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	75bb      	strb	r3, [r7, #22]
 8000d40:	e016      	b.n	8000d70 <ad7124_init+0x14c>
    {
        ad7124_readRegister(device,&device->regs[AD7124_Offset_0+i]);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	7dbb      	ldrb	r3, [r7, #22]
 8000d48:	3329      	adds	r3, #41	; 0x29
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff fd53 	bl	80007fc <ad7124_readRegister>
        ad7124_readRegister(device,&device->regs[AD7124_Gain_0+i]);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	7dbb      	ldrb	r3, [r7, #22]
 8000d5c:	3331      	adds	r3, #49	; 0x31
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4413      	add	r3, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff fd49 	bl	80007fc <ad7124_readRegister>
    for (uint8_t i = 0; i < 8; i++)
 8000d6a:	7dbb      	ldrb	r3, [r7, #22]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	75bb      	strb	r3, [r7, #22]
 8000d70:	7dbb      	ldrb	r3, [r7, #22]
 8000d72:	2b07      	cmp	r3, #7
 8000d74:	d9e5      	bls.n	8000d42 <ad7124_init+0x11e>
    }

    return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000d86:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f001 fc5a 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f862 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f000 fc9a 	bl	80016c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d94:	f000 fc22 	bl	80015dc <MX_DMA_Init>
  MX_ADC1_Init();
 8000d98:	f000 f8c8 	bl	8000f2c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d9c:	f000 f956 	bl	800104c <MX_ADC2_Init>
  MX_CAN1_Init();
 8000da0:	f000 f9f0 	bl	8001184 <MX_CAN1_Init>
  MX_FMPI2C1_Init();
 8000da4:	f000 fa22 	bl	80011ec <MX_FMPI2C1_Init>
  MX_I2C3_Init();
 8000da8:	f000 fa56 	bl	8001258 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8000dac:	f000 fa82 	bl	80012b4 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8000db0:	f000 faac 	bl	800130c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000db4:	f000 fae0 	bl	8001378 <MX_SPI2_Init>
  MX_TIM4_Init();
 8000db8:	f000 fb98 	bl	80014ec <MX_TIM4_Init>
  MX_SPI4_Init();
 8000dbc:	f000 fb12 	bl	80013e4 <MX_SPI4_Init>
  MX_TIM3_Init();
 8000dc0:	f000 fb46 	bl	8001450 <MX_TIM3_Init>
  MX_ADC3_Init();
 8000dc4:	f000 f98c 	bl	80010e0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dce:	481e      	ldr	r0, [pc, #120]	; (8000e48 <main+0xc8>)
 8000dd0:	f002 fef6 	bl	8003bc0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd8:	f001 fca4 	bl	8002724 <HAL_Delay>
  // Example code
  int8_t flag;

  struct ad7124_dev ad7124_device;

  struct ad7124_registerData ad7124_init_regs_default[AD7124_REG_NO] = {
 8000ddc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000de0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000de4:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <main+0xcc>)
 8000de6:	4618      	mov	r0, r3
 8000de8:	4611      	mov	r1, r2
 8000dea:	f44f 7364 	mov.w	r3, #912	; 0x390
 8000dee:	461a      	mov	r2, r3
 8000df0:	f005 fb9c 	bl	800652c <memcpy>
  	{0x38, 0x500000, 3, 1}, /* AD7124_Gain_7 */
  };



  flag = ad7124_init(&ad7124_device, &hspi2, GPIOD, GPIO_PIN_10, ID_AD7124_8, &ad7124_init_regs_default);
 8000df4:	f507 7065 	add.w	r0, r7, #916	; 0x394
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e04:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <main+0xc8>)
 8000e06:	4912      	ldr	r1, [pc, #72]	; (8000e50 <main+0xd0>)
 8000e08:	f7ff ff0c 	bl	8000c24 <ad7124_init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f



  if (flag < 0)
 8000e12:	f997 340f 	ldrsb.w	r3, [r7, #1039]	; 0x40f
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da02      	bge.n	8000e20 <main+0xa0>
  		return flag;
 8000e1a:	f997 340f 	ldrsb.w	r3, [r7, #1039]	; 0x40f
 8000e1e:	e00d      	b.n	8000e3c <main+0xbc>


  HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	; 0x64
 8000e22:	f001 fc7f 	bl	8002724 <HAL_Delay>

  ad7124_noCheckReadRegister(&ad7124_device, &ad7124_device.regs[0x06]);
 8000e26:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8000e2a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8000e2e:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb63 	bl	8000500 <ad7124_noCheckReadRegister>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <main+0xba>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	08006570 	.word	0x08006570
 8000e50:	20000334 	.word	0x20000334

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2234      	movs	r2, #52	; 0x34
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f005 fb36 	bl	80064d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <SystemClock_Config+0xd4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <SystemClock_Config+0xd4>)
 8000e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <SystemClock_Config+0xd4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 224;
 8000ec8:	23e0      	movs	r3, #224	; 0xe0
 8000eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ed0:	2307      	movs	r3, #7
 8000ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 fe69 	bl	8004bb4 <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ee8:	f000 fcd2 	bl	8001890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	230f      	movs	r3, #15
 8000eee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ef8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	2105      	movs	r1, #5
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f878 	bl	8004000 <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f16:	f000 fcbb 	bl	8001890 <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3750      	adds	r7, #80	; 0x50
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40007000 	.word	0x40007000

08000f2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f4c:	4a3e      	ldr	r2, [pc, #248]	; (8001048 <MX_ADC1_Init+0x11c>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000f50:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f5e:	4b39      	ldr	r3, [pc, #228]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f72:	4b34      	ldr	r3, [pc, #208]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f82:	4b30      	ldr	r3, [pc, #192]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f88:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9c:	4829      	ldr	r0, [pc, #164]	; (8001044 <MX_ADC1_Init+0x118>)
 8000f9e:	f001 fbe5 	bl	800276c <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000fa8:	f000 fc72 	bl	8001890 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000fac:	2307      	movs	r3, #7
 8000fae:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8000fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb4:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4820      	ldr	r0, [pc, #128]	; (8001044 <MX_ADC1_Init+0x118>)
 8000fc2:	f001 fe45 	bl	8002c50 <HAL_ADCEx_MultiModeConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8000fcc:	f000 fc60 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fd0:	2309      	movs	r3, #9
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4818      	ldr	r0, [pc, #96]	; (8001044 <MX_ADC1_Init+0x118>)
 8000fe2:	f001 fc07 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000fec:	f000 fc50 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4811      	ldr	r0, [pc, #68]	; (8001044 <MX_ADC1_Init+0x118>)
 8000ffe:	f001 fbf9 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001008:	f000 fc42 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800100c:	2303      	movs	r3, #3
 800100e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <MX_ADC1_Init+0x118>)
 8001016:	f001 fbed 	bl	80027f4 <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001020:	f000 fc36 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_ADC1_Init+0x118>)
 800102e:	f001 fbe1 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001038:	f000 fc2a 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000028 	.word	0x20000028
 8001048:	40012000 	.word	0x40012000

0800104c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ADC2_Init+0x8c>)
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <MX_ADC2_Init+0x90>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_ADC2_Init+0x8c>)
 8001066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_ADC2_Init+0x8c>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_ADC2_Init+0x8c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_ADC2_Init+0x8c>)
 800107a:	2201      	movs	r2, #1
 800107c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_ADC2_Init+0x8c>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_ADC2_Init+0x8c>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_ADC2_Init+0x8c>)
 800108e:	2201      	movs	r2, #1
 8001090:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_ADC2_Init+0x8c>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_ADC2_Init+0x8c>)
 800109c:	2201      	movs	r2, #1
 800109e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_ADC2_Init+0x8c>)
 80010a2:	f001 fb63 	bl	800276c <HAL_ADC_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 80010ac:	f000 fbf0 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_ADC2_Init+0x8c>)
 80010c2:	f001 fb97 	bl	80027f4 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80010cc:	f000 fbe0 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000070 	.word	0x20000070
 80010dc:	40012100 	.word	0x40012100

080010e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_ADC3_Init+0x98>)
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <MX_ADC3_Init+0x9c>)
 80010f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_ADC3_Init+0x98>)
 80010fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_ADC3_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_ADC3_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_ADC3_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_ADC3_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_ADC3_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_ADC3_Init+0x98>)
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <MX_ADC3_Init+0xa0>)
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_ADC3_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_ADC3_Init+0x98>)
 800112e:	2201      	movs	r2, #1
 8001130:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_ADC3_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_ADC3_Init+0x98>)
 800113c:	2201      	movs	r2, #1
 800113e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_ADC3_Init+0x98>)
 8001142:	f001 fb13 	bl	800276c <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800114c:	f000 fba0 	bl	8001890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_ADC3_Init+0x98>)
 8001162:	f001 fb47 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800116c:	f000 fb90 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000b8 	.word	0x200000b8
 800117c:	40012200 	.word	0x40012200
 8001180:	0f000001 	.word	0x0f000001

08001184 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_CAN1_Init+0x60>)
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <MX_CAN1_Init+0x64>)
 800118c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_CAN1_Init+0x60>)
 8001190:	2210      	movs	r2, #16
 8001192:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_CAN1_Init+0x60>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_CAN1_Init+0x60>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_CAN1_Init+0x60>)
 80011d2:	f001 fd83 	bl	8002cdc <HAL_CAN_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80011dc:	f000 fb58 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200001c0 	.word	0x200001c0
 80011e8:	40006400 	.word	0x40006400

080011ec <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_FMPI2C1_Init+0x60>)
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <MX_FMPI2C1_Init+0x64>)
 80011f4:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00A0A3F7;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_FMPI2C1_Init+0x60>)
 80011f8:	4a16      	ldr	r2, [pc, #88]	; (8001254 <MX_FMPI2C1_Init+0x68>)
 80011fa:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_FMPI2C1_Init+0x60>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_FMPI2C1_Init+0x60>)
 8001204:	2201      	movs	r2, #1
 8001206:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_FMPI2C1_Init+0x60>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_FMPI2C1_Init+0x60>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_FMPI2C1_Init+0x60>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_FMPI2C1_Init+0x60>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_FMPI2C1_Init+0x60>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <MX_FMPI2C1_Init+0x60>)
 8001228:	f002 fa50 	bl	80036cc <HAL_FMPI2C_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8001232:	f000 fb2d 	bl	8001890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_FMPI2C1_Init+0x60>)
 800123a:	f002 fae2 	bl	8003802 <HAL_FMPI2CEx_ConfigAnalogFilter>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001244:	f000 fb24 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200001e8 	.word	0x200001e8
 8001250:	40006000 	.word	0x40006000
 8001254:	00a0a3f7 	.word	0x00a0a3f7

08001258 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C3_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C3_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C3_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C3_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C3_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C3_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C3_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C3_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C3_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C3_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C3_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C3_Init+0x50>)
 8001296:	f002 fcad 	bl	8003bf4 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 faf6 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000023c 	.word	0x2000023c
 80012ac:	40005c00 	.word	0x40005c00
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <MX_QUADSPI_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012c0:	22ff      	movs	r2, #255	; 0xff
 80012c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_QUADSPI_Init+0x50>)
 80012f0:	f002 fdc4 	bl	8003e7c <HAL_QSPI_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80012fa:	f000 fac9 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000290 	.word	0x20000290
 8001308:	a0001000 	.word	0xa0001000

0800130c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_SPI1_Init+0x64>)
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <MX_SPI1_Init+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_SPI1_Init+0x64>)
 8001318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800131c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_SPI1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_SPI1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_SPI1_Init+0x64>)
 8001338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800133c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_SPI1_Init+0x64>)
 8001340:	2220      	movs	r2, #32
 8001342:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_SPI1_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <MX_SPI1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_SPI1_Init+0x64>)
 8001358:	220a      	movs	r2, #10
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_SPI1_Init+0x64>)
 800135e:	f003 fec7 	bl	80050f0 <HAL_SPI_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001368:	f000 fa92 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002dc 	.word	0x200002dc
 8001374:	40013000 	.word	0x40013000

08001378 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_Init 1 */


  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_SPI2_Init+0x64>)
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <MX_SPI2_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_SPI2_Init+0x64>)
 8001384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_SPI2_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_SPI2_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_SPI2_Init+0x64>)
 8001398:	2202      	movs	r2, #2
 800139a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_SPI2_Init+0x64>)
 800139e:	2201      	movs	r2, #1
 80013a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_SPI2_Init+0x64>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_SPI2_Init+0x64>)
 80013ac:	2220      	movs	r2, #32
 80013ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_SPI2_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_SPI2_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_SPI2_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_SPI2_Init+0x64>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_SPI2_Init+0x64>)
 80013ca:	f003 fe91 	bl	80050f0 <HAL_SPI_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013d4:	f000 fa5c 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000334 	.word	0x20000334
 80013e0:	40003800 	.word	0x40003800

080013e4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_SPI4_Init+0x64>)
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <MX_SPI4_Init+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_SPI4_Init+0x64>)
 80013f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_SPI4_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_SPI4_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_SPI4_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_SPI4_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_SPI4_Init+0x64>)
 8001410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001414:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_SPI4_Init+0x64>)
 8001418:	2220      	movs	r2, #32
 800141a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_SPI4_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_SPI4_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_SPI4_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_SPI4_Init+0x64>)
 8001430:	220a      	movs	r2, #10
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_SPI4_Init+0x64>)
 8001436:	f003 fe5b 	bl	80050f0 <HAL_SPI_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001440:	f000 fa26 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000038c 	.word	0x2000038c
 800144c:	40013400 	.word	0x40013400

08001450 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_TIM3_Init+0x94>)
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <MX_TIM3_Init+0x98>)
 8001470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_TIM3_Init+0x94>)
 8001474:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001478:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_TIM3_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_TIM3_Init+0x94>)
 8001482:	2263      	movs	r2, #99	; 0x63
 8001484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_TIM3_Init+0x94>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_TIM3_Init+0x94>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001492:	4814      	ldr	r0, [pc, #80]	; (80014e4 <MX_TIM3_Init+0x94>)
 8001494:	f004 fa84 	bl	80059a0 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800149e:	f000 f9f7 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	4619      	mov	r1, r3
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_TIM3_Init+0x94>)
 80014b0:	f004 fbd6 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014ba:	f000 f9e9 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_TIM3_Init+0x94>)
 80014cc:	f004 ff86 	bl	80063dc <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014d6:	f000 f9db 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000624 	.word	0x20000624
 80014e8:	40000400 	.word	0x40000400

080014ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <MX_TIM4_Init+0xe8>)
 8001510:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <MX_TIM4_Init+0xec>)
 8001512:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 466-1;
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <MX_TIM4_Init+0xe8>)
 8001516:	f240 12d1 	movw	r2, #465	; 0x1d1
 800151a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <MX_TIM4_Init+0xe8>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600-1;
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <MX_TIM4_Init+0xe8>)
 8001524:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001528:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <MX_TIM4_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_TIM4_Init+0xe8>)
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001536:	4827      	ldr	r0, [pc, #156]	; (80015d4 <MX_TIM4_Init+0xe8>)
 8001538:	f004 fa81 	bl	8005a3e <HAL_TIM_PWM_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001542:	f000 f9a5 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	4619      	mov	r1, r3
 8001554:	481f      	ldr	r0, [pc, #124]	; (80015d4 <MX_TIM4_Init+0xe8>)
 8001556:	f004 ff41 	bl	80063dc <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001560:	f000 f996 	bl	8001890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001564:	2360      	movs	r3, #96	; 0x60
 8001566:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 290;
 8001568:	f44f 7391 	mov.w	r3, #290	; 0x122
 800156c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2204      	movs	r2, #4
 800157a:	4619      	mov	r1, r3
 800157c:	4815      	ldr	r0, [pc, #84]	; (80015d4 <MX_TIM4_Init+0xe8>)
 800157e:	f004 faad 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001588:	f000 f982 	bl	8001890 <Error_Handler>
  }
  sConfigOC.Pulse = 270;
 800158c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001590:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2208      	movs	r2, #8
 8001596:	4619      	mov	r1, r3
 8001598:	480e      	ldr	r0, [pc, #56]	; (80015d4 <MX_TIM4_Init+0xe8>)
 800159a:	f004 fa9f 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM4_Init+0xbc>
  {
    Error_Handler();
 80015a4:	f000 f974 	bl	8001890 <Error_Handler>
  }
  sConfigOC.Pulse = 280;
 80015a8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	220c      	movs	r2, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM4_Init+0xe8>)
 80015b6:	f004 fa91 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80015c0:	f000 f966 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM4_Init+0xe8>)
 80015c6:	f000 ff37 	bl	8002438 <HAL_TIM_MspPostInit>

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000066c 	.word	0x2000066c
 80015d8:	40000800 	.word	0x40000800

080015dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <MX_DMA_Init+0xe8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a36      	ldr	r2, [pc, #216]	; (80016c4 <MX_DMA_Init+0xe8>)
 80015ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <MX_DMA_Init+0xe8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <MX_DMA_Init+0xe8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <MX_DMA_Init+0xe8>)
 8001608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <MX_DMA_Init+0xe8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	200e      	movs	r0, #14
 8001620:	f001 fd33 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001624:	200e      	movs	r0, #14
 8001626:	f001 fd4c 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	200f      	movs	r0, #15
 8001630:	f001 fd2b 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001634:	200f      	movs	r0, #15
 8001636:	f001 fd44 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2011      	movs	r0, #17
 8001640:	f001 fd23 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001644:	2011      	movs	r0, #17
 8001646:	f001 fd3c 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	202f      	movs	r0, #47	; 0x2f
 8001650:	f001 fd1b 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001654:	202f      	movs	r0, #47	; 0x2f
 8001656:	f001 fd34 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2038      	movs	r0, #56	; 0x38
 8001660:	f001 fd13 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001664:	2038      	movs	r0, #56	; 0x38
 8001666:	f001 fd2c 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2039      	movs	r0, #57	; 0x39
 8001670:	f001 fd0b 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001674:	2039      	movs	r0, #57	; 0x39
 8001676:	f001 fd24 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	203a      	movs	r0, #58	; 0x3a
 8001680:	f001 fd03 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001684:	203a      	movs	r0, #58	; 0x3a
 8001686:	f001 fd1c 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	203b      	movs	r0, #59	; 0x3b
 8001690:	f001 fcfb 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001694:	203b      	movs	r0, #59	; 0x3b
 8001696:	f001 fd14 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	203c      	movs	r0, #60	; 0x3c
 80016a0:	f001 fcf3 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80016a4:	203c      	movs	r0, #60	; 0x3c
 80016a6:	f001 fd0c 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2044      	movs	r0, #68	; 0x44
 80016b0:	f001 fceb 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80016b4:	2044      	movs	r0, #68	; 0x44
 80016b6:	f001 fd04 	bl	80030c2 <HAL_NVIC_EnableIRQ>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <MX_GPIO_Init+0x1b0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a64      	ldr	r2, [pc, #400]	; (8001878 <MX_GPIO_Init+0x1b0>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b62      	ldr	r3, [pc, #392]	; (8001878 <MX_GPIO_Init+0x1b0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	4b5e      	ldr	r3, [pc, #376]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a5d      	ldr	r2, [pc, #372]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <MX_GPIO_Init+0x1b0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b57      	ldr	r3, [pc, #348]	; (8001878 <MX_GPIO_Init+0x1b0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a56      	ldr	r2, [pc, #344]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b54      	ldr	r3, [pc, #336]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b50      	ldr	r3, [pc, #320]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a4f      	ldr	r2, [pc, #316]	; (8001878 <MX_GPIO_Init+0x1b0>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	4b49      	ldr	r3, [pc, #292]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a48      	ldr	r2, [pc, #288]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b46      	ldr	r3, [pc, #280]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b42      	ldr	r3, [pc, #264]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a41      	ldr	r2, [pc, #260]	; (8001878 <MX_GPIO_Init+0x1b0>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <MX_GPIO_Init+0x1b0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001786:	2200      	movs	r2, #0
 8001788:	f248 013e 	movw	r1, #32830	; 0x803e
 800178c:	483b      	ldr	r0, [pc, #236]	; (800187c <MX_GPIO_Init+0x1b4>)
 800178e:	f002 fa17 	bl	8003bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2108      	movs	r1, #8
 8001796:	483a      	ldr	r0, [pc, #232]	; (8001880 <MX_GPIO_Init+0x1b8>)
 8001798:	f002 fa12 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80017a2:	4838      	ldr	r0, [pc, #224]	; (8001884 <MX_GPIO_Init+0x1bc>)
 80017a4:	f002 fa0c 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_3
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 80017ae:	4836      	ldr	r0, [pc, #216]	; (8001888 <MX_GPIO_Init+0x1c0>)
 80017b0:	f002 fa06 	bl	8003bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	21c0      	movs	r1, #192	; 0xc0
 80017b8:	4834      	ldr	r0, [pc, #208]	; (800188c <MX_GPIO_Init+0x1c4>)
 80017ba:	f002 fa01 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80017be:	f248 033e 	movw	r3, #32830	; 0x803e
 80017c2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	4829      	ldr	r0, [pc, #164]	; (800187c <MX_GPIO_Init+0x1b4>)
 80017d8:	f002 f85e 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017dc:	2308      	movs	r3, #8
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4823      	ldr	r0, [pc, #140]	; (8001880 <MX_GPIO_Init+0x1b8>)
 80017f4:	f002 f850 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80017f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	481c      	ldr	r0, [pc, #112]	; (8001884 <MX_GPIO_Init+0x1bc>)
 8001812:	f002 f841 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_3|GPIO_PIN_4
 8001816:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800181a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	4816      	ldr	r0, [pc, #88]	; (8001888 <MX_GPIO_Init+0x1c0>)
 8001830:	f002 f832 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183e:	2301      	movs	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	480e      	ldr	r0, [pc, #56]	; (8001888 <MX_GPIO_Init+0x1c0>)
 800184e:	f002 f823 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001852:	23c0      	movs	r3, #192	; 0xc0
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4808      	ldr	r0, [pc, #32]	; (800188c <MX_GPIO_Init+0x1c4>)
 800186a:	f002 f815 	bl	8003898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40021000 	.word	0x40021000
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020c00 	.word	0x40020c00
 800188c:	40020800 	.word	0x40020800

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>
	...

0800189c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_MspInit+0x4c>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_MspInit+0x4c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <HAL_MspInit+0x4c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_MspInit+0x4c>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b092      	sub	sp, #72	; 0x48
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a79      	ldr	r2, [pc, #484]	; (8001af0 <HAL_ADC_MspInit+0x204>)
 800190a:	4293      	cmp	r3, r2
 800190c:	f040 808e 	bne.w	8001a2c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
 8001914:	4b77      	ldr	r3, [pc, #476]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	4a76      	ldr	r2, [pc, #472]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6453      	str	r3, [r2, #68]	; 0x44
 8001920:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001930:	4b70      	ldr	r3, [pc, #448]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	4a6f      	ldr	r2, [pc, #444]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6313      	str	r3, [r2, #48]	; 0x30
 800193c:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
 800194c:	4b69      	ldr	r3, [pc, #420]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	4a68      	ldr	r2, [pc, #416]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6313      	str	r3, [r2, #48]	; 0x30
 8001958:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	4b62      	ldr	r3, [pc, #392]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a61      	ldr	r2, [pc, #388]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001980:	23a0      	movs	r3, #160	; 0xa0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001984:	2303      	movs	r3, #3
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001990:	4619      	mov	r1, r3
 8001992:	4859      	ldr	r0, [pc, #356]	; (8001af8 <HAL_ADC_MspInit+0x20c>)
 8001994:	f001 ff80 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001998:	2320      	movs	r3, #32
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199c:	2303      	movs	r3, #3
 800199e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019a8:	4619      	mov	r1, r3
 80019aa:	4854      	ldr	r0, [pc, #336]	; (8001afc <HAL_ADC_MspInit+0x210>)
 80019ac:	f001 ff74 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019b0:	2302      	movs	r3, #2
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b4:	2303      	movs	r3, #3
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019c0:	4619      	mov	r1, r3
 80019c2:	484f      	ldr	r0, [pc, #316]	; (8001b00 <HAL_ADC_MspInit+0x214>)
 80019c4:	f001 ff68 	bl	8003898 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80019c8:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 80019ca:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <HAL_ADC_MspInit+0x21c>)
 80019cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d4:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 80019e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 80019ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019f8:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 80019fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a00:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 8001a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a08:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a0e:	483d      	ldr	r0, [pc, #244]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 8001a10:	f001 fb72 	bl	80030f8 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8001a1a:	f7ff ff39 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a38      	ldr	r2, [pc, #224]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
 8001a24:	4a37      	ldr	r2, [pc, #220]	; (8001b04 <HAL_ADC_MspInit+0x218>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a2a:	e0ce      	b.n	8001bca <HAL_ADC_MspInit+0x2de>
  else if(hadc->Instance==ADC2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <HAL_ADC_MspInit+0x220>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d16c      	bne.n	8001b10 <HAL_ADC_MspInit+0x224>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_ADC_MspInit+0x208>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001aa6:	2350      	movs	r3, #80	; 0x50
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480f      	ldr	r0, [pc, #60]	; (8001af8 <HAL_ADC_MspInit+0x20c>)
 8001aba:	f001 feed 	bl	8003898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480a      	ldr	r0, [pc, #40]	; (8001afc <HAL_ADC_MspInit+0x210>)
 8001ad2:	f001 fee1 	bl	8003898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ada:	2303      	movs	r3, #3
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <HAL_ADC_MspInit+0x214>)
 8001aea:	f001 fed5 	bl	8003898 <HAL_GPIO_Init>
}
 8001aee:	e06c      	b.n	8001bca <HAL_ADC_MspInit+0x2de>
 8001af0:	40012000 	.word	0x40012000
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020400 	.word	0x40020400
 8001b04:	20000100 	.word	0x20000100
 8001b08:	40026470 	.word	0x40026470
 8001b0c:	40012100 	.word	0x40012100
  else if(hadc->Instance==ADC3)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <HAL_ADC_MspInit+0x2e8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d157      	bne.n	8001bca <HAL_ADC_MspInit+0x2de>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_ADC_MspInit+0x2ec>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <HAL_ADC_MspInit+0x2ec>)
 8001b24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_ADC_MspInit+0x2ec>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_ADC_MspInit+0x2ec>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_ADC_MspInit+0x2ec>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_ADC_MspInit+0x2ec>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b52:	2307      	movs	r3, #7
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b62:	4619      	mov	r1, r3
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <HAL_ADC_MspInit+0x2f0>)
 8001b66:	f001 fe97 	bl	8003898 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_ADC_MspInit+0x2f8>)
 8001b6e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001b72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b76:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001b8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b92:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001bae:	480c      	ldr	r0, [pc, #48]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001bb0:	f001 faa2 	bl	80030f8 <HAL_DMA_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_ADC_MspInit+0x2d2>
      Error_Handler();
 8001bba:	f7ff fe69 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_ADC_MspInit+0x2f4>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bca:	bf00      	nop
 8001bcc:	3748      	adds	r7, #72	; 0x48
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40012200 	.word	0x40012200
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	20000160 	.word	0x20000160
 8001be4:	40026410 	.word	0x40026410

08001be8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_CAN_MspInit+0x84>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12b      	bne.n	8001c62 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_CAN_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c42:	2303      	movs	r3, #3
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c52:	2309      	movs	r3, #9
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <HAL_CAN_MspInit+0x8c>)
 8001c5e:	f001 fe1b 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	; 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40006400 	.word	0x40006400
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020c00 	.word	0x40020c00

08001c78 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0a0      	sub	sp, #128	; 0x80
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	225c      	movs	r2, #92	; 0x5c
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f004 fc1b 	bl	80064d4 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_FMPI2C_MspInit+0xb0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d13a      	bne.n	8001d1e <HAL_FMPI2C_MspInit+0xa6>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8001cac:	2300      	movs	r3, #0
 8001cae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 faa9 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cc0:	f7ff fde6 	bl	8001890 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_FMPI2C_MspInit+0xb4>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_FMPI2C_MspInit+0xb4>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_FMPI2C_MspInit+0xb4>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PD12     ------> FMPI2C1_SCL
    PD13     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ce0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <HAL_FMPI2C_MspInit+0xb8>)
 8001cfe:	f001 fdcb 	bl	8003898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_FMPI2C_MspInit+0xb4>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_FMPI2C_MspInit+0xb4>)
 8001d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_FMPI2C_MspInit+0xb4>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3780      	adds	r7, #128	; 0x80
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40006000 	.word	0x40006000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020c00 	.word	0x40020c00

08001d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_I2C_MspInit+0xc4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d14b      	bne.n	8001dee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d94:	2312      	movs	r3, #18
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001da0:	2304      	movs	r3, #4
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4815      	ldr	r0, [pc, #84]	; (8001e00 <HAL_I2C_MspInit+0xcc>)
 8001dac:	f001 fd74 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db6:	2312      	movs	r3, #18
 8001db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <HAL_I2C_MspInit+0xd0>)
 8001dce:	f001 fd63 	bl	8003898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_I2C_MspInit+0xc8>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40005c00 	.word	0x40005c00
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020000 	.word	0x40020000

08001e08 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a38      	ldr	r2, [pc, #224]	; (8001f08 <HAL_QSPI_MspInit+0x100>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d169      	bne.n	8001efe <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6393      	str	r3, [r2, #56]	; 0x38
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_QSPI_MspInit+0x104>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001eaa:	2309      	movs	r3, #9
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4816      	ldr	r0, [pc, #88]	; (8001f10 <HAL_QSPI_MspInit+0x108>)
 8001eb6:	f001 fcef 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001eba:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001ecc:	230a      	movs	r3, #10
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480f      	ldr	r0, [pc, #60]	; (8001f14 <HAL_QSPI_MspInit+0x10c>)
 8001ed8:	f001 fcde 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001eee:	2309      	movs	r3, #9
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4807      	ldr	r0, [pc, #28]	; (8001f18 <HAL_QSPI_MspInit+0x110>)
 8001efa:	f001 fccd 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001efe:	bf00      	nop
 8001f00:	3730      	adds	r7, #48	; 0x30
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	a0001000 	.word	0xa0001000
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40020800 	.word	0x40020800

08001f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08e      	sub	sp, #56	; 0x38
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a8d      	ldr	r2, [pc, #564]	; (8002170 <HAL_SPI_MspInit+0x254>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	f040 8089 	bne.w	8002052 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
 8001f44:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	4a8a      	ldr	r2, [pc, #552]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8001f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f50:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f58:	623b      	str	r3, [r7, #32]
 8001f5a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	4b84      	ldr	r3, [pc, #528]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a83      	ldr	r2, [pc, #524]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b81      	ldr	r3, [pc, #516]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f78:	2338      	movs	r3, #56	; 0x38
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f88:	2305      	movs	r3, #5
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	4879      	ldr	r0, [pc, #484]	; (8002178 <HAL_SPI_MspInit+0x25c>)
 8001f94:	f001 fc80 	bl	8003898 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8001f98:	4b78      	ldr	r3, [pc, #480]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001f9a:	4a79      	ldr	r2, [pc, #484]	; (8002180 <HAL_SPI_MspInit+0x264>)
 8001f9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f9e:	4b77      	ldr	r3, [pc, #476]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fa0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001fa4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa6:	4b75      	ldr	r3, [pc, #468]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fac:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb2:	4b72      	ldr	r3, [pc, #456]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc0:	4b6e      	ldr	r3, [pc, #440]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fcc:	4b6b      	ldr	r3, [pc, #428]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd2:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001fd8:	4868      	ldr	r0, [pc, #416]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fda:	f001 f88d 	bl	80030f8 <HAL_DMA_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001fe4:	f7ff fc54 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a64      	ldr	r2, [pc, #400]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001fec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fee:	4a63      	ldr	r2, [pc, #396]	; (800217c <HAL_SPI_MspInit+0x260>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8001ff4:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8001ff6:	4a64      	ldr	r2, [pc, #400]	; (8002188 <HAL_SPI_MspInit+0x26c>)
 8001ff8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001ffa:	4b62      	ldr	r3, [pc, #392]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8001ffc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002000:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8002004:	2240      	movs	r2, #64	; 0x40
 8002006:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002008:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <HAL_SPI_MspInit+0x268>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8002010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002014:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002016:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_SPI_MspInit+0x268>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002022:	4b58      	ldr	r3, [pc, #352]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8002024:	2200      	movs	r2, #0
 8002026:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <HAL_SPI_MspInit+0x268>)
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800202e:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8002030:	2200      	movs	r2, #0
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002034:	4853      	ldr	r0, [pc, #332]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8002036:	f001 f85f 	bl	80030f8 <HAL_DMA_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002040:	f7ff fc26 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a4f      	ldr	r2, [pc, #316]	; (8002184 <HAL_SPI_MspInit+0x268>)
 8002048:	649a      	str	r2, [r3, #72]	; 0x48
 800204a:	4a4e      	ldr	r2, [pc, #312]	; (8002184 <HAL_SPI_MspInit+0x268>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002050:	e135      	b.n	80022be <HAL_SPI_MspInit+0x3a2>
  else if(hspi->Instance==SPI2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a4d      	ldr	r2, [pc, #308]	; (800218c <HAL_SPI_MspInit+0x270>)
 8002058:	4293      	cmp	r3, r2
 800205a:	f040 80a1 	bne.w	80021a0 <HAL_SPI_MspInit+0x284>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	4b44      	ldr	r3, [pc, #272]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a43      	ldr	r2, [pc, #268]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a3c      	ldr	r2, [pc, #240]	; (8002174 <HAL_SPI_MspInit+0x258>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_SPI_MspInit+0x258>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002096:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a8:	2305      	movs	r3, #5
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4831      	ldr	r0, [pc, #196]	; (8002178 <HAL_SPI_MspInit+0x25c>)
 80020b4:	f001 fbf0 	bl	8003898 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80020b8:	4b35      	ldr	r3, [pc, #212]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020ba:	4a36      	ldr	r2, [pc, #216]	; (8002194 <HAL_SPI_MspInit+0x278>)
 80020bc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80020be:	4b34      	ldr	r3, [pc, #208]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c4:	4b32      	ldr	r3, [pc, #200]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ca:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020da:	2200      	movs	r2, #0
 80020dc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020de:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80020f6:	4826      	ldr	r0, [pc, #152]	; (8002190 <HAL_SPI_MspInit+0x274>)
 80020f8:	f000 fffe 	bl	80030f8 <HAL_DMA_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8002102:	f7ff fbc5 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a21      	ldr	r2, [pc, #132]	; (8002190 <HAL_SPI_MspInit+0x274>)
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
 800210c:	4a20      	ldr	r2, [pc, #128]	; (8002190 <HAL_SPI_MspInit+0x274>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002114:	4a21      	ldr	r2, [pc, #132]	; (800219c <HAL_SPI_MspInit+0x280>)
 8002116:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800211e:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002120:	2240      	movs	r2, #64	; 0x40
 8002122:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 800212c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002130:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 800214c:	2200      	movs	r2, #0
 800214e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002150:	4811      	ldr	r0, [pc, #68]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002152:	f000 ffd1 	bl	80030f8 <HAL_DMA_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 800215c:	f7ff fb98 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002164:	649a      	str	r2, [r3, #72]	; 0x48
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <HAL_SPI_MspInit+0x27c>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800216c:	e0a7      	b.n	80022be <HAL_SPI_MspInit+0x3a2>
 800216e:	bf00      	nop
 8002170:	40013000 	.word	0x40013000
 8002174:	40023800 	.word	0x40023800
 8002178:	40020400 	.word	0x40020400
 800217c:	200003e4 	.word	0x200003e4
 8002180:	40026440 	.word	0x40026440
 8002184:	20000444 	.word	0x20000444
 8002188:	40026488 	.word	0x40026488
 800218c:	40003800 	.word	0x40003800
 8002190:	200004a4 	.word	0x200004a4
 8002194:	40026058 	.word	0x40026058
 8002198:	20000504 	.word	0x20000504
 800219c:	40026070 	.word	0x40026070
  else if(hspi->Instance==SPI4)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a48      	ldr	r2, [pc, #288]	; (80022c8 <HAL_SPI_MspInit+0x3ac>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	f040 8089 	bne.w	80022be <HAL_SPI_MspInit+0x3a2>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_SPI_MspInit+0x3b0>)
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	4a45      	ldr	r2, [pc, #276]	; (80022cc <HAL_SPI_MspInit+0x3b0>)
 80021b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ba:	6453      	str	r3, [r2, #68]	; 0x44
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_SPI_MspInit+0x3b0>)
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_SPI_MspInit+0x3b0>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a3e      	ldr	r2, [pc, #248]	; (80022cc <HAL_SPI_MspInit+0x3b0>)
 80021d2:	f043 0310 	orr.w	r3, r3, #16
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <HAL_SPI_MspInit+0x3b0>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80021e4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80021f6:	2305      	movs	r3, #5
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4833      	ldr	r0, [pc, #204]	; (80022d0 <HAL_SPI_MspInit+0x3b4>)
 8002202:	f001 fb49 	bl	8003898 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 8002208:	4a33      	ldr	r2, [pc, #204]	; (80022d8 <HAL_SPI_MspInit+0x3bc>)
 800220a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 800220e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002212:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002214:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002220:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 8002222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002226:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 800222a:	2200      	movs	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 800223c:	2200      	movs	r2, #0
 800223e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 8002242:	2200      	movs	r2, #0
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002246:	4823      	ldr	r0, [pc, #140]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 8002248:	f000 ff56 	bl	80030f8 <HAL_DMA_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_SPI_MspInit+0x33a>
      Error_Handler();
 8002252:	f7ff fb1d 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 800225a:	64da      	str	r2, [r3, #76]	; 0x4c
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_SPI_MspInit+0x3b8>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 8002264:	4a1e      	ldr	r2, [pc, #120]	; (80022e0 <HAL_SPI_MspInit+0x3c4>)
 8002266:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 800226a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800226e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800227c:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 800227e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002282:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80022a2:	480e      	ldr	r0, [pc, #56]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 80022a4:	f000 ff28 	bl	80030f8 <HAL_DMA_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_SPI_MspInit+0x396>
      Error_Handler();
 80022ae:	f7ff faef 	bl	8001890 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 80022b6:	649a      	str	r2, [r3, #72]	; 0x48
 80022b8:	4a08      	ldr	r2, [pc, #32]	; (80022dc <HAL_SPI_MspInit+0x3c0>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022be:	bf00      	nop
 80022c0:	3738      	adds	r7, #56	; 0x38
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40013400 	.word	0x40013400
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40021000 	.word	0x40021000
 80022d4:	20000564 	.word	0x20000564
 80022d8:	40026458 	.word	0x40026458
 80022dc:	200005c4 	.word	0x200005c4
 80022e0:	40026428 	.word	0x40026428

080022e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <HAL_TIM_Base_MspInit+0x3c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10d      	bne.n	8002312 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_TIM_Base_MspInit+0x40>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_TIM_Base_MspInit+0x40>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_TIM_Base_MspInit+0x40>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40000400 	.word	0x40000400
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <HAL_TIM_PWM_MspInit+0xf8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d16d      	bne.n	8002416 <HAL_TIM_PWM_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_TIM_PWM_MspInit+0xfc>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a38      	ldr	r2, [pc, #224]	; (8002424 <HAL_TIM_PWM_MspInit+0xfc>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_TIM_PWM_MspInit+0xfc>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_UP Init */
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 8002358:	4a34      	ldr	r2, [pc, #208]	; (800242c <HAL_TIM_PWM_MspInit+0x104>)
 800235a:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 800235e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002362:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800236a:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 8002372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002376:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 800237a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800237e:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 8002382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002386:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002394:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 800239a:	4823      	ldr	r0, [pc, #140]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 800239c:	f000 feac 	bl	80030f8 <HAL_DMA_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80023a6:	f7ff fa73 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_TIM_PWM_MspInit+0x100>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023b8:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <HAL_TIM_PWM_MspInit+0x10c>)
 80023ba:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023c2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ca:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023de:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80023fa:	480d      	ldr	r0, [pc, #52]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 80023fc:	f000 fe7c 	bl	80030f8 <HAL_DMA_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_TIM_PWM_MspInit+0xe2>
    {
      Error_Handler();
 8002406:	f7ff fa43 	bl	8001890 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_TIM_PWM_MspInit+0x108>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40000800 	.word	0x40000800
 8002424:	40023800 	.word	0x40023800
 8002428:	200006b4 	.word	0x200006b4
 800242c:	400260a0 	.word	0x400260a0
 8002430:	20000714 	.word	0x20000714
 8002434:	400260b8 	.word	0x400260b8

08002438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <HAL_TIM_MspPostInit+0x68>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d11e      	bne.n	8002498 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_TIM_MspPostInit+0x6c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002476:	f44f 7360 	mov.w	r3, #896	; 0x380
 800247a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002488:	2302      	movs	r3, #2
 800248a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <HAL_TIM_MspPostInit+0x70>)
 8002494:	f001 fa00 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020400 	.word	0x40020400

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b0:	e7fe      	b.n	80024b0 <NMI_Handler+0x4>

080024b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <HardFault_Handler+0x4>

080024b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <MemManage_Handler+0x4>

080024be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <UsageFault_Handler+0x4>

080024ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f8:	f000 f8f4 	bl	80026e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}

08002500 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <DMA1_Stream3_IRQHandler+0x10>)
 8002506:	f000 fea5 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200004a4 	.word	0x200004a4

08002514 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <DMA1_Stream4_IRQHandler+0x10>)
 800251a:	f000 fe9b 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000504 	.word	0x20000504

08002528 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <DMA1_Stream6_IRQHandler+0x10>)
 800252e:	f000 fe91 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200006b4 	.word	0x200006b4

0800253c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <DMA1_Stream7_IRQHandler+0x10>)
 8002542:	f000 fe87 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000714 	.word	0x20000714

08002550 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DMA2_Stream0_IRQHandler+0x10>)
 8002556:	f000 fe7d 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000160 	.word	0x20000160

08002564 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <DMA2_Stream1_IRQHandler+0x10>)
 800256a:	f000 fe73 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200005c4 	.word	0x200005c4

08002578 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <DMA2_Stream2_IRQHandler+0x10>)
 800257e:	f000 fe69 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200003e4 	.word	0x200003e4

0800258c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <DMA2_Stream3_IRQHandler+0x10>)
 8002592:	f000 fe5f 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000564 	.word	0x20000564

080025a0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <DMA2_Stream4_IRQHandler+0x10>)
 80025a6:	f000 fe55 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000100 	.word	0x20000100

080025b4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA2_Stream5_IRQHandler+0x10>)
 80025ba:	f000 fe4b 	bl	8003254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000444 	.word	0x20000444

080025c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <SystemInit+0x20>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <SystemInit+0x20>)
 80025d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025f0:	f7ff ffea 	bl	80025c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f4:	480c      	ldr	r0, [pc, #48]	; (8002628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025f6:	490d      	ldr	r1, [pc, #52]	; (800262c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800260c:	4c0a      	ldr	r4, [pc, #40]	; (8002638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800261a:	f003 ff63 	bl	80064e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261e:	f7fe fbaf 	bl	8000d80 <main>
  bx  lr    
 8002622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800262c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002630:	08006930 	.word	0x08006930
  ldr r2, =_sbss
 8002634:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002638:	20000778 	.word	0x20000778

0800263c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC_IRQHandler>
	...

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_Init+0x40>)
 800264a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_Init+0x40>)
 8002656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_Init+0x40>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002668:	2003      	movs	r0, #3
 800266a:	f000 fd03 	bl	8003074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266e:	200f      	movs	r0, #15
 8002670:	f000 f808 	bl	8002684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002674:	f7ff f912 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x54>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x58>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	fbb3 f3f1 	udiv	r3, r3, r1
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fd1b 	bl	80030de <HAL_SYSTICK_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00e      	b.n	80026d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d80a      	bhi.n	80026ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f000 fce3 	bl	800308a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_InitTick+0x5c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000008 	.word	0x20000008
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x20>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x24>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_IncTick+0x24>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008
 8002708:	20000774 	.word	0x20000774

0800270c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000774 	.word	0x20000774

08002724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff ffee 	bl	800270c <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d005      	beq.n	800274a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_Delay+0x44>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800274a:	bf00      	nop
 800274c:	f7ff ffde 	bl	800270c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f7      	bhi.n	800274c <HAL_Delay+0x28>
  {
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000008 	.word	0x20000008

0800276c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e033      	b.n	80027ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff f8ae 	bl	80018ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027b2:	f023 0302 	bic.w	r3, r3, #2
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f94a 	bl	8002a58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
 80027da:	e001      	b.n	80027e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1c>
 800280c:	2302      	movs	r3, #2
 800280e:	e113      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x244>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b09      	cmp	r3, #9
 800281e:	d925      	bls.n	800286c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68d9      	ldr	r1, [r3, #12]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	3b1e      	subs	r3, #30
 8002836:	2207      	movs	r2, #7
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43da      	mvns	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	400a      	ands	r2, r1
 8002844:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68d9      	ldr	r1, [r3, #12]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	4603      	mov	r3, r0
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4403      	add	r3, r0
 800285e:	3b1e      	subs	r3, #30
 8002860:	409a      	lsls	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	e022      	b.n	80028b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	2207      	movs	r2, #7
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	400a      	ands	r2, r1
 800288e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6919      	ldr	r1, [r3, #16]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4403      	add	r3, r0
 80028a8:	409a      	lsls	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d824      	bhi.n	8002904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	3b05      	subs	r3, #5
 80028cc:	221f      	movs	r2, #31
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	400a      	ands	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	3b05      	subs	r3, #5
 80028f6:	fa00 f203 	lsl.w	r2, r0, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
 8002902:	e04c      	b.n	800299e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d824      	bhi.n	8002956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b23      	subs	r3, #35	; 0x23
 800291e:	221f      	movs	r2, #31
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43da      	mvns	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	400a      	ands	r2, r1
 800292c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	4618      	mov	r0, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3b23      	subs	r3, #35	; 0x23
 8002948:	fa00 f203 	lsl.w	r2, r0, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
 8002954:	e023      	b.n	800299e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b41      	subs	r3, #65	; 0x41
 8002968:	221f      	movs	r2, #31
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	400a      	ands	r2, r1
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b41      	subs	r3, #65	; 0x41
 8002992:	fa00 f203 	lsl.w	r2, r0, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299e:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <HAL_ADC_ConfigChannel+0x250>)
 80029a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <HAL_ADC_ConfigChannel+0x254>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d10f      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d8>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b12      	cmp	r3, #18
 80029b2:	d10b      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <HAL_ADC_ConfigChannel+0x254>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d12b      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x23a>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_ADC_ConfigChannel+0x258>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x1f4>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d122      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_ADC_ConfigChannel+0x258>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d111      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_ADC_ConfigChannel+0x25c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_ADC_ConfigChannel+0x260>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	0c9a      	lsrs	r2, r3, #18
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a20:	e002      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f9      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40012300 	.word	0x40012300
 8002a48:	40012000 	.word	0x40012000
 8002a4c:	10000012 	.word	0x10000012
 8002a50:	20000000 	.word	0x20000000
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a60:	4b79      	ldr	r3, [pc, #484]	; (8002c48 <ADC_Init+0x1f0>)
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6899      	ldr	r1, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <ADC_Init+0x1f4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d022      	beq.n	8002b36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6899      	ldr	r1, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	e00f      	b.n	8002b56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0202 	bic.w	r2, r2, #2
 8002b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7e1b      	ldrb	r3, [r3, #24]
 8002b70:	005a      	lsls	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	035a      	lsls	r2, r3, #13
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e007      	b.n	8002bcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	051a      	lsls	r2, r3, #20
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6899      	ldr	r1, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c0e:	025a      	lsls	r2, r3, #9
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6899      	ldr	r1, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	029a      	lsls	r2, r3, #10
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40012300 	.word	0x40012300
 8002c4c:	0f000001 	.word	0x0f000001

08002c50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e031      	b.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f023 021f 	bic.w	r2, r3, #31
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40012300 	.word	0x40012300

08002cdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0ed      	b.n	8002eca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe ff74 	bl	8001be8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d10:	f7ff fcfc 	bl	800270c <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d16:	e012      	b.n	8002d3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d18:	f7ff fcf8 	bl	800270c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b0a      	cmp	r3, #10
 8002d24:	d90b      	bls.n	8002d3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2205      	movs	r2, #5
 8002d36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0c5      	b.n	8002eca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0e5      	beq.n	8002d18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0202 	bic.w	r2, r2, #2
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d5c:	f7ff fcd6 	bl	800270c <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d62:	e012      	b.n	8002d8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d64:	f7ff fcd2 	bl	800270c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b0a      	cmp	r3, #10
 8002d70:	d90b      	bls.n	8002d8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2205      	movs	r2, #5
 8002d82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e09f      	b.n	8002eca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e5      	bne.n	8002d64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7e1b      	ldrb	r3, [r3, #24]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d108      	bne.n	8002db2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e007      	b.n	8002dc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7e5b      	ldrb	r3, [r3, #25]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e007      	b.n	8002dec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7e9b      	ldrb	r3, [r3, #26]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d108      	bne.n	8002e06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0220 	orr.w	r2, r2, #32
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e007      	b.n	8002e16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0220 	bic.w	r2, r2, #32
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7edb      	ldrb	r3, [r3, #27]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d108      	bne.n	8002e30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0210 	bic.w	r2, r2, #16
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e007      	b.n	8002e40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0210 	orr.w	r2, r2, #16
 8002e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7f1b      	ldrb	r3, [r3, #28]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d108      	bne.n	8002e5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0208 	orr.w	r2, r2, #8
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e007      	b.n	8002e6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0208 	bic.w	r2, r2, #8
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	7f5b      	ldrb	r3, [r3, #29]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0204 	orr.w	r2, r2, #4
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e007      	b.n	8002e94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0204 	bic.w	r2, r2, #4
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	ea42 0103 	orr.w	r1, r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f06:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <__NVIC_SetPriorityGrouping+0x44>)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	60d3      	str	r3, [r2, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <__NVIC_GetPriorityGrouping+0x18>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	f003 0307 	and.w	r3, r3, #7
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	db0b      	blt.n	8002f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	f003 021f 	and.w	r2, r3, #31
 8002f50:	4907      	ldr	r1, [pc, #28]	; (8002f70 <__NVIC_EnableIRQ+0x38>)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2001      	movs	r0, #1
 8002f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000e100 	.word	0xe000e100

08002f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	db0a      	blt.n	8002f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	490c      	ldr	r1, [pc, #48]	; (8002fc0 <__NVIC_SetPriority+0x4c>)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	440b      	add	r3, r1
 8002f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f9c:	e00a      	b.n	8002fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <__NVIC_SetPriority+0x50>)
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	3b04      	subs	r3, #4
 8002fac:	0112      	lsls	r2, r2, #4
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	761a      	strb	r2, [r3, #24]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000e100 	.word	0xe000e100
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f1c3 0307 	rsb	r3, r3, #7
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	bf28      	it	cs
 8002fe6:	2304      	movcs	r3, #4
 8002fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2b06      	cmp	r3, #6
 8002ff0:	d902      	bls.n	8002ff8 <NVIC_EncodePriority+0x30>
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3b03      	subs	r3, #3
 8002ff6:	e000      	b.n	8002ffa <NVIC_EncodePriority+0x32>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	401a      	ands	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003010:	f04f 31ff 	mov.w	r1, #4294967295
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43d9      	mvns	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	4313      	orrs	r3, r2
         );
}
 8003022:	4618      	mov	r0, r3
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003040:	d301      	bcc.n	8003046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003042:	2301      	movs	r3, #1
 8003044:	e00f      	b.n	8003066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <SysTick_Config+0x40>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304e:	210f      	movs	r1, #15
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	f7ff ff8e 	bl	8002f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <SysTick_Config+0x40>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <SysTick_Config+0x40>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	e000e010 	.word	0xe000e010

08003074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff29 	bl	8002ed4 <__NVIC_SetPriorityGrouping>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800309c:	f7ff ff3e 	bl	8002f1c <__NVIC_GetPriorityGrouping>
 80030a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	6978      	ldr	r0, [r7, #20]
 80030a8:	f7ff ff8e 	bl	8002fc8 <NVIC_EncodePriority>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff5d 	bl	8002f74 <__NVIC_SetPriority>
}
 80030ba:	bf00      	nop
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff31 	bl	8002f38 <__NVIC_EnableIRQ>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff ffa2 	bl	8003030 <SysTick_Config>
 80030ec:	4603      	mov	r3, r0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff fb02 	bl	800270c <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e099      	b.n	8003248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003134:	e00f      	b.n	8003156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003136:	f7ff fae9 	bl	800270c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b05      	cmp	r3, #5
 8003142:	d908      	bls.n	8003156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2203      	movs	r2, #3
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e078      	b.n	8003248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e8      	bne.n	8003136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_DMA_Init+0x158>)
 8003170:	4013      	ands	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d107      	bne.n	80031c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	4313      	orrs	r3, r2
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0307 	bic.w	r3, r3, #7
 80031d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d117      	bne.n	800321a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f9e9 	bl	80035d4 <DMA_CheckFifoParam>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2240      	movs	r2, #64	; 0x40
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003216:	2301      	movs	r3, #1
 8003218:	e016      	b.n	8003248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9a0 	bl	8003568 <DMA_CalcBaseAndBitshift>
 8003228:	4603      	mov	r3, r0
 800322a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	223f      	movs	r2, #63	; 0x3f
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	f010803f 	.word	0xf010803f

08003254 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003260:	4b8e      	ldr	r3, [pc, #568]	; (800349c <HAL_DMA_IRQHandler+0x248>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a8e      	ldr	r2, [pc, #568]	; (80034a0 <HAL_DMA_IRQHandler+0x24c>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0a9b      	lsrs	r3, r3, #10
 800326c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	2208      	movs	r2, #8
 8003280:	409a      	lsls	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01a      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0204 	bic.w	r2, r2, #4
 80032a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	2208      	movs	r2, #8
 80032ae:	409a      	lsls	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f043 0201 	orr.w	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c4:	2201      	movs	r2, #1
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d012      	beq.n	80032f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	2201      	movs	r2, #1
 80032e4:	409a      	lsls	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f043 0202 	orr.w	r2, r3, #2
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	2204      	movs	r2, #4
 80032fc:	409a      	lsls	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d012      	beq.n	800332c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	2204      	movs	r2, #4
 800331a:	409a      	lsls	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	2210      	movs	r2, #16
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d043      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d03c      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	2210      	movs	r2, #16
 8003350:	409a      	lsls	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d018      	beq.n	8003396 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d024      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
 8003382:	e01f      	b.n	80033c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01b      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	e016      	b.n	80033c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0208 	bic.w	r2, r2, #8
 80033b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2220      	movs	r2, #32
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 808f 	beq.w	80034f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8087 	beq.w	80034f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2220      	movs	r2, #32
 80033ec:	409a      	lsls	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d136      	bne.n	800346c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0216 	bic.w	r2, r2, #22
 800340c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <HAL_DMA_IRQHandler+0x1da>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0208 	bic.w	r2, r2, #8
 800343c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	223f      	movs	r2, #63	; 0x3f
 8003444:	409a      	lsls	r2, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	2b00      	cmp	r3, #0
 8003460:	d07e      	beq.n	8003560 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
        }
        return;
 800346a:	e079      	b.n	8003560 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01d      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	2b00      	cmp	r3, #0
 800348e:	d031      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e02c      	b.n	80034f4 <HAL_DMA_IRQHandler+0x2a0>
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000
 80034a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d023      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
 80034b4:	e01e      	b.n	80034f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10f      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0210 	bic.w	r2, r2, #16
 80034d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d032      	beq.n	8003562 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2205      	movs	r2, #5
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0201 	bic.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	3301      	adds	r3, #1
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	429a      	cmp	r2, r3
 800352a:	d307      	bcc.n	800353c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f2      	bne.n	8003520 <HAL_DMA_IRQHandler+0x2cc>
 800353a:	e000      	b.n	800353e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800353c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
 800355e:	e000      	b.n	8003562 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003560:	bf00      	nop
    }
  }
}
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	3b10      	subs	r3, #16
 8003578:	4a14      	ldr	r2, [pc, #80]	; (80035cc <DMA_CalcBaseAndBitshift+0x64>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003582:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d909      	bls.n	80035aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	1d1a      	adds	r2, r3, #4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	659a      	str	r2, [r3, #88]	; 0x58
 80035a8:	e007      	b.n	80035ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	aaaaaaab 	.word	0xaaaaaaab
 80035d0:	08006918 	.word	0x08006918

080035d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11f      	bne.n	800362e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d856      	bhi.n	80036a2 <DMA_CheckFifoParam+0xce>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <DMA_CheckFifoParam+0x28>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	0800361f 	.word	0x0800361f
 8003604:	0800360d 	.word	0x0800360d
 8003608:	080036a3 	.word	0x080036a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d046      	beq.n	80036a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e043      	b.n	80036a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003626:	d140      	bne.n	80036aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362c:	e03d      	b.n	80036aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003636:	d121      	bne.n	800367c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d837      	bhi.n	80036ae <DMA_CheckFifoParam+0xda>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <DMA_CheckFifoParam+0x70>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003655 	.word	0x08003655
 8003648:	0800365b 	.word	0x0800365b
 800364c:	08003655 	.word	0x08003655
 8003650:	0800366d 	.word	0x0800366d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      break;
 8003658:	e030      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d025      	beq.n	80036b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366a:	e022      	b.n	80036b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003674:	d11f      	bne.n	80036b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800367a:	e01c      	b.n	80036b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d903      	bls.n	800368a <DMA_CheckFifoParam+0xb6>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d003      	beq.n	8003690 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003688:	e018      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      break;
 800368e:	e015      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	e00b      	b.n	80036ba <DMA_CheckFifoParam+0xe6>
      break;
 80036a2:	bf00      	nop
 80036a4:	e00a      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e008      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
 80036ac:	e006      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
 80036b0:	e004      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036b2:	bf00      	nop
 80036b4:	e002      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;   
 80036b6:	bf00      	nop
 80036b8:	e000      	b.n	80036bc <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
    }
  } 
  
  return status; 
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop

080036cc <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e08d      	b.n	80037fa <HAL_FMPI2C_Init+0x12e>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fac0 	bl	8001c78 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800371c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372c:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e006      	b.n	8003754 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003752:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d108      	bne.n	800376e <HAL_FMPI2C_Init+0xa2>
  {
    SET_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376a:	605a      	str	r2, [r3, #4]
 800376c:	e007      	b.n	800377e <HAL_FMPI2C_Init+0xb2>
  }
  else
  {
    /* Clear the FMPI2C ADD10 bit */
    CLEAR_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a0:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	d138      	bne.n	800388a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003822:	2302      	movs	r3, #2
 8003824:	e032      	b.n	800388c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2224      	movs	r2, #36	; 0x24
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003854:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800388a:	2302      	movs	r3, #2
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e165      	b.n	8003b80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f040 8154 	bne.w	8003b7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d005      	beq.n	80038ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d130      	bne.n	800394c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003920:	2201      	movs	r2, #1
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 0201 	and.w	r2, r3, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d017      	beq.n	8003988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d123      	bne.n	80039dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	08da      	lsrs	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3208      	adds	r2, #8
 800399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	220f      	movs	r2, #15
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80ae 	beq.w	8003b7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3a:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4f      	ldr	r2, [pc, #316]	; (8003ba0 <HAL_GPIO_Init+0x308>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d025      	beq.n	8003ab2 <HAL_GPIO_Init+0x21a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4e      	ldr	r2, [pc, #312]	; (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01f      	beq.n	8003aae <HAL_GPIO_Init+0x216>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4d      	ldr	r2, [pc, #308]	; (8003ba8 <HAL_GPIO_Init+0x310>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d019      	beq.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4c      	ldr	r2, [pc, #304]	; (8003bac <HAL_GPIO_Init+0x314>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_GPIO_Init+0x20e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4b      	ldr	r2, [pc, #300]	; (8003bb0 <HAL_GPIO_Init+0x318>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00d      	beq.n	8003aa2 <HAL_GPIO_Init+0x20a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4a      	ldr	r2, [pc, #296]	; (8003bb4 <HAL_GPIO_Init+0x31c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <HAL_GPIO_Init+0x206>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a49      	ldr	r2, [pc, #292]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <HAL_GPIO_Init+0x202>
 8003a96:	2306      	movs	r3, #6
 8003a98:	e00c      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003a9a:	2307      	movs	r3, #7
 8003a9c:	e00a      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac4:	4935      	ldr	r1, [pc, #212]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ad2:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af6:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003afc:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b74:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	f67f ae96 	bls.w	80038b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	40020c00 	.word	0x40020c00
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40021400 	.word	0x40021400
 8003bb8:	40021800 	.word	0x40021800
 8003bbc:	40013c00 	.word	0x40013c00

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bdc:	e003      	b.n	8003be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e12b      	b.n	8003e5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe f88a 	bl	8001d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c58:	f000 fac4 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4a81      	ldr	r2, [pc, #516]	; (8003e68 <HAL_I2C_Init+0x274>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d807      	bhi.n	8003c78 <HAL_I2C_Init+0x84>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a80      	ldr	r2, [pc, #512]	; (8003e6c <HAL_I2C_Init+0x278>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	bf94      	ite	ls
 8003c70:	2301      	movls	r3, #1
 8003c72:	2300      	movhi	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e006      	b.n	8003c86 <HAL_I2C_Init+0x92>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a7d      	ldr	r2, [pc, #500]	; (8003e70 <HAL_I2C_Init+0x27c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bf94      	ite	ls
 8003c80:	2301      	movls	r3, #1
 8003c82:	2300      	movhi	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0e7      	b.n	8003e5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a78      	ldr	r2, [pc, #480]	; (8003e74 <HAL_I2C_Init+0x280>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0c9b      	lsrs	r3, r3, #18
 8003c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a6a      	ldr	r2, [pc, #424]	; (8003e68 <HAL_I2C_Init+0x274>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d802      	bhi.n	8003cc8 <HAL_I2C_Init+0xd4>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	e009      	b.n	8003cdc <HAL_I2C_Init+0xe8>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cce:	fb02 f303 	mul.w	r3, r2, r3
 8003cd2:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <HAL_I2C_Init+0x284>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	3301      	adds	r3, #1
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	495c      	ldr	r1, [pc, #368]	; (8003e68 <HAL_I2C_Init+0x274>)
 8003cf8:	428b      	cmp	r3, r1
 8003cfa:	d819      	bhi.n	8003d30 <HAL_I2C_Init+0x13c>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e59      	subs	r1, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d10:	400b      	ands	r3, r1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_I2C_Init+0x138>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1e59      	subs	r1, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2a:	e051      	b.n	8003dd0 <HAL_I2C_Init+0x1dc>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	e04f      	b.n	8003dd0 <HAL_I2C_Init+0x1dc>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d111      	bne.n	8003d5c <HAL_I2C_Init+0x168>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1e58      	subs	r0, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	440b      	add	r3, r1
 8003d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e012      	b.n	8003d82 <HAL_I2C_Init+0x18e>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1e58      	subs	r0, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	0099      	lsls	r1, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Init+0x196>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e022      	b.n	8003dd0 <HAL_I2C_Init+0x1dc>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10e      	bne.n	8003db0 <HAL_I2C_Init+0x1bc>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1e58      	subs	r0, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6859      	ldr	r1, [r3, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	440b      	add	r3, r1
 8003da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da4:	3301      	adds	r3, #1
 8003da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dae:	e00f      	b.n	8003dd0 <HAL_I2C_Init+0x1dc>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e58      	subs	r0, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	0099      	lsls	r1, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	6809      	ldr	r1, [r1, #0]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6911      	ldr	r1, [r2, #16]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68d2      	ldr	r2, [r2, #12]
 8003e0a:	4311      	orrs	r1, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	000186a0 	.word	0x000186a0
 8003e6c:	001e847f 	.word	0x001e847f
 8003e70:	003d08ff 	.word	0x003d08ff
 8003e74:	431bde83 	.word	0x431bde83
 8003e78:	10624dd3 	.word	0x10624dd3

08003e7c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003e84:	f7fe fc42 	bl	800270c <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e069      	b.n	8003f68 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fd ffad 	bl	8001e08 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003eae:	f241 3188 	movw	r1, #5000	; 0x1388
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f85e 	bl	8003f74 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	021a      	lsls	r2, r3, #8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	2120      	movs	r1, #32
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f856 	bl	8003f90 <QSPI_WaitFlagStateUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003ee8:	7afb      	ldrb	r3, [r7, #11]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d137      	bne.n	8003f5e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ef8:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6852      	ldr	r2, [r2, #4]
 8003f00:	0611      	lsls	r1, r2, #24
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68d2      	ldr	r2, [r2, #12]
 8003f06:	4311      	orrs	r1, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	69d2      	ldr	r2, [r2, #28]
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6a12      	ldr	r2, [r2, #32]
 8003f12:	4311      	orrs	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <HAL_QSPI_Init+0xf4>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6912      	ldr	r2, [r2, #16]
 8003f2a:	0411      	lsls	r1, r2, #16
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6952      	ldr	r2, [r2, #20]
 8003f30:	4311      	orrs	r1, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6992      	ldr	r2, [r2, #24]
 8003f36:	4311      	orrs	r1, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003f66:	7afb      	ldrb	r3, [r7, #11]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	ffe0f8fe 	.word	0xffe0f8fe

08003f74 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003fa0:	e01a      	b.n	8003fd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d016      	beq.n	8003fd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fe fbaf 	bl	800270c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	f043 0201 	orr.w	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e00e      	b.n	8003ff6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1d6      	bne.n	8003fa2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0cc      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b68      	ldr	r3, [pc, #416]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d90c      	bls.n	800403c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a58      	ldr	r2, [pc, #352]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800405e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a52      	ldr	r2, [pc, #328]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d044      	beq.n	8004120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d119      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d003      	beq.n	80040be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040be:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e06f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e067      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040de:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4934      	ldr	r1, [pc, #208]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f0:	f7fe fb0c 	bl	800270c <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	e00a      	b.n	800410e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fe fb08 	bl	800270c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e04f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 020c 	and.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	429a      	cmp	r2, r3
 800411e:	d1eb      	bne.n	80040f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d20c      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412e:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004186:	f000 fb6b 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490a      	ldr	r1, [pc, #40]	; (80041c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	fa22 f303 	lsr.w	r3, r2, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fa6c 	bl	8002684 <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08006900 	.word	0x08006900
 80041c4:	20000000 	.word	0x20000000
 80041c8:	20000004 	.word	0x20000004

080041cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000000 	.word	0x20000000

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e8:	f7ff fff0 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0a9b      	lsrs	r3, r3, #10
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	08006910 	.word	0x08006910

0800420c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004244:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800424a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	496c      	ldr	r1, [pc, #432]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004262:	2301      	movs	r3, #1
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004272:	4b64      	ldr	r3, [pc, #400]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004278:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	4960      	ldr	r1, [pc, #384]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d017      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a0:	4b58      	ldr	r3, [pc, #352]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4955      	ldr	r1, [pc, #340]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042be:	d101      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80042c0:	2301      	movs	r3, #1
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80042cc:	2301      	movs	r3, #1
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d017      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042dc:	4b49      	ldr	r3, [pc, #292]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	4946      	ldr	r1, [pc, #280]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fa:	d101      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80042fc:	2301      	movs	r3, #1
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004308:	2301      	movs	r3, #1
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 808a 	beq.w	800442e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b39      	ldr	r3, [pc, #228]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a38      	ldr	r2, [pc, #224]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004336:	4b34      	ldr	r3, [pc, #208]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a33      	ldr	r2, [pc, #204]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004342:	f7fe f9e3 	bl	800270c <HAL_GetTick>
 8004346:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800434a:	f7fe f9df 	bl	800270c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e278      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004368:	4b26      	ldr	r3, [pc, #152]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004370:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02f      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004380:	6a3a      	ldr	r2, [r7, #32]
 8004382:	429a      	cmp	r2, r3
 8004384:	d028      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004386:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043a2:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d114      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fe f9ad 	bl	800270c <HAL_GetTick>
 80043b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fe f9a9 	bl	800270c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e240      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e4:	d114      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	4902      	ldr	r1, [pc, #8]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	608b      	str	r3, [r1, #8]
 8004400:	e00c      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000
 800440c:	42470e40 	.word	0x42470e40
 8004410:	4b4a      	ldr	r3, [pc, #296]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a49      	ldr	r2, [pc, #292]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004416:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800441a:	6093      	str	r3, [r2, #8]
 800441c:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800441e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	4944      	ldr	r1, [pc, #272]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800442a:	4313      	orrs	r3, r2
 800442c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004440:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004442:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004450:	4b3a      	ldr	r3, [pc, #232]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	4937      	ldr	r1, [pc, #220]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004472:	4b32      	ldr	r3, [pc, #200]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004478:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004480:	492e      	ldr	r1, [pc, #184]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d011      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004494:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	4926      	ldr	r1, [pc, #152]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b2:	d101      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80044b4:	2301      	movs	r3, #1
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	491a      	ldr	r1, [pc, #104]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d011      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	4911      	ldr	r1, [pc, #68]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004504:	d101      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004506:	2301      	movs	r3, #1
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d005      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004518:	f040 80ff 	bne.w	800471a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004522:	f7fe f8f3 	bl	800270c <HAL_GetTick>
 8004526:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004528:	e00e      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800452a:	f7fe f8ef 	bl	800270c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d907      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e188      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800453c:	40023800 	.word	0x40023800
 8004540:	424711e0 	.word	0x424711e0
 8004544:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004548:	4b7e      	ldr	r3, [pc, #504]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ea      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004570:	2b00      	cmp	r3, #0
 8004572:	d028      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d124      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800457c:	4b71      	ldr	r3, [pc, #452]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	3301      	adds	r3, #1
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800458e:	4b6d      	ldr	r3, [pc, #436]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	0e1b      	lsrs	r3, r3, #24
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	431a      	orrs	r2, r3
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	3b01      	subs	r3, #1
 80045ae:	041b      	lsls	r3, r3, #16
 80045b0:	431a      	orrs	r2, r3
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	071b      	lsls	r3, r3, #28
 80045be:	4961      	ldr	r1, [pc, #388]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d035      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f0:	d130      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80045f2:	4b54      	ldr	r3, [pc, #336]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	3301      	adds	r3, #1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004604:	4b4f      	ldr	r3, [pc, #316]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460a:	0f1b      	lsrs	r3, r3, #28
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	019b      	lsls	r3, r3, #6
 800461c:	431a      	orrs	r2, r3
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	3b01      	subs	r3, #1
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	431a      	orrs	r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	071b      	lsls	r3, r3, #28
 8004634:	4943      	ldr	r1, [pc, #268]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800463c:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800463e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004642:	f023 021f 	bic.w	r2, r3, #31
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	3b01      	subs	r3, #1
 800464c:	493d      	ldr	r1, [pc, #244]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d029      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004668:	d124      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800466c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	3301      	adds	r3, #1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004682:	0f1b      	lsrs	r3, r3, #28
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	019b      	lsls	r3, r3, #6
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	3b01      	subs	r3, #1
 800469e:	041b      	lsls	r3, r3, #16
 80046a0:	431a      	orrs	r2, r3
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	431a      	orrs	r2, r3
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	071b      	lsls	r3, r3, #28
 80046ac:	4925      	ldr	r1, [pc, #148]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	019b      	lsls	r3, r3, #6
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	3b01      	subs	r3, #1
 80046d4:	041b      	lsls	r3, r3, #16
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	061b      	lsls	r3, r3, #24
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	071b      	lsls	r3, r3, #28
 80046e6:	4917      	ldr	r1, [pc, #92]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046ee:	4b16      	ldr	r3, [pc, #88]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fe f80a 	bl	800270c <HAL_GetTick>
 80046f8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046fc:	f7fe f806 	bl	800270c <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e09f      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 8095 	bne.w	800484c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004728:	f7fd fff0 	bl	800270c <HAL_GetTick>
 800472c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800472e:	e00f      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004730:	f7fd ffec 	bl	800270c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d908      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e085      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	42470068 	.word	0x42470068
 800474c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004750:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475c:	d0e8      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d02b      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004782:	2b00      	cmp	r3, #0
 8004784:	d127      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004786:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	3301      	adds	r3, #1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	019b      	lsls	r3, r3, #6
 80047a2:	431a      	orrs	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	3b01      	subs	r3, #1
 80047aa:	041b      	lsls	r3, r3, #16
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	4928      	ldr	r1, [pc, #160]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047bc:	4b26      	ldr	r3, [pc, #152]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	3b01      	subs	r3, #1
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	4922      	ldr	r1, [pc, #136]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01d      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ea:	d118      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	019b      	lsls	r3, r3, #6
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	3b01      	subs	r3, #1
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	4910      	ldr	r1, [pc, #64]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800481e:	4b0f      	ldr	r3, [pc, #60]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004824:	f7fd ff72 	bl	800270c <HAL_GetTick>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800482c:	f7fd ff6e 	bl	800270c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e007      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484a:	d1ef      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3730      	adds	r7, #48	; 0x30
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	42470070 	.word	0x42470070

08004860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004864:	b0a6      	sub	sp, #152	; 0x98
 8004866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004886:	4bc8      	ldr	r3, [pc, #800]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b0c      	cmp	r3, #12
 8004890:	f200 817e 	bhi.w	8004b90 <HAL_RCC_GetSysClockFreq+0x330>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048d1 	.word	0x080048d1
 80048a0:	08004b91 	.word	0x08004b91
 80048a4:	08004b91 	.word	0x08004b91
 80048a8:	08004b91 	.word	0x08004b91
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	08004b91 	.word	0x08004b91
 80048b4:	08004b91 	.word	0x08004b91
 80048b8:	08004b91 	.word	0x08004b91
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	08004b91 	.word	0x08004b91
 80048c4:	08004b91 	.word	0x08004b91
 80048c8:	08004b91 	.word	0x08004b91
 80048cc:	08004a4b 	.word	0x08004a4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d0:	4bb6      	ldr	r3, [pc, #728]	; (8004bac <HAL_RCC_GetSysClockFreq+0x34c>)
 80048d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80048d6:	e15f      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048d8:	4bb5      	ldr	r3, [pc, #724]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x350>)
 80048da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80048de:	e15b      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e0:	4bb1      	ldr	r3, [pc, #708]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ec:	4bae      	ldr	r3, [pc, #696]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d031      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f8:	4bab      	ldr	r3, [pc, #684]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	2200      	movs	r2, #0
 8004900:	66bb      	str	r3, [r7, #104]	; 0x68
 8004902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490a:	663b      	str	r3, [r7, #96]	; 0x60
 800490c:	2300      	movs	r3, #0
 800490e:	667b      	str	r3, [r7, #100]	; 0x64
 8004910:	4ba7      	ldr	r3, [pc, #668]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004912:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004916:	462a      	mov	r2, r5
 8004918:	fb03 f202 	mul.w	r2, r3, r2
 800491c:	2300      	movs	r3, #0
 800491e:	4621      	mov	r1, r4
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	4413      	add	r3, r2
 8004926:	4aa2      	ldr	r2, [pc, #648]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004928:	4621      	mov	r1, r4
 800492a:	fba1 1202 	umull	r1, r2, r1, r2
 800492e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004930:	460a      	mov	r2, r1
 8004932:	67ba      	str	r2, [r7, #120]	; 0x78
 8004934:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004936:	4413      	add	r3, r2
 8004938:	67fb      	str	r3, [r7, #124]	; 0x7c
 800493a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800493e:	2200      	movs	r2, #0
 8004940:	65bb      	str	r3, [r7, #88]	; 0x58
 8004942:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004944:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004948:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800494c:	f7fb fc5a 	bl	8000204 <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4613      	mov	r3, r2
 8004956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800495a:	e064      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495c:	4b92      	ldr	r3, [pc, #584]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	099b      	lsrs	r3, r3, #6
 8004962:	2200      	movs	r2, #0
 8004964:	653b      	str	r3, [r7, #80]	; 0x50
 8004966:	657a      	str	r2, [r7, #84]	; 0x54
 8004968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004970:	2300      	movs	r3, #0
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004978:	4622      	mov	r2, r4
 800497a:	462b      	mov	r3, r5
 800497c:	f04f 0000 	mov.w	r0, #0
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	0159      	lsls	r1, r3, #5
 8004986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800498a:	0150      	lsls	r0, r2, #5
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4621      	mov	r1, r4
 8004992:	1a51      	subs	r1, r2, r1
 8004994:	6139      	str	r1, [r7, #16]
 8004996:	4629      	mov	r1, r5
 8004998:	eb63 0301 	sbc.w	r3, r3, r1
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049aa:	4659      	mov	r1, fp
 80049ac:	018b      	lsls	r3, r1, #6
 80049ae:	4651      	mov	r1, sl
 80049b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049b4:	4651      	mov	r1, sl
 80049b6:	018a      	lsls	r2, r1, #6
 80049b8:	4651      	mov	r1, sl
 80049ba:	ebb2 0801 	subs.w	r8, r2, r1
 80049be:	4659      	mov	r1, fp
 80049c0:	eb63 0901 	sbc.w	r9, r3, r1
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d8:	4690      	mov	r8, r2
 80049da:	4699      	mov	r9, r3
 80049dc:	4623      	mov	r3, r4
 80049de:	eb18 0303 	adds.w	r3, r8, r3
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	462b      	mov	r3, r5
 80049e6:	eb49 0303 	adc.w	r3, r9, r3
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049f8:	4629      	mov	r1, r5
 80049fa:	028b      	lsls	r3, r1, #10
 80049fc:	4621      	mov	r1, r4
 80049fe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a02:	4621      	mov	r1, r4
 8004a04:	028a      	lsls	r2, r1, #10
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a0e:	2200      	movs	r2, #0
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
 8004a12:	647a      	str	r2, [r7, #68]	; 0x44
 8004a14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a18:	f7fb fbf4 	bl	8000204 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4613      	mov	r3, r2
 8004a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a26:	4b60      	ldr	r3, [pc, #384]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	0c1b      	lsrs	r3, r3, #16
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	3301      	adds	r3, #1
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004a38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004a48:	e0a6      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a4a:	4b57      	ldr	r3, [pc, #348]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a56:	4b54      	ldr	r3, [pc, #336]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d02a      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	4b51      	ldr	r3, [pc, #324]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	2200      	movs	r2, #0
 8004a6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a74:	2100      	movs	r1, #0
 8004a76:	4b4e      	ldr	r3, [pc, #312]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a78:	fb03 f201 	mul.w	r2, r3, r1
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	4a4a      	ldr	r2, [pc, #296]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a86:	fba0 1202 	umull	r1, r2, r0, r2
 8004a8a:	677a      	str	r2, [r7, #116]	; 0x74
 8004a8c:	460a      	mov	r2, r1
 8004a8e:	673a      	str	r2, [r7, #112]	; 0x70
 8004a90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a92:	4413      	add	r3, r2
 8004a94:	677b      	str	r3, [r7, #116]	; 0x74
 8004a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9e:	637a      	str	r2, [r7, #52]	; 0x34
 8004aa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aa4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004aa8:	f7fb fbac 	bl	8000204 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ab6:	e05b      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab8:	4b3b      	ldr	r3, [pc, #236]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	2200      	movs	r2, #0
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	623b      	str	r3, [r7, #32]
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	f04f 0000 	mov.w	r0, #0
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	0159      	lsls	r1, r3, #5
 8004ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae6:	0150      	lsls	r0, r2, #5
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4641      	mov	r1, r8
 8004aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8004af2:	4649      	mov	r1, r9
 8004af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b10:	eb63 050b 	sbc.w	r5, r3, fp
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	00eb      	lsls	r3, r5, #3
 8004b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b22:	00e2      	lsls	r2, r4, #3
 8004b24:	4614      	mov	r4, r2
 8004b26:	461d      	mov	r5, r3
 8004b28:	4643      	mov	r3, r8
 8004b2a:	18e3      	adds	r3, r4, r3
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	464b      	mov	r3, r9
 8004b30:	eb45 0303 	adc.w	r3, r5, r3
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b42:	4629      	mov	r1, r5
 8004b44:	028b      	lsls	r3, r1, #10
 8004b46:	4621      	mov	r1, r4
 8004b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	028a      	lsls	r2, r1, #10
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b58:	2200      	movs	r2, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	61fa      	str	r2, [r7, #28]
 8004b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b62:	f7fb fb4f 	bl	8000204 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b70:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	0f1b      	lsrs	r3, r3, #28
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b8e:	e003      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCC_GetSysClockFreq+0x34c>)
 8004b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3798      	adds	r7, #152	; 0x98
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	00f42400 	.word	0x00f42400
 8004bb0:	016e3600 	.word	0x016e3600

08004bb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e28d      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8083 	beq.w	8004cda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bd4:	4b94      	ldr	r3, [pc, #592]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d019      	beq.n	8004c14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004be0:	4b91      	ldr	r3, [pc, #580]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d106      	bne.n	8004bfa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bec:	4b8e      	ldr	r3, [pc, #568]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf8:	d00c      	beq.n	8004c14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfa:	4b8b      	ldr	r3, [pc, #556]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c02:	2b0c      	cmp	r3, #12
 8004c04:	d112      	bne.n	8004c2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c06:	4b88      	ldr	r3, [pc, #544]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c12:	d10b      	bne.n	8004c2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c14:	4b84      	ldr	r3, [pc, #528]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d05b      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x124>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d157      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e25a      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d106      	bne.n	8004c44 <HAL_RCC_OscConfig+0x90>
 8004c36:	4b7c      	ldr	r3, [pc, #496]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a7b      	ldr	r2, [pc, #492]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e01d      	b.n	8004c80 <HAL_RCC_OscConfig+0xcc>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCC_OscConfig+0xb4>
 8004c4e:	4b76      	ldr	r3, [pc, #472]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a75      	ldr	r2, [pc, #468]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	4b73      	ldr	r3, [pc, #460]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a72      	ldr	r2, [pc, #456]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	e00b      	b.n	8004c80 <HAL_RCC_OscConfig+0xcc>
 8004c68:	4b6f      	ldr	r3, [pc, #444]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a6e      	ldr	r2, [pc, #440]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	4b6c      	ldr	r3, [pc, #432]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a6b      	ldr	r2, [pc, #428]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d013      	beq.n	8004cb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fd fd40 	bl	800270c <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c90:	f7fd fd3c 	bl	800270c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b64      	cmp	r3, #100	; 0x64
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e21f      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca2:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0xdc>
 8004cae:	e014      	b.n	8004cda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fd fd2c 	bl	800270c <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb8:	f7fd fd28 	bl	800270c <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	; 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e20b      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cca:	4b57      	ldr	r3, [pc, #348]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x104>
 8004cd6:	e000      	b.n	8004cda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d06f      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ce6:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d017      	beq.n	8004d22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cf2:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d105      	bne.n	8004d0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cfe:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0a:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d12:	2b0c      	cmp	r3, #12
 8004d14:	d11c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d16:	4b44      	ldr	r3, [pc, #272]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCC_OscConfig+0x186>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1d3      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4937      	ldr	r1, [pc, #220]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	e03a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d58:	4b34      	ldr	r3, [pc, #208]	; (8004e2c <HAL_RCC_OscConfig+0x278>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fd fcd5 	bl	800270c <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fd fcd1 	bl	800270c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e1b4      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d84:	4b28      	ldr	r3, [pc, #160]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4925      	ldr	r1, [pc, #148]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9a:	4b24      	ldr	r3, [pc, #144]	; (8004e2c <HAL_RCC_OscConfig+0x278>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fd fcb4 	bl	800270c <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da8:	f7fd fcb0 	bl	800270c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e193      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d036      	beq.n	8004e40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_RCC_OscConfig+0x27c>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fd fc94 	bl	800270c <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de8:	f7fd fc90 	bl	800270c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e173      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_OscConfig+0x274>)
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x234>
 8004e06:	e01b      	b.n	8004e40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0e:	f7fd fc7d 	bl	800270c <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	e00e      	b.n	8004e34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e16:	f7fd fc79 	bl	800270c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d907      	bls.n	8004e34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e15c      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	42470000 	.word	0x42470000
 8004e30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e34:	4b8a      	ldr	r3, [pc, #552]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1ea      	bne.n	8004e16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8097 	beq.w	8004f7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e52:	4b83      	ldr	r3, [pc, #524]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	4b7f      	ldr	r3, [pc, #508]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a7e      	ldr	r2, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b7c      	ldr	r3, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7e:	4b79      	ldr	r3, [pc, #484]	; (8005064 <HAL_RCC_OscConfig+0x4b0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d118      	bne.n	8004ebc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8a:	4b76      	ldr	r3, [pc, #472]	; (8005064 <HAL_RCC_OscConfig+0x4b0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a75      	ldr	r2, [pc, #468]	; (8005064 <HAL_RCC_OscConfig+0x4b0>)
 8004e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e96:	f7fd fc39 	bl	800270c <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9e:	f7fd fc35 	bl	800270c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e118      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb0:	4b6c      	ldr	r3, [pc, #432]	; (8005064 <HAL_RCC_OscConfig+0x4b0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x31e>
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed0:	e01c      	b.n	8004f0c <HAL_RCC_OscConfig+0x358>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b05      	cmp	r3, #5
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x340>
 8004eda:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	4a60      	ldr	r2, [pc, #384]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee6:	4b5e      	ldr	r3, [pc, #376]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a5d      	ldr	r2, [pc, #372]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef2:	e00b      	b.n	8004f0c <HAL_RCC_OscConfig+0x358>
 8004ef4:	4b5a      	ldr	r3, [pc, #360]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	4a59      	ldr	r2, [pc, #356]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	6713      	str	r3, [r2, #112]	; 0x70
 8004f00:	4b57      	ldr	r3, [pc, #348]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	4a56      	ldr	r2, [pc, #344]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004f06:	f023 0304 	bic.w	r3, r3, #4
 8004f0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd fbfa 	bl	800270c <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fd fbf6 	bl	800270c <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0d7      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f32:	4b4b      	ldr	r3, [pc, #300]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0ee      	beq.n	8004f1c <HAL_RCC_OscConfig+0x368>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f40:	f7fd fbe4 	bl	800270c <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f48:	f7fd fbe0 	bl	800270c <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0c1      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5e:	4b40      	ldr	r3, [pc, #256]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1ee      	bne.n	8004f48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f70:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	4a3a      	ldr	r2, [pc, #232]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80ad 	beq.w	80050e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d060      	beq.n	8005054 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d145      	bne.n	8005026 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4b33      	ldr	r3, [pc, #204]	; (8005068 <HAL_RCC_OscConfig+0x4b4>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fbb4 	bl	800270c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fd fbb0 	bl	800270c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e093      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fba:	4b29      	ldr	r3, [pc, #164]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	085b      	lsrs	r3, r3, #1
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	061b      	lsls	r3, r3, #24
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	071b      	lsls	r3, r3, #28
 8004ff2:	491b      	ldr	r1, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x4b4>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fd fb85 	bl	800270c <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005006:	f7fd fb81 	bl	800270c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e064      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x452>
 8005024:	e05c      	b.n	80050e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_RCC_OscConfig+0x4b4>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fd fb6e 	bl	800270c <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005034:	f7fd fb6a 	bl	800270c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e04d      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_RCC_OscConfig+0x4ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0x480>
 8005052:	e045      	b.n	80050e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e040      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
 8005060:	40023800 	.word	0x40023800
 8005064:	40007000 	.word	0x40007000
 8005068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800506c:	4b1f      	ldr	r3, [pc, #124]	; (80050ec <HAL_RCC_OscConfig+0x538>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d030      	beq.n	80050dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d129      	bne.n	80050dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d122      	bne.n	80050dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800509c:	4013      	ands	r3, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d119      	bne.n	80050dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	3b01      	subs	r3, #1
 80050b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d10f      	bne.n	80050dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d107      	bne.n	80050dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40023800 	.word	0x40023800

080050f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e07b      	b.n	80051fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005112:	d009      	beq.n	8005128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	61da      	str	r2, [r3, #28]
 800511a:	e005      	b.n	8005128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fc feea 	bl	8001f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	ea42 0103 	orr.w	r1, r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0104 	and.w	r1, r3, #4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0210 	and.w	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b088      	sub	sp, #32
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_SPI_Transmit+0x22>
 8005220:	2302      	movs	r3, #2
 8005222:	e12d      	b.n	8005480 <HAL_SPI_Transmit+0x27e>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800522c:	f7fd fa6e 	bl	800270c <HAL_GetTick>
 8005230:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d002      	beq.n	8005248 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005242:	2302      	movs	r3, #2
 8005244:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005246:	e116      	b.n	8005476 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_SPI_Transmit+0x52>
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005258:	e10d      	b.n	8005476 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2203      	movs	r2, #3
 800525e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	88fa      	ldrh	r2, [r7, #6]
 8005272:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a0:	d10f      	bne.n	80052c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d007      	beq.n	80052e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	d14f      	bne.n	800538a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_Transmit+0xf6>
 80052f2:	8afb      	ldrh	r3, [r7, #22]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d142      	bne.n	800537e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	881a      	ldrh	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	1c9a      	adds	r2, r3, #2
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800531c:	e02f      	b.n	800537e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d112      	bne.n	8005352 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	881a      	ldrh	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	1c9a      	adds	r2, r3, #2
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005350:	e015      	b.n	800537e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005352:	f7fd f9db 	bl	800270c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d803      	bhi.n	800536a <HAL_SPI_Transmit+0x168>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d102      	bne.n	8005370 <HAL_SPI_Transmit+0x16e>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800537c:	e07b      	b.n	8005476 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ca      	bne.n	800531e <HAL_SPI_Transmit+0x11c>
 8005388:	e050      	b.n	800542c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Transmit+0x196>
 8005392:	8afb      	ldrh	r3, [r7, #22]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d144      	bne.n	8005422 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053be:	e030      	b.n	8005422 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d113      	bne.n	80053f6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80053f4:	e015      	b.n	8005422 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f6:	f7fd f989 	bl	800270c <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d803      	bhi.n	800540e <HAL_SPI_Transmit+0x20c>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d102      	bne.n	8005414 <HAL_SPI_Transmit+0x212>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005420:	e029      	b.n	8005476 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1c9      	bne.n	80053c0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 fa61 	bl	80058f8 <SPI_EndRxTxTransaction>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e003      	b.n	8005476 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800547e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3720      	adds	r7, #32
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08c      	sub	sp, #48	; 0x30
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005496:	2301      	movs	r3, #1
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x26>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e198      	b.n	80057e0 <HAL_SPI_TransmitReceive+0x358>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054b6:	f7fd f929 	bl	800270c <HAL_GetTick>
 80054ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054cc:	887b      	ldrh	r3, [r7, #2]
 80054ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d00f      	beq.n	80054f8 <HAL_SPI_TransmitReceive+0x70>
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054de:	d107      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x68>
 80054e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d003      	beq.n	80054f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054f6:	e16d      	b.n	80057d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_SPI_TransmitReceive+0x82>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_SPI_TransmitReceive+0x82>
 8005504:	887b      	ldrh	r3, [r7, #2]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005510:	e160      	b.n	80057d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b04      	cmp	r3, #4
 800551c:	d003      	beq.n	8005526 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2205      	movs	r2, #5
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	887a      	ldrh	r2, [r7, #2]
 8005536:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	887a      	ldrh	r2, [r7, #2]
 8005548:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	887a      	ldrh	r2, [r7, #2]
 800554e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d007      	beq.n	800557a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005582:	d17c      	bne.n	800567e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x10a>
 800558c:	8b7b      	ldrh	r3, [r7, #26]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d16a      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	881a      	ldrh	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	1c9a      	adds	r2, r3, #2
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b6:	e057      	b.n	8005668 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d11b      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x176>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_SPI_TransmitReceive+0x176>
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d113      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	881a      	ldrh	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	1c9a      	adds	r2, r3, #2
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d119      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x1b8>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d014      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	b292      	uxth	r2, r2
 8005622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	1c9a      	adds	r2, r3, #2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800563c:	2301      	movs	r3, #1
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005640:	f7fd f864 	bl	800270c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800564c:	429a      	cmp	r2, r3
 800564e:	d80b      	bhi.n	8005668 <HAL_SPI_TransmitReceive+0x1e0>
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d007      	beq.n	8005668 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005666:	e0b5      	b.n	80057d4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1a2      	bne.n	80055b8 <HAL_SPI_TransmitReceive+0x130>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d19d      	bne.n	80055b8 <HAL_SPI_TransmitReceive+0x130>
 800567c:	e080      	b.n	8005780 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_SPI_TransmitReceive+0x204>
 8005686:	8b7b      	ldrh	r3, [r7, #26]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d16f      	bne.n	800576c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b2:	e05b      	b.n	800576c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d11c      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x274>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d017      	beq.n	80056fc <HAL_SPI_TransmitReceive+0x274>
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d114      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d119      	bne.n	800573e <HAL_SPI_TransmitReceive+0x2b6>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d014      	beq.n	800573e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800573a:	2301      	movs	r3, #1
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800573e:	f7fc ffe5 	bl	800270c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800574a:	429a      	cmp	r2, r3
 800574c:	d803      	bhi.n	8005756 <HAL_SPI_TransmitReceive+0x2ce>
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d102      	bne.n	800575c <HAL_SPI_TransmitReceive+0x2d4>
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	2b00      	cmp	r3, #0
 800575a:	d107      	bne.n	800576c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800576a:	e033      	b.n	80057d4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d19e      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x22c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d199      	bne.n	80056b4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f8b7 	bl	80058f8 <SPI_EndRxTxTransaction>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d006      	beq.n	800579e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800579c:	e01a      	b.n	80057d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ca:	e003      	b.n	80057d4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3730      	adds	r7, #48	; 0x30
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057f8:	f7fc ff88 	bl	800270c <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	1a9b      	subs	r3, r3, r2
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	4413      	add	r3, r2
 8005806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005808:	f7fc ff80 	bl	800270c <HAL_GetTick>
 800580c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800580e:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	015b      	lsls	r3, r3, #5
 8005814:	0d1b      	lsrs	r3, r3, #20
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	fb02 f303 	mul.w	r3, r2, r3
 800581c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800581e:	e054      	b.n	80058ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d050      	beq.n	80058ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005828:	f7fc ff70 	bl	800270c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	429a      	cmp	r2, r3
 8005836:	d902      	bls.n	800583e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d13d      	bne.n	80058ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800584c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005856:	d111      	bne.n	800587c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005860:	d004      	beq.n	800586c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586a:	d107      	bne.n	800587c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005884:	d10f      	bne.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e017      	b.n	80058ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	bf0c      	ite	eq
 80058da:	2301      	moveq	r3, #1
 80058dc:	2300      	movne	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d19b      	bne.n	8005820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3720      	adds	r7, #32
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000000 	.word	0x20000000

080058f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2201      	movs	r2, #1
 800590c:	2102      	movs	r1, #2
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7ff ff6a 	bl	80057e8 <SPI_WaitFlagStateUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e032      	b.n	8005990 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800592a:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <SPI_EndRxTxTransaction+0xa0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1b      	ldr	r2, [pc, #108]	; (800599c <SPI_EndRxTxTransaction+0xa4>)
 8005930:	fba2 2303 	umull	r2, r3, r2, r3
 8005934:	0d5b      	lsrs	r3, r3, #21
 8005936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005948:	d112      	bne.n	8005970 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2200      	movs	r2, #0
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff ff47 	bl	80057e8 <SPI_WaitFlagStateUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d016      	beq.n	800598e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e00f      	b.n	8005990 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	3b01      	subs	r3, #1
 800597a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b80      	cmp	r3, #128	; 0x80
 8005988:	d0f2      	beq.n	8005970 <SPI_EndRxTxTransaction+0x78>
 800598a:	e000      	b.n	800598e <SPI_EndRxTxTransaction+0x96>
        break;
 800598c:	bf00      	nop
  }

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000000 	.word	0x20000000
 800599c:	165e9f81 	.word	0x165e9f81

080059a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e041      	b.n	8005a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc fc8c 	bl	80022e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f000 fa06 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e041      	b.n	8005ad4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7fc fc5f 	bl	8002328 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f000 f9b7 	bl	8005df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e0ae      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	f200 809f 	bhi.w	8005c48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005c49 	.word	0x08005c49
 8005b18:	08005c49 	.word	0x08005c49
 8005b1c:	08005c49 	.word	0x08005c49
 8005b20:	08005b85 	.word	0x08005b85
 8005b24:	08005c49 	.word	0x08005c49
 8005b28:	08005c49 	.word	0x08005c49
 8005b2c:	08005c49 	.word	0x08005c49
 8005b30:	08005bc7 	.word	0x08005bc7
 8005b34:	08005c49 	.word	0x08005c49
 8005b38:	08005c49 	.word	0x08005c49
 8005b3c:	08005c49 	.word	0x08005c49
 8005b40:	08005c07 	.word	0x08005c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f9fc 	bl	8005f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0208 	orr.w	r2, r2, #8
 8005b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0204 	bic.w	r2, r2, #4
 8005b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6999      	ldr	r1, [r3, #24]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	619a      	str	r2, [r3, #24]
      break;
 8005b82:	e064      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fa4c 	bl	8006028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	021a      	lsls	r2, r3, #8
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	619a      	str	r2, [r3, #24]
      break;
 8005bc4:	e043      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 faa1 	bl	8006114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0208 	orr.w	r2, r2, #8
 8005be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0204 	bic.w	r2, r2, #4
 8005bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69d9      	ldr	r1, [r3, #28]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	61da      	str	r2, [r3, #28]
      break;
 8005c04:	e023      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 faf5 	bl	80061fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69d9      	ldr	r1, [r3, #28]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	021a      	lsls	r2, r3, #8
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	61da      	str	r2, [r3, #28]
      break;
 8005c46:	e002      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIM_ConfigClockSource+0x1c>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e0b4      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x186>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb4:	d03e      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0xd4>
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cba:	f200 8087 	bhi.w	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	f000 8086 	beq.w	8005dd2 <HAL_TIM_ConfigClockSource+0x172>
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cca:	d87f      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b70      	cmp	r3, #112	; 0x70
 8005cce:	d01a      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0xa6>
 8005cd0:	2b70      	cmp	r3, #112	; 0x70
 8005cd2:	d87b      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b60      	cmp	r3, #96	; 0x60
 8005cd6:	d050      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x11a>
 8005cd8:	2b60      	cmp	r3, #96	; 0x60
 8005cda:	d877      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b50      	cmp	r3, #80	; 0x50
 8005cde:	d03c      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0xfa>
 8005ce0:	2b50      	cmp	r3, #80	; 0x50
 8005ce2:	d873      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d058      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x13a>
 8005ce8:	2b40      	cmp	r3, #64	; 0x40
 8005cea:	d86f      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d064      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d86b      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d060      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d867      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05c      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d05a      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005d04:	e062      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d16:	f000 fb41 	bl	800639c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	609a      	str	r2, [r3, #8]
      break;
 8005d32:	e04f      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d44:	f000 fb2a 	bl	800639c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d56:	609a      	str	r2, [r3, #8]
      break;
 8005d58:	e03c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d66:	461a      	mov	r2, r3
 8005d68:	f000 fa9e 	bl	80062a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2150      	movs	r1, #80	; 0x50
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 faf7 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005d78:	e02c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 fabd 	bl	8006306 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2160      	movs	r1, #96	; 0x60
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fae7 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005d98:	e01c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 fa7e 	bl	80062a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fad7 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005db8:	e00c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f000 face 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005dca:	e003      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd0:	e000      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a46      	ldr	r2, [pc, #280]	; (8005f1c <TIM_Base_SetConfig+0x12c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0e:	d00f      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a43      	ldr	r2, [pc, #268]	; (8005f20 <TIM_Base_SetConfig+0x130>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00b      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a42      	ldr	r2, [pc, #264]	; (8005f24 <TIM_Base_SetConfig+0x134>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a41      	ldr	r2, [pc, #260]	; (8005f28 <TIM_Base_SetConfig+0x138>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a40      	ldr	r2, [pc, #256]	; (8005f2c <TIM_Base_SetConfig+0x13c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d108      	bne.n	8005e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <TIM_Base_SetConfig+0x12c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d02b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e50:	d027      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a32      	ldr	r2, [pc, #200]	; (8005f20 <TIM_Base_SetConfig+0x130>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d023      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a31      	ldr	r2, [pc, #196]	; (8005f24 <TIM_Base_SetConfig+0x134>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01f      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a30      	ldr	r2, [pc, #192]	; (8005f28 <TIM_Base_SetConfig+0x138>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2f      	ldr	r2, [pc, #188]	; (8005f2c <TIM_Base_SetConfig+0x13c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d017      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2e      	ldr	r2, [pc, #184]	; (8005f30 <TIM_Base_SetConfig+0x140>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2d      	ldr	r2, [pc, #180]	; (8005f34 <TIM_Base_SetConfig+0x144>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00f      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a2c      	ldr	r2, [pc, #176]	; (8005f38 <TIM_Base_SetConfig+0x148>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2b      	ldr	r2, [pc, #172]	; (8005f3c <TIM_Base_SetConfig+0x14c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2a      	ldr	r2, [pc, #168]	; (8005f40 <TIM_Base_SetConfig+0x150>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a29      	ldr	r2, [pc, #164]	; (8005f44 <TIM_Base_SetConfig+0x154>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <TIM_Base_SetConfig+0x12c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_Base_SetConfig+0xf8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a12      	ldr	r2, [pc, #72]	; (8005f2c <TIM_Base_SetConfig+0x13c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d103      	bne.n	8005ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d105      	bne.n	8005f0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f023 0201 	bic.w	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800
 8005f3c:	40001800 	.word	0x40001800
 8005f40:	40001c00 	.word	0x40001c00
 8005f44:	40002000 	.word	0x40002000

08005f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f023 0201 	bic.w	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f023 0302 	bic.w	r3, r3, #2
 8005f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a20      	ldr	r2, [pc, #128]	; (8006020 <TIM_OC1_SetConfig+0xd8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC1_SetConfig+0x64>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1f      	ldr	r2, [pc, #124]	; (8006024 <TIM_OC1_SetConfig+0xdc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10c      	bne.n	8005fc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0308 	bic.w	r3, r3, #8
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	; (8006020 <TIM_OC1_SetConfig+0xd8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC1_SetConfig+0x8e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a14      	ldr	r2, [pc, #80]	; (8006024 <TIM_OC1_SetConfig+0xdc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d111      	bne.n	8005ffa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	621a      	str	r2, [r3, #32]
}
 8006014:	bf00      	nop
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	40010000 	.word	0x40010000
 8006024:	40010400 	.word	0x40010400

08006028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f023 0210 	bic.w	r2, r3, #16
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0320 	bic.w	r3, r3, #32
 8006072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a22      	ldr	r2, [pc, #136]	; (800610c <TIM_OC2_SetConfig+0xe4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC2_SetConfig+0x68>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a21      	ldr	r2, [pc, #132]	; (8006110 <TIM_OC2_SetConfig+0xe8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10d      	bne.n	80060ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a17      	ldr	r2, [pc, #92]	; (800610c <TIM_OC2_SetConfig+0xe4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC2_SetConfig+0x94>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a16      	ldr	r2, [pc, #88]	; (8006110 <TIM_OC2_SetConfig+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d113      	bne.n	80060e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40010400 	.word	0x40010400

08006114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800615c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a21      	ldr	r2, [pc, #132]	; (80061f4 <TIM_OC3_SetConfig+0xe0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_OC3_SetConfig+0x66>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a20      	ldr	r2, [pc, #128]	; (80061f8 <TIM_OC3_SetConfig+0xe4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10d      	bne.n	8006196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <TIM_OC3_SetConfig+0xe0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC3_SetConfig+0x92>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <TIM_OC3_SetConfig+0xe4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d113      	bne.n	80061ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40010400 	.word	0x40010400

080061fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	031b      	lsls	r3, r3, #12
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a12      	ldr	r2, [pc, #72]	; (80062a0 <TIM_OC4_SetConfig+0xa4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_OC4_SetConfig+0x68>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a11      	ldr	r2, [pc, #68]	; (80062a4 <TIM_OC4_SetConfig+0xa8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d109      	bne.n	8006278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800626a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	019b      	lsls	r3, r3, #6
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40010400 	.word	0x40010400

080062a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f023 0201 	bic.w	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 030a 	bic.w	r3, r3, #10
 80062e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006306:	b480      	push	{r7}
 8006308:	b087      	sub	sp, #28
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f023 0210 	bic.w	r2, r3, #16
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	031b      	lsls	r3, r3, #12
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006342:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	f043 0307 	orr.w	r3, r3, #7
 8006388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	609a      	str	r2, [r3, #8]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	021a      	lsls	r2, r3, #8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	431a      	orrs	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e05a      	b.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a21      	ldr	r2, [pc, #132]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d022      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006440:	d01d      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1d      	ldr	r2, [pc, #116]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d018      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d013      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00e      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d009      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d004      	beq.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d10c      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	4313      	orrs	r3, r2
 800648e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40010400 	.word	0x40010400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40001800 	.word	0x40001800

080064d4 <memset>:
 80064d4:	4402      	add	r2, r0
 80064d6:	4603      	mov	r3, r0
 80064d8:	4293      	cmp	r3, r2
 80064da:	d100      	bne.n	80064de <memset+0xa>
 80064dc:	4770      	bx	lr
 80064de:	f803 1b01 	strb.w	r1, [r3], #1
 80064e2:	e7f9      	b.n	80064d8 <memset+0x4>

080064e4 <__libc_init_array>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	4d0d      	ldr	r5, [pc, #52]	; (800651c <__libc_init_array+0x38>)
 80064e8:	4c0d      	ldr	r4, [pc, #52]	; (8006520 <__libc_init_array+0x3c>)
 80064ea:	1b64      	subs	r4, r4, r5
 80064ec:	10a4      	asrs	r4, r4, #2
 80064ee:	2600      	movs	r6, #0
 80064f0:	42a6      	cmp	r6, r4
 80064f2:	d109      	bne.n	8006508 <__libc_init_array+0x24>
 80064f4:	4d0b      	ldr	r5, [pc, #44]	; (8006524 <__libc_init_array+0x40>)
 80064f6:	4c0c      	ldr	r4, [pc, #48]	; (8006528 <__libc_init_array+0x44>)
 80064f8:	f000 f826 	bl	8006548 <_init>
 80064fc:	1b64      	subs	r4, r4, r5
 80064fe:	10a4      	asrs	r4, r4, #2
 8006500:	2600      	movs	r6, #0
 8006502:	42a6      	cmp	r6, r4
 8006504:	d105      	bne.n	8006512 <__libc_init_array+0x2e>
 8006506:	bd70      	pop	{r4, r5, r6, pc}
 8006508:	f855 3b04 	ldr.w	r3, [r5], #4
 800650c:	4798      	blx	r3
 800650e:	3601      	adds	r6, #1
 8006510:	e7ee      	b.n	80064f0 <__libc_init_array+0xc>
 8006512:	f855 3b04 	ldr.w	r3, [r5], #4
 8006516:	4798      	blx	r3
 8006518:	3601      	adds	r6, #1
 800651a:	e7f2      	b.n	8006502 <__libc_init_array+0x1e>
 800651c:	08006928 	.word	0x08006928
 8006520:	08006928 	.word	0x08006928
 8006524:	08006928 	.word	0x08006928
 8006528:	0800692c 	.word	0x0800692c

0800652c <memcpy>:
 800652c:	440a      	add	r2, r1
 800652e:	4291      	cmp	r1, r2
 8006530:	f100 33ff 	add.w	r3, r0, #4294967295
 8006534:	d100      	bne.n	8006538 <memcpy+0xc>
 8006536:	4770      	bx	lr
 8006538:	b510      	push	{r4, lr}
 800653a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800653e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006542:	4291      	cmp	r1, r2
 8006544:	d1f9      	bne.n	800653a <memcpy+0xe>
 8006546:	bd10      	pop	{r4, pc}

08006548 <_init>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	bf00      	nop
 800654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654e:	bc08      	pop	{r3}
 8006550:	469e      	mov	lr, r3
 8006552:	4770      	bx	lr

08006554 <_fini>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	bf00      	nop
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr
