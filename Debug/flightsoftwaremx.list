
flightsoftwaremx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d3c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08007f00  08007f00  00008f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c0  080082c0  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  080082c0  080082c0  000092c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082c8  080082c8  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c8  080082c8  000092c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082cc  080082cc  000092cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080082d0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  2000000c  080082dc  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  080082dc  0000a7c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccd3  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ee  00000000  00000000  00026d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0002b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149e  00000000  00000000  0002ce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027645  00000000  00000000  0002e30e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254bf  00000000  00000000  00055953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f55  00000000  00000000  0007ae12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163d67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fac  00000000  00000000  00163dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007ee8 	.word	0x08007ee8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08007ee8 	.word	0x08007ee8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ad7124_noCheckReadRegister>:
#include <AD7124.h>
#include <stm32f4xx_hal.h>

int8_t ad7124_noCheckReadRegister(struct ad7124_dev *dev,
		struct ad7124_registerData *p_reg) {
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b08b      	sub	sp, #44	@ 0x2c
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
	int8_t flag = 0, i = 0, check8 = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	77fb      	strb	r3, [r7, #31]
 8000502:	2300      	movs	r3, #0
 8000504:	77bb      	strb	r3, [r7, #30]
 8000506:	2300      	movs	r3, #0
 8000508:	777b      	strb	r3, [r7, #29]
	uint8_t txBuf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 800050a:	4a65      	ldr	r2, [pc, #404]	@ (80006a0 <ad7124_noCheckReadRegister+0x1ac>)
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000514:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 8000518:	4a61      	ldr	r2, [pc, #388]	@ (80006a0 <ad7124_noCheckReadRegister+0x1ac>)
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000522:	e883 0003 	stmia.w	r3, {r0, r1}

	// Build Command word
	txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD
			| AD7124_COMM_REG_RA(p_reg->addr);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	b25b      	sxtb	r3, r3
 800052c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000530:	b25b      	sxtb	r3, r3
 8000532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000536:	b25b      	sxtb	r3, r3
 8000538:	b2db      	uxtb	r3, r3
	txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD
 800053a:	743b      	strb	r3, [r7, #16]

	/*
	 * If this is an AD7124_DATA register read, and the DATA_STATUS bit is set
	 * in ADC_CONTROL, need to read 4, not 3 bytes for DATA with flag
	 */
	if ((p_reg->addr == AD7124_DATA_REG)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d109      	bne.n	8000558 <ad7124_noCheckReadRegister+0x64>
			&& (dev->regs[AD7124_ADC_Control].value
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	3310      	adds	r3, #16
 800054a:	685b      	ldr	r3, [r3, #4]
					& AD7124_ADC_CTRL_REG_DATA_STATUS))
 800054c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
			&& (dev->regs[AD7124_ADC_Control].value
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <ad7124_noCheckReadRegister+0x64>
		check8 = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	777b      	strb	r3, [r7, #29]

	uint16_t length = (
			(dev->useCRC != AD7124_DISABLE_CRC) ? p_reg->size + 1 : p_reg->size);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f993 3010 	ldrsb.w	r3, [r3, #16]
	uint16_t length = (
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <ad7124_noCheckReadRegister+0x7a>
			(dev->useCRC != AD7124_DISABLE_CRC) ? p_reg->size + 1 : p_reg->size);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	b29b      	uxth	r3, r3
	uint16_t length = (
 8000568:	3301      	adds	r3, #1
 800056a:	b29b      	uxth	r3, r3
 800056c:	e002      	b.n	8000574 <ad7124_noCheckReadRegister+0x80>
			(dev->useCRC != AD7124_DISABLE_CRC) ? p_reg->size + 1 : p_reg->size);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	689b      	ldr	r3, [r3, #8]
	uint16_t length = (
 8000572:	b29b      	uxth	r3, r3
 8000574:	837b      	strh	r3, [r7, #26]

	HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6858      	ldr	r0, [r3, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	891b      	ldrh	r3, [r3, #8]
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	f004 fb27 	bl	8004bd4 <HAL_GPIO_WritePin>
	flag = (HAL_SPI_TransmitReceive(dev->hspi, &txBuf[0], &rxBuf[0], length,
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	8b7b      	ldrh	r3, [r7, #26]
 800058c:	f107 0208 	add.w	r2, r7, #8
 8000590:	f107 0110 	add.w	r1, r7, #16
 8000594:	f04f 34ff 	mov.w	r4, #4294967295
 8000598:	9400      	str	r4, [sp, #0]
 800059a:	f006 fb8f 	bl	8006cbc <HAL_SPI_TransmitReceive>
 800059e:	4603      	mov	r3, r0
	HAL_MAX_DELAY) != HAL_OK);
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	bf14      	ite	ne
 80005a4:	2301      	movne	r3, #1
 80005a6:	2300      	moveq	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
	flag = (HAL_SPI_TransmitReceive(dev->hspi, &txBuf[0], &rxBuf[0], length,
 80005aa:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6858      	ldr	r0, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	891b      	ldrh	r3, [r3, #8]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	f004 fb0c 	bl	8004bd4 <HAL_GPIO_WritePin>

	if (flag)
 80005bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <ad7124_noCheckReadRegister+0xd4>
		return 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e066      	b.n	8000696 <ad7124_noCheckReadRegister+0x1a2>

	// Check the CRC
	if (dev->useCRC == AD7124_USE_CRC) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d131      	bne.n	8000636 <ad7124_noCheckReadRegister+0x142>
		txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD
				| AD7124_COMM_REG_RA(p_reg->addr);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	b2db      	uxtb	r3, r3
		txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD
 80005e6:	743b      	strb	r3, [r7, #16]
		for (i = 1; i < p_reg->size + 2; ++i)
 80005e8:	2301      	movs	r3, #1
 80005ea:	77bb      	strb	r3, [r7, #30]
 80005ec:	e00f      	b.n	800060e <ad7124_noCheckReadRegister+0x11a>
			txBuf[i] = rxBuf[i];
 80005ee:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80005f2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80005f6:	3220      	adds	r2, #32
 80005f8:	443a      	add	r2, r7
 80005fa:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80005fe:	3320      	adds	r3, #32
 8000600:	443b      	add	r3, r7
 8000602:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (i = 1; i < p_reg->size + 2; ++i)
 8000606:	7fbb      	ldrb	r3, [r7, #30]
 8000608:	3301      	adds	r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	77bb      	strb	r3, [r7, #30]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000618:	429a      	cmp	r2, r3
 800061a:	dae8      	bge.n	80005ee <ad7124_noCheckReadRegister+0xfa>
		flag = ad7124_computeCrc8(txBuf, p_reg->size + 2);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	3302      	adds	r3, #2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f9fa 	bl	8000a26 <ad7124_computeCrc8>
 8000632:	4603      	mov	r3, r0
 8000634:	77fb      	strb	r3, [r7, #31]
	}

	if (check8 != 0) {
 8000636:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <ad7124_noCheckReadRegister+0x150>
		/* readRegister checksum failed. */
		return -2;
 800063e:	f06f 0301 	mvn.w	r3, #1
 8000642:	e028      	b.n	8000696 <ad7124_noCheckReadRegister+0x1a2>
	}

	if (flag)
 8000644:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <ad7124_noCheckReadRegister+0x15c>
		return 1;
 800064c:	2301      	movs	r3, #1
 800064e:	e022      	b.n	8000696 <ad7124_noCheckReadRegister+0x1a2>

	// Build the result
	p_reg->value = 0;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
	for (i = 1; i < p_reg->size + 1; i++) {
 8000656:	2301      	movs	r3, #1
 8000658:	77bb      	strb	r3, [r7, #30]
 800065a:	e015      	b.n	8000688 <ad7124_noCheckReadRegister+0x194>
		p_reg->value <<= 8;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	021a      	lsls	r2, r3, #8
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	605a      	str	r2, [r3, #4]
		p_reg->value += rxBuf[i];
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800066e:	3220      	adds	r2, #32
 8000670:	443a      	add	r2, r7
 8000672:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000676:	441a      	add	r2, r3
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	605a      	str	r2, [r3, #4]
	for (i = 1; i < p_reg->size + 1; i++) {
 800067c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	3301      	adds	r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	77bb      	strb	r3, [r7, #30]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000690:	429a      	cmp	r2, r3
 8000692:	dae3      	bge.n	800065c <ad7124_noCheckReadRegister+0x168>
	}

	return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3724      	adds	r7, #36	@ 0x24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	08007f00 	.word	0x08007f00

080006a4 <ad7124_noCheckWriteRegister>:

int8_t ad7124_noCheckWriteRegister(struct ad7124_dev *dev,
		struct ad7124_registerData p_reg) {
 80006a4:	b084      	sub	sp, #16
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b088      	sub	sp, #32
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80006b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int32_t regValue = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
	int8_t flag = 0, i = 0, crc8 = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	76bb      	strb	r3, [r7, #26]
 80006be:	2300      	movs	r3, #0
 80006c0:	76fb      	strb	r3, [r7, #27]
 80006c2:	2300      	movs	r3, #0
 80006c4:	767b      	strb	r3, [r7, #25]
	uint8_t txBuf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 80006c6:	4a3f      	ldr	r2, [pc, #252]	@ (80007c4 <ad7124_noCheckWriteRegister+0x120>)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d0:	e883 0003 	stmia.w	r3, {r0, r1}

	// Build Command word
	txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD
			| AD7124_COMM_REG_RA(p_reg.addr);
 80006d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
	txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD
 80006e6:	733b      	strb	r3, [r7, #12]

	// Fill the write buffer
	regValue = p_reg.value;
 80006e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006ea:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < p_reg.size; i++) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	76fb      	strb	r3, [r7, #27]
 80006f0:	e012      	b.n	8000718 <ad7124_noCheckWriteRegister+0x74>
		txBuf[p_reg.size - i] = regValue & 0xFF;
 80006f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	69fa      	ldr	r2, [r7, #28]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	3320      	adds	r3, #32
 8000700:	443b      	add	r3, r7
 8000702:	f803 2c14 	strb.w	r2, [r3, #-20]
		regValue >>= 8;
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	121b      	asrs	r3, r3, #8
 800070a:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < p_reg.size; i++) {
 800070c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	3301      	adds	r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	76fb      	strb	r3, [r7, #27]
 8000718:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800071c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800071e:	429a      	cmp	r2, r3
 8000720:	dbe7      	blt.n	80006f2 <ad7124_noCheckWriteRegister+0x4e>
	}

	// Compute the CRC
	if (dev->useCRC != AD7124_DISABLE_CRC) {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d012      	beq.n	8000752 <ad7124_noCheckWriteRegister+0xae>
		crc8 = ad7124_computeCrc8(txBuf, p_reg.size + 1);
 800072c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800072e:	b2db      	uxtb	r3, r3
 8000730:	3301      	adds	r3, #1
 8000732:	b2da      	uxtb	r2, r3
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f973 	bl	8000a26 <ad7124_computeCrc8>
 8000740:	4603      	mov	r3, r0
 8000742:	767b      	strb	r3, [r7, #25]
		txBuf[p_reg.size + 1] = crc8;
 8000744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000746:	3301      	adds	r3, #1
 8000748:	7e7a      	ldrb	r2, [r7, #25]
 800074a:	3320      	adds	r3, #32
 800074c:	443b      	add	r3, r7
 800074e:	f803 2c14 	strb.w	r2, [r3, #-20]
	}

	uint16_t length = ((
			(dev->useCRC != AD7124_DISABLE_CRC) ? p_reg.size + 1 : p_reg.size)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f993 3010 	ldrsb.w	r3, [r3, #16]
	uint16_t length = ((
 8000758:	2b00      	cmp	r3, #0
 800075a:	d004      	beq.n	8000766 <ad7124_noCheckWriteRegister+0xc2>
			(dev->useCRC != AD7124_DISABLE_CRC) ? p_reg.size + 1 : p_reg.size)
 800075c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
			+ 1);
 800075e:	b29b      	uxth	r3, r3
	uint16_t length = ((
 8000760:	3302      	adds	r3, #2
 8000762:	b29b      	uxth	r3, r3
 8000764:	e003      	b.n	800076e <ad7124_noCheckWriteRegister+0xca>
			(dev->useCRC != AD7124_DISABLE_CRC) ? p_reg.size + 1 : p_reg.size)
 8000766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
			+ 1);
 8000768:	b29b      	uxth	r3, r3
	uint16_t length = ((
 800076a:	3301      	adds	r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6858      	ldr	r0, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	891b      	ldrh	r3, [r3, #8]
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	f004 fa2a 	bl	8004bd4 <HAL_GPIO_WritePin>
	flag =
			(HAL_SPI_Transmit(dev->hspi, txBuf, length, HAL_MAX_DELAY) != HAL_OK);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	8afa      	ldrh	r2, [r7, #22]
 8000786:	f107 010c 	add.w	r1, r7, #12
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	f006 f952 	bl	8006a36 <HAL_SPI_Transmit>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	bf14      	ite	ne
 8000798:	2301      	movne	r3, #1
 800079a:	2300      	moveq	r3, #0
 800079c:	b2db      	uxtb	r3, r3
	flag =
 800079e:	76bb      	strb	r3, [r7, #26]
	HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6858      	ldr	r0, [r3, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	891b      	ldrh	r3, [r3, #8]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	f004 fa12 	bl	8004bd4 <HAL_GPIO_WritePin>

	return flag;
 80007b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007be:	b004      	add	sp, #16
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	08007f00 	.word	0x08007f00

080007c8 <ad7124_readRegister>:

int8_t ad7124_readRegister(struct ad7124_dev *dev,
		struct ad7124_registerData *p_reg) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	int8_t flag = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]

	if (p_reg->addr != AD7124_ERR_REG && dev->isReady) {
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d012      	beq.n	8000804 <ad7124_readRegister+0x3c>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00d      	beq.n	8000804 <ad7124_readRegister+0x3c>
		flag = ad7124_waitForSpiReady(dev, dev->responseTimeout);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 f88c 	bl	800090c <ad7124_waitForSpiReady>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]
		if (flag)
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <ad7124_readRegister+0x3c>
			return 1;
 8000800:	2301      	movs	r3, #1
 8000802:	e004      	b.n	800080e <ad7124_readRegister+0x46>
	}

	return ad7124_noCheckReadRegister(dev, p_reg);
 8000804:	6839      	ldr	r1, [r7, #0]
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fe74 	bl	80004f4 <ad7124_noCheckReadRegister>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <ad7124_writeRegister>:

int8_t ad7124_writeRegister(struct ad7124_dev *dev,
		struct ad7124_registerData p_reg) {
 8000816:	b084      	sub	sp, #16
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af02      	add	r7, sp, #8
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	f107 001c 	add.w	r0, r7, #28
 8000824:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int8_t flag = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]

	if (dev->isReady) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00d      	beq.n	8000852 <ad7124_writeRegister+0x3c>
		flag = ad7124_waitForSpiReady(dev, dev->responseTimeout);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f865 	bl	800090c <ad7124_waitForSpiReady>
 8000842:	4603      	mov	r3, r0
 8000844:	73fb      	strb	r3, [r7, #15]
		if (flag)
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <ad7124_writeRegister+0x3c>
			return 1;
 800084e:	2301      	movs	r3, #1
 8000850:	e008      	b.n	8000864 <ad7124_writeRegister+0x4e>
	}

	return ad7124_noCheckWriteRegister(dev, p_reg);
 8000852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff21 	bl	80006a4 <ad7124_noCheckWriteRegister>
 8000862:	4603      	mov	r3, r0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800086e:	b004      	add	sp, #16
 8000870:	4770      	bx	lr
	...

08000874 <ad7124_reset>:

int8_t ad7124_reset(struct ad7124_dev *dev) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	int8_t flag = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	75fb      	strb	r3, [r7, #23]
	uint8_t txBuf[8] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <ad7124_reset+0x94>)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088a:	e883 0003 	stmia.w	r3, {r0, r1}

	HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6858      	ldr	r0, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	891b      	ldrh	r3, [r3, #8]
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	f004 f99b 	bl	8004bd4 <HAL_GPIO_WritePin>
	flag = (HAL_SPI_Transmit(dev->hspi, txBuf, 8, HAL_MAX_DELAY) != HAL_OK);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	f107 010c 	add.w	r1, r7, #12
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	2208      	movs	r2, #8
 80008ac:	f006 f8c3 	bl	8006a36 <HAL_SPI_Transmit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6858      	ldr	r0, [r3, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	891b      	ldrh	r3, [r3, #8]
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	f004 f983 	bl	8004bd4 <HAL_GPIO_WritePin>

	if (flag)
 80008ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <ad7124_reset+0x66>
		return 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e011      	b.n	80008fe <ad7124_reset+0x8a>

	/* Read POR bit to clear */
	flag = ad7124_waitToPowerOn(dev, dev->responseTimeout);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4619      	mov	r1, r3
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 f84b 	bl	800097c <ad7124_waitToPowerOn>
 80008e6:	4603      	mov	r3, r0
 80008e8:	75fb      	strb	r3, [r7, #23]
	if (flag)
 80008ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <ad7124_reset+0x82>
		return 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e003      	b.n	80008fe <ad7124_reset+0x8a>

	// Recommened 4ms delay
	HAL_Delay(4);
 80008f6:	2004      	movs	r0, #4
 80008f8:	f002 fbae 	bl	8003058 <HAL_Delay>

	return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08007f08 	.word	0x08007f08

0800090c <ad7124_waitForSpiReady>:

// Waits until the device can accept read and write user actions
int8_t ad7124_waitForSpiReady(struct ad7124_dev *dev, uint32_t timeout) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	struct ad7124_registerData *regs;
	int8_t flag;
	int8_t ready = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	75fb      	strb	r3, [r7, #23]

	regs = dev->regs;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	613b      	str	r3, [r7, #16]

	while (!ready && --timeout) {
 8000920:	e018      	b.n	8000954 <ad7124_waitForSpiReady+0x48>
		// read the value of the error registers
		flag = ad7124_readRegister(dev, &regs[AD7124_Error]);
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3360      	adds	r3, #96	@ 0x60
 8000926:	4619      	mov	r1, r3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff4d 	bl	80007c8 <ad7124_readRegister>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]
		if (flag)
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <ad7124_waitForSpiReady+0x32>
			return 1;
 800093a:	2301      	movs	r3, #1
 800093c:	e01a      	b.n	8000974 <ad7124_waitForSpiReady+0x68>

		ready = (regs[AD7124_Error].value & AD7124_ERR_REG_SPI_IGNORE_ERR) == 0;
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3360      	adds	r3, #96	@ 0x60
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf0c      	ite	eq
 800094c:	2301      	moveq	r3, #1
 800094e:	2300      	movne	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	75fb      	strb	r3, [r7, #23]
	while (!ready && --timeout) {
 8000954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d105      	bne.n	8000968 <ad7124_waitForSpiReady+0x5c>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1dc      	bne.n	8000922 <ad7124_waitForSpiReady+0x16>
	}

	if (!timeout)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <ad7124_waitForSpiReady+0x66>
		return 1;
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <ad7124_waitForSpiReady+0x68>

	return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <ad7124_waitToPowerOn>:

// Waits until the device finishes the power-on reset operations
int8_t ad7124_waitToPowerOn(struct ad7124_dev *dev, uint32_t timeout) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
	struct ad7124_registerData *regs;
	int32_t flag = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
	int8_t powered_on = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	75fb      	strb	r3, [r7, #23]

	regs = dev->regs;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	60fb      	str	r3, [r7, #12]

	while (!powered_on && --timeout) {
 8000994:	e014      	b.n	80009c0 <ad7124_waitToPowerOn+0x44>
		flag = ad7124_readRegister(dev, &regs[AD7124_Status]);
 8000996:	68f9      	ldr	r1, [r7, #12]
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff15 	bl	80007c8 <ad7124_readRegister>
 800099e:	4603      	mov	r3, r0
 80009a0:	613b      	str	r3, [r7, #16]

		if (flag)
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <ad7124_waitToPowerOn+0x30>
			return 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e01d      	b.n	80009e8 <ad7124_waitToPowerOn+0x6c>

		// Check the POR_FLAG bit in the flag Register
		powered_on = (regs[AD7124_Status].value & AD7124_STATUS_REG_POR_FLAG)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0310 	and.w	r3, r3, #16
				== 0;
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf0c      	ite	eq
 80009b8:	2301      	moveq	r3, #1
 80009ba:	2300      	movne	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
		powered_on = (regs[AD7124_Status].value & AD7124_STATUS_REG_POR_FLAG)
 80009be:	75fb      	strb	r3, [r7, #23]
	while (!powered_on && --timeout) {
 80009c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d105      	bne.n	80009d4 <ad7124_waitToPowerOn+0x58>
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e0      	bne.n	8000996 <ad7124_waitToPowerOn+0x1a>
	}

	if (!(timeout || powered_on))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d105      	bne.n	80009e6 <ad7124_waitToPowerOn+0x6a>
 80009da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <ad7124_waitToPowerOn+0x6a>
		return 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <ad7124_waitToPowerOn+0x6c>
	return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <ad7124_readData>:

	return 0;
}

// Reads the conversion result from the device
int8_t ad7124_readData(struct ad7124_dev *dev, int32_t *p_data) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	struct ad7124_registerData *regs;
	int8_t flag;

	regs = dev->regs;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	60fb      	str	r3, [r7, #12]

	// Read the value of the data register
	flag = ad7124_readRegister(dev, &regs[AD7124_Data]);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3320      	adds	r3, #32
 8000a04:	4619      	mov	r1, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fede 	bl	80007c8 <ad7124_readRegister>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	72fb      	strb	r3, [r7, #11]

	*p_data = regs[AD7124_Data].value;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3320      	adds	r3, #32
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	601a      	str	r2, [r3, #0]

	return flag;
 8000a1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <ad7124_computeCrc8>:

// Computes the CRC checksum for a data buffer
int8_t ad7124_computeCrc8(uint8_t *p_buf, uint8_t buf_size) {
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]
	uint8_t crc = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	73bb      	strb	r3, [r7, #14]

	while (buf_size) {
 8000a3a:	e02e      	b.n	8000a9a <ad7124_computeCrc8+0x74>
		for (i = 0x80; i != 0; i >>= 1) {
 8000a3c:	2380      	movs	r3, #128	@ 0x80
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e022      	b.n	8000a88 <ad7124_computeCrc8+0x62>
			uint8_t cmp1 = (crc & 0x80) != 0;
 8000a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	09db      	lsrs	r3, r3, #7
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	737b      	strb	r3, [r7, #13]
			uint8_t cmp2 = (*p_buf & i) != 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	4013      	ands	r3, r2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bf14      	ite	ne
 8000a5c:	2301      	movne	r3, #1
 8000a5e:	2300      	moveq	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	733b      	strb	r3, [r7, #12]
			if (cmp1 != cmp2) {
 8000a64:	7b7a      	ldrb	r2, [r7, #13]
 8000a66:	7b3b      	ldrb	r3, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d007      	beq.n	8000a7c <ad7124_computeCrc8+0x56>
				/* MSB of CRC register XOR input Bit from Data */
				crc <<= 1;
 8000a6c:	7bbb      	ldrb	r3, [r7, #14]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	73bb      	strb	r3, [r7, #14]
				crc ^= AD7124_CRC8_POLYNOMIAL_REPRESENTATION;
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	f083 0307 	eor.w	r3, r3, #7
 8000a78:	73bb      	strb	r3, [r7, #14]
 8000a7a:	e002      	b.n	8000a82 <ad7124_computeCrc8+0x5c>
			} else {
				crc <<= 1;
 8000a7c:	7bbb      	ldrb	r3, [r7, #14]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]
		for (i = 0x80; i != 0; i >>= 1) {
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1d9      	bne.n	8000a42 <ad7124_computeCrc8+0x1c>
			}
		}
		p_buf++;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3301      	adds	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
		buf_size--;
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	70fb      	strb	r3, [r7, #3]
	while (buf_size) {
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1cd      	bne.n	8000a3c <ad7124_computeCrc8+0x16>
	}

	return crc;
 8000aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <ad7124_setAdcControl>:

// ADC Fucntions

int8_t ad7124_setAdcControl(struct ad7124_dev *dev,
		enum ad7124_mode operating_mode, enum ad7124_powerMode power_mode,
		uint8_t ref_en, uint8_t clk_sel) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4603      	mov	r3, r0
 8000ac0:	70fb      	strb	r3, [r7, #3]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	70bb      	strb	r3, [r7, #2]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	707b      	strb	r3, [r7, #1]
	struct ad7124_registerData *r = &dev->regs[AD7124_ADC_Control];
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	3310      	adds	r3, #16
 8000ad0:	60fb      	str	r3, [r7, #12]

	r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
	AD7124_ADC_CTRL_REG_POWER_MODE(power_mode) |
 8000ada:	78bb      	ldrb	r3, [r7, #2]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	b2db      	uxtb	r3, r3
	r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000ae0:	431a      	orrs	r2, r3
	AD7124_ADC_CTRL_REG_CLK_SEL(clk_sel) |
 8000ae2:	7e3b      	ldrb	r3, [r7, #24]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
	AD7124_ADC_CTRL_REG_POWER_MODE(power_mode) |
 8000ae8:	4313      	orrs	r3, r2
	(ref_en ? AD7124_ADC_CTRL_REG_REF_EN : 0) |
 8000aea:	787a      	ldrb	r2, [r7, #1]
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d002      	beq.n	8000af6 <ad7124_setAdcControl+0x46>
 8000af0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af4:	e000      	b.n	8000af8 <ad7124_setAdcControl+0x48>
 8000af6:	2200      	movs	r2, #0
	AD7124_ADC_CTRL_REG_CLK_SEL(clk_sel) |
 8000af8:	4313      	orrs	r3, r2
	(ref_en ? AD7124_ADC_CTRL_REG_REF_EN : 0) |
 8000afa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
	r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	605a      	str	r2, [r3, #4]
	AD7124_ADC_CTRL_REG_DOUT_RDY_DEL;

	return ad7124_writeRegister(dev, *r);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fe83 	bl	8000816 <ad7124_writeRegister>
 8000b10:	4603      	mov	r3, r0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <ad7124_setConfig>:

int8_t ad7124_setConfig(struct ad7124_dev *dev, uint8_t cfg,
		enum ad7124_reference_source ref, enum ad7124_PgaSel pga,
		int8_t bipolar, enum ad7124_BurnoutCurrent burnout) {
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af02      	add	r7, sp, #8
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	4608      	mov	r0, r1
 8000b24:	4611      	mov	r1, r2
 8000b26:	461a      	mov	r2, r3
 8000b28:	4603      	mov	r3, r0
 8000b2a:	70fb      	strb	r3, [r7, #3]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70bb      	strb	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
	if (cfg < 8) {
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d82b      	bhi.n	8000b92 <ad7124_setConfig+0x78>
		struct ad7124_registerData *r;

		cfg += AD7124_Config_0;
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	3319      	adds	r3, #25
 8000b3e:	70fb      	strb	r3, [r7, #3]
		r = &dev->regs[cfg];
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	4413      	add	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

		r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b4c:	78bb      	ldrb	r3, [r7, #2]
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	f003 0218 	and.w	r2, r3, #24
		AD7124_CFG_REG_PGA(pga) |
 8000b54:	787b      	ldrb	r3, [r7, #1]
 8000b56:	f003 0307 	and.w	r3, r3, #7
		r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b5a:	4313      	orrs	r3, r2
		(bipolar ? AD7124_CFG_REG_BIPOLAR : 0) |
 8000b5c:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d002      	beq.n	8000b6a <ad7124_setConfig+0x50>
 8000b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b68:	e000      	b.n	8000b6c <ad7124_setConfig+0x52>
 8000b6a:	2200      	movs	r2, #0
		AD7124_CFG_REG_PGA(pga) |
 8000b6c:	431a      	orrs	r2, r3
		AD7124_CFG_REG_BURNOUT(burnout) |
 8000b6e:	7f3b      	ldrb	r3, [r7, #28]
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
		(bipolar ? AD7124_CFG_REG_BIPOLAR : 0) |
 8000b76:	4313      	orrs	r3, r2
		AD7124_CFG_REG_REF_BUFP | AD7124_CFG_REG_REF_BUFM |
		AD7124_CFG_REG_AIN_BUFP | AD7124_CFG_REG_AINN_BUFM;
 8000b78:	f443 72f0 	orr.w	r2, r3, #480	@ 0x1e0
		r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	605a      	str	r2, [r3, #4]
		return ad7124_writeRegister(dev, *r);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	9200      	str	r2, [sp, #0]
 8000b86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fe44 	bl	8000816 <ad7124_writeRegister>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	e001      	b.n	8000b96 <ad7124_setConfig+0x7c>
	}
	return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <ad7124_setChannel>:

int8_t ad7124_setChannel(struct ad7124_dev *dev, uint8_t ch, uint8_t cfg,
		enum ad7124_analog_input ainp, enum ad7124_analog_input ainm,
		uint8_t enable) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af02      	add	r7, sp, #8
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4611      	mov	r1, r2
 8000baa:	461a      	mov	r2, r3
 8000bac:	4603      	mov	r3, r0
 8000bae:	70fb      	strb	r3, [r7, #3]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70bb      	strb	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
	if ((ch < 16) && (cfg < 8)) {
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d82b      	bhi.n	8000c16 <ad7124_setChannel+0x78>
 8000bbe:	78bb      	ldrb	r3, [r7, #2]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	d828      	bhi.n	8000c16 <ad7124_setChannel+0x78>
		struct ad7124_registerData *r;

		ch += AD7124_Channel_0;
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	3309      	adds	r3, #9
 8000bc8:	70fb      	strb	r3, [r7, #3]
		r = &dev->regs[ch];
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]

		r->value = AD7124_CH_MAP_REG_SETUP(cfg) | AD7124_CH_MAP_REG_AINP(ainp)
 8000bd6:	78bb      	ldrb	r3, [r7, #2]
 8000bd8:	031b      	lsls	r3, r3, #12
 8000bda:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
 8000bde:	787b      	ldrb	r3, [r7, #1]
 8000be0:	015b      	lsls	r3, r3, #5
 8000be2:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
 8000be6:	431a      	orrs	r2, r3
				| AD7124_CH_MAP_REG_AINM(ainm)
 8000be8:	7e3b      	ldrb	r3, [r7, #24]
 8000bea:	f003 031f 	and.w	r3, r3, #31
 8000bee:	4313      	orrs	r3, r2
				| (enable ? AD7124_CH_MAP_REG_CH_ENABLE : 0);
 8000bf0:	7f3a      	ldrb	r2, [r7, #28]
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d002      	beq.n	8000bfc <ad7124_setChannel+0x5e>
 8000bf6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bfa:	e000      	b.n	8000bfe <ad7124_setChannel+0x60>
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	431a      	orrs	r2, r3
		r->value = AD7124_CH_MAP_REG_SETUP(cfg) | AD7124_CH_MAP_REG_AINP(ainp)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	605a      	str	r2, [r3, #4]

		return ad7124_writeRegister(dev, *r);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	9200      	str	r2, [sp, #0]
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe02 	bl	8000816 <ad7124_writeRegister>
 8000c12:	4603      	mov	r3, r0
 8000c14:	e001      	b.n	8000c1a <ad7124_setChannel+0x7c>
	}
	return -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <ad7124_getRegister>:

int8_t ad7124_getRegister(struct ad7124_dev *dev, enum ad7124_registers id) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b084      	sub	sp, #16
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	70fb      	strb	r3, [r7, #3]
	int8_t flag = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
	if (id < AD7124_Status && id >= 57)
		return -1;

	flag = ad7124_readRegister(dev, &dev->regs[id]);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fdc2 	bl	80007c8 <ad7124_readRegister>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
	if (flag != 0) {
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <ad7124_getRegister+0x34>
		return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e006      	b.n	8000c64 <ad7124_getRegister+0x42>
	}

	return dev->regs[id].value;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	4413      	add	r3, r2
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	b25b      	sxtb	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <ad7124_currentChannel>:

uint8_t ad7124_currentChannel(struct ad7124_dev *dev) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	int8_t flag = ad7124_getRegister(dev, AD7124_Status);
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffd3 	bl	8000c22 <ad7124_getRegister>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73fb      	strb	r3, [r7, #15]

	if (flag < 0) {
 8000c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da01      	bge.n	8000c8c <ad7124_currentChannel+0x20>
		return 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e003      	b.n	8000c94 <ad7124_currentChannel+0x28>
	}
	return (uint8_t) (flag & AD7124_STATUS_REG_CH_ACTIVE(15));
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <ad7124_enableChannel>:

uint8_t ad7124_enableChannel(struct ad7124_dev *dev, uint8_t ch, uint8_t enable) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	70bb      	strb	r3, [r7, #2]
	if (ch > 16)
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b10      	cmp	r3, #16
 8000cb0:	d901      	bls.n	8000cb6 <ad7124_enableChannel+0x1a>
		return -1;
 8000cb2:	23ff      	movs	r3, #255	@ 0xff
 8000cb4:	e02a      	b.n	8000d0c <ad7124_enableChannel+0x70>

	struct ad7124_registerData *r;
	uint8_t flag, chan = AD7124_Channel_0;
 8000cb6:	2309      	movs	r3, #9
 8000cb8:	75fb      	strb	r3, [r7, #23]
	chan += ch;
 8000cba:	7dfa      	ldrb	r2, [r7, #23]
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	75fb      	strb	r3, [r7, #23]
	r = &dev->regs[chan];
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
	flag = ad7124_readRegister(dev, r);
 8000cce:	6939      	ldr	r1, [r7, #16]
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fd79 	bl	80007c8 <ad7124_readRegister>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]
	if (flag < 0) {
		return 7;
	}

	if (enable) {
 8000cda:	78bb      	ldrb	r3, [r7, #2]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <ad7124_enableChannel+0x52>

		r->value |= AD7124_CH_MAP_REG_CH_ENABLE;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	e005      	b.n	8000cfa <ad7124_enableChannel+0x5e>
	} else {

		r->value &= ~AD7124_CH_MAP_REG_CH_ENABLE;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
	}

	return ad7124_writeRegister(dev, *r);
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	9200      	str	r2, [sp, #0]
 8000d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fd87 	bl	8000816 <ad7124_writeRegister>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b2db      	uxtb	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <ad7124_getData>:

int32_t ad7124_getData(struct ad7124_dev *dev) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	int32_t value;
	int8_t ret;

	ret = ad7124_readData(dev, &value);
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fe64 	bl	80009f0 <ad7124_readData>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
	if (ret < 0) {
 8000d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da02      	bge.n	8000d3a <ad7124_getData+0x26>
		return ret;
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	e000      	b.n	8000d3c <ad7124_getData+0x28>
	}
	return (int32_t) value;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <ad7124_startSingleConversion>:

int8_t ad7124_startSingleConversion(struct ad7124_dev *dev, uint8_t ch) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
	if (ch < 16) {
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d813      	bhi.n	8000d7e <ad7124_startSingleConversion+0x3a>
		int ret;

		ret = ad7124_enableChannel(dev, ch, 1);
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff9d 	bl	8000c9c <ad7124_enableChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	60fb      	str	r3, [r7, #12]
		if (ret < 0) {
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da02      	bge.n	8000d72 <ad7124_startSingleConversion+0x2e>
			return ret;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	e007      	b.n	8000d82 <ad7124_startSingleConversion+0x3e>
		}
		return ad7124_setMode(dev, AD7124_SINGLE);
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f8cd 	bl	8000f14 <ad7124_setMode>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	e001      	b.n	8000d82 <ad7124_startSingleConversion+0x3e>
	}
	return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <ad7124_adcRead>:

int32_t ad7124_adcRead(struct ad7124_dev *dev, uint8_t ch) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(50);
 8000d96:	2032      	movs	r0, #50	@ 0x32
 8000d98:	f002 f95e 	bl	8003058 <HAL_Delay>
	int8_t flag = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
	uint8_t cur_ch = ad7124_currentChannel(dev);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff63 	bl	8000c6c <ad7124_currentChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	73bb      	strb	r3, [r7, #14]

	if (ch != cur_ch) {
 8000daa:	78fa      	ldrb	r2, [r7, #3]
 8000dac:	7bbb      	ldrb	r3, [r7, #14]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d00d      	beq.n	8000dce <ad7124_adcRead+0x44>

		// disable previous channel if different
		flag = ad7124_enableChannel(dev, cur_ch, 0);
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff6f 	bl	8000c9c <ad7124_enableChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]
		if (flag != 0)
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <ad7124_adcRead+0x44>
			return 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e01d      	b.n	8000e0a <ad7124_adcRead+0x80>
	}

	flag = ad7124_startSingleConversion(dev, ch);
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb6 	bl	8000d44 <ad7124_startSingleConversion>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
	if (flag != 0) {
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <ad7124_adcRead+0x60>
		return flag;
 8000de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de8:	e00f      	b.n	8000e0a <ad7124_adcRead+0x80>
	}

	flag = ad7124_waitEndOfConversion(dev);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f811 	bl	8000e12 <ad7124_waitEndOfConversion>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]
	if (flag != 0)
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <ad7124_adcRead+0x78>
		return flag;
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	e003      	b.n	8000e0a <ad7124_adcRead+0x80>

	return ad7124_getData(dev);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff86 	bl	8000d14 <ad7124_getData>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <ad7124_waitEndOfConversion>:

int8_t ad7124_waitEndOfConversion(struct ad7124_dev *dev) {
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
	int8_t ret;
	uint8_t ready = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout = 4000;
 8000e1e:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000e22:	60fb      	str	r3, [r7, #12]

	do {

		/* Read the value of the Status Register */
		ret = ad7124_readRegister(dev, &dev->regs[AD7124_STATUS_REG]);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fccc 	bl	80007c8 <ad7124_readRegister>
 8000e30:	4603      	mov	r3, r0
 8000e32:	72bb      	strb	r3, [r7, #10]
		if (ret != 0) {
 8000e34:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <ad7124_waitEndOfConversion+0x2e>

			return 4;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	e01c      	b.n	8000e7a <ad7124_waitEndOfConversion+0x68>
		}

		/* Check the RDY bit in the Status Register */
		ready = (dev->regs[AD7124_STATUS_REG].value &
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
		AD7124_STATUS_REG_RDY) == 0;
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf0c      	ite	eq
 8000e4e:	2301      	moveq	r3, #1
 8000e50:	2300      	movne	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
		ready = (dev->regs[AD7124_STATUS_REG].value &
 8000e54:	72fb      	strb	r3, [r7, #11]

		HAL_Delay(4);
 8000e56:	2004      	movs	r0, #4
 8000e58:	f002 f8fe 	bl	8003058 <HAL_Delay>
	} while (!ready && --timeout);
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d105      	bne.n	8000e6e <ad7124_waitEndOfConversion+0x5c>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1da      	bne.n	8000e24 <ad7124_waitEndOfConversion+0x12>

	return (timeout == 0) ? 5 : 0;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <ad7124_waitEndOfConversion+0x66>
 8000e74:	2305      	movs	r3, #5
 8000e76:	e000      	b.n	8000e7a <ad7124_waitEndOfConversion+0x68>
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <ad7124_toVoltage>:

float ad7124_toVoltage(int32_t value, int16_t gain, float vref, uint8_t bipolar) {
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e92:	817b      	strh	r3, [r7, #10]
 8000e94:	4613      	mov	r3, r2
 8000e96:	727b      	strb	r3, [r7, #9]
	float voltage = (float) value;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea2:	edc7 7a05 	vstr	s15, [r7, #20]

	if (bipolar) {
 8000ea6:	7a7b      	ldrb	r3, [r7, #9]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00c      	beq.n	8000ec6 <ad7124_toVoltage+0x42>
		voltage = voltage / (float) 0x7FFFFFU - 1;
 8000eac:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eb0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000f0c <ad7124_toVoltage+0x88>
 8000eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ec0:	edc7 7a05 	vstr	s15, [r7, #20]
 8000ec4:	e007      	b.n	8000ed6 <ad7124_toVoltage+0x52>
	} else {
		voltage = voltage / (float) 0xFFFFFFU;
 8000ec6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eca:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000f10 <ad7124_toVoltage+0x8c>
 8000ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed2:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	voltage = voltage * vref / (float) gain;
 8000ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ede:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ee2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef2:	edc7 7a05 	vstr	s15, [r7, #20]
	return voltage;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	ee07 3a90 	vmov	s15, r3
}
 8000efc:	eeb0 0a67 	vmov.f32	s0, s15
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	4afffffe 	.word	0x4afffffe
 8000f10:	4b7fffff 	.word	0x4b7fffff

08000f14 <ad7124_setMode>:

int8_t ad7124_setMode(struct ad7124_dev *dev, enum ad7124_mode operating_mode) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
	struct ad7124_registerData *r;
	r = &dev->regs[AD7124_ADC_Control];
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	3310      	adds	r3, #16
 8000f26:	60fb      	str	r3, [r7, #12]
	r->value &= ~AD7124_ADC_CTRL_REG_MODE(0x0F); // clear mode
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	605a      	str	r2, [r3, #4]
	r->value |= AD7124_ADC_CTRL_REG_MODE(operating_mode);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	605a      	str	r2, [r3, #4]
	return ad7124_writeRegister(dev, dev->regs[AD7124_ADC_Control]);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	9200      	str	r2, [sp, #0]
 8000f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fc5f 	bl	8000816 <ad7124_writeRegister>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <ad7124_init>:

// Initializes the AD7124.
int8_t ad7124_init(struct ad7124_dev *device, SPI_HandleTypeDef *hspi,
		GPIO_TypeDef *ncs_GPIOx, uint16_t ncs_GPIO_pin) {
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	f5ad 7d6c 	sub.w	sp, sp, #944	@ 0x3b0
 8000f6a:	af02      	add	r7, sp, #8
 8000f6c:	f507 746a 	add.w	r4, r7, #936	@ 0x3a8
 8000f70:	f5a4 7467 	sub.w	r4, r4, #924	@ 0x39c
 8000f74:	6020      	str	r0, [r4, #0]
 8000f76:	f507 706a 	add.w	r0, r7, #936	@ 0x3a8
 8000f7a:	f5a0 7068 	sub.w	r0, r0, #928	@ 0x3a0
 8000f7e:	6001      	str	r1, [r0, #0]
 8000f80:	f507 716a 	add.w	r1, r7, #936	@ 0x3a8
 8000f84:	f5a1 7169 	sub.w	r1, r1, #932	@ 0x3a4
 8000f88:	600a      	str	r2, [r1, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000f90:	f2a3 33a6 	subw	r3, r3, #934	@ 0x3a6
 8000f94:	801a      	strh	r2, [r3, #0]
	struct ad7124_registerData ad7124_init_regs_default[AD7124_REG_NO] = { {
 8000f96:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000f9a:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8000f9e:	4a9d      	ldr	r2, [pc, #628]	@ (8001214 <ad7124_init+0x2b0>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	f44f 7364 	mov.w	r3, #912	@ 0x390
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f006 ff8f 	bl	8007ecc <memcpy>
	{ 0x36, 0x500000, 3, 1 }, /* AD7124_Gain_5 */
	{ 0x37, 0x500000, 3, 1 }, /* AD7124_Gain_6 */
	{ 0x38, 0x500000, 3, 1 }, /* AD7124_Gain_7 */
	};

	int8_t flag = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f887 33a7 	strb.w	r3, [r7, #935]	@ 0x3a7
	uint8_t i = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 33a6 	strb.w	r3, [r7, #934]	@ 0x3a6

	// Fill all registers with default values
	device->regs = &ad7124_init_regs_default;
 8000fba:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000fbe:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f107 0214 	add.w	r2, r7, #20
 8000fc8:	60da      	str	r2, [r3, #12]
	device->responseTimeout = 1000;
 8000fca:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000fce:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fd8:	615a      	str	r2, [r3, #20]
	device->isReady = 0;
 8000fda:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000fde:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	745a      	strb	r2, [r3, #17]
	device->useCRC = 0;
 8000fe8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000fec:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	741a      	strb	r2, [r3, #16]

	// SPI Communication Data
	device->hspi = hspi;
 8000ff6:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8000ffa:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f507 726a 	add.w	r2, r7, #936	@ 0x3a8
 8001004:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	601a      	str	r2, [r3, #0]
	device->ncs_GPIOx = ncs_GPIOx;
 800100c:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8001010:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f507 726a 	add.w	r2, r7, #936	@ 0x3a8
 800101a:	f5a2 7269 	sub.w	r2, r2, #932	@ 0x3a4
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	605a      	str	r2, [r3, #4]
	device->ncs_GPIO_pin = ncs_GPIO_pin;
 8001022:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8001026:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f507 726a 	add.w	r2, r7, #936	@ 0x3a8
 8001030:	f2a2 32a6 	subw	r2, r2, #934	@ 0x3a6
 8001034:	8812      	ldrh	r2, [r2, #0]
 8001036:	811a      	strh	r2, [r3, #8]
	device->active_device = AD7124_8_ID;
 8001038:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 800103c:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2216      	movs	r2, #22
 8001044:	765a      	strb	r2, [r3, #25]

	// Reset the device
	flag = ad7124_reset(device);
 8001046:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 800104a:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	f7ff fc10 	bl	8000874 <ad7124_reset>
 8001054:	4603      	mov	r3, r0
 8001056:	f887 33a7 	strb.w	r3, [r7, #935]	@ 0x3a7

	// Initialize ADC
	ad7124_setAdcControl(device, AD7124_STANDBY, AD7124_LOW_POWER, 0, 0);
 800105a:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 800105e:	f5a3 7067 	sub.w	r0, r3, #924	@ 0x39c
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	2200      	movs	r2, #0
 800106a:	2102      	movs	r1, #2
 800106c:	6800      	ldr	r0, [r0, #0]
 800106e:	f7ff fd1f 	bl	8000ab0 <ad7124_setAdcControl>

	// Read the ID register
	flag = ad7124_readRegister(device, &device->regs[AD7124_ID_REG]);
 8001072:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8001076:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8001082:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8001086:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800108a:	4611      	mov	r1, r2
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	f7ff fb9b 	bl	80007c8 <ad7124_readRegister>
 8001092:	4603      	mov	r3, r0
 8001094:	f887 33a7 	strb.w	r3, [r7, #935]	@ 0x3a7

	if (device->active_device == ID_AD7124_4) {
 8001098:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 800109c:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	7e5b      	ldrb	r3, [r3, #25]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <ad7124_init+0x15c>
		if (!(device->regs[AD7124_ID_REG].value == AD7124_4_ID))
 80010a8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80010ac:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	3350      	adds	r3, #80	@ 0x50
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b14      	cmp	r3, #20
 80010ba:	d015      	beq.n	80010e8 <ad7124_init+0x184>
			return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0a3      	b.n	8001208 <ad7124_init+0x2a4>
	} else if (device->active_device == ID_AD7124_8) {
 80010c0:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80010c4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	7e5b      	ldrb	r3, [r3, #25]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10b      	bne.n	80010e8 <ad7124_init+0x184>
		if (!(device->regs[AD7124_ID_REG].value == AD7124_8_ID))
 80010d0:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80010d4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	3350      	adds	r3, #80	@ 0x50
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b16      	cmp	r3, #22
 80010e2:	d001      	beq.n	80010e8 <ad7124_init+0x184>
			return 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e08f      	b.n	8001208 <ad7124_init+0x2a4>
	}

	//	Thermocouple mode
	flag = ad7124_setAdcControl(device, AD7124_CONTINUOUS, AD7124_HIGH_POWER, 1,
 80010e8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80010ec:	f5a3 7067 	sub.w	r0, r3, #924	@ 0x39c
 80010f0:	2300      	movs	r3, #0
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2202      	movs	r2, #2
 80010f8:	2100      	movs	r1, #0
 80010fa:	6800      	ldr	r0, [r0, #0]
 80010fc:	f7ff fcd8 	bl	8000ab0 <ad7124_setAdcControl>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 33a7 	strb.w	r3, [r7, #935]	@ 0x3a7
			0);
	// Sets up the 8 channels
	for (i = 0; i < AD7124_MAX_SETUPS; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	f887 33a6 	strb.w	r3, [r7, #934]	@ 0x3a6
 800110c:	e03e      	b.n	800118c <ad7124_init+0x228>
		flag = ad7124_setConfig(device, i, EXTERNAL_REFIN1, Pga128, 1, BurnoutOff);
 800110e:	f897 13a6 	ldrb.w	r1, [r7, #934]	@ 0x3a6
 8001112:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 8001116:	f5a3 7067 	sub.w	r0, r3, #924	@ 0x39c
 800111a:	2300      	movs	r3, #0
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	2301      	movs	r3, #1
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2307      	movs	r3, #7
 8001124:	2200      	movs	r2, #0
 8001126:	6800      	ldr	r0, [r0, #0]
 8001128:	f7ff fcf7 	bl	8000b1a <ad7124_setConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	f887 33a7 	strb.w	r3, [r7, #935]	@ 0x3a7
		if (flag)
 8001132:	f997 33a7 	ldrsb.w	r3, [r7, #935]	@ 0x3a7
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <ad7124_init+0x1da>
			return 1;
 800113a:	2301      	movs	r3, #1
 800113c:	e064      	b.n	8001208 <ad7124_init+0x2a4>

		flag = ad7124_setChannel(device, i, i, 2*i, 2*i+1, 0);
 800113e:	f897 33a6 	ldrb.w	r3, [r7, #934]	@ 0x3a6
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	b2dc      	uxtb	r4, r3
 8001146:	f897 33a6 	ldrb.w	r3, [r7, #934]	@ 0x3a6
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f897 23a6 	ldrb.w	r2, [r7, #934]	@ 0x3a6
 8001156:	f897 13a6 	ldrb.w	r1, [r7, #934]	@ 0x3a6
 800115a:	f507 706a 	add.w	r0, r7, #936	@ 0x3a8
 800115e:	f5a0 7067 	sub.w	r0, r0, #924	@ 0x39c
 8001162:	2500      	movs	r5, #0
 8001164:	9501      	str	r5, [sp, #4]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4623      	mov	r3, r4
 800116a:	6800      	ldr	r0, [r0, #0]
 800116c:	f7ff fd17 	bl	8000b9e <ad7124_setChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	f887 33a7 	strb.w	r3, [r7, #935]	@ 0x3a7
		if (flag)
 8001176:	f997 33a7 	ldrsb.w	r3, [r7, #935]	@ 0x3a7
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <ad7124_init+0x21e>
			return 1;
 800117e:	2301      	movs	r3, #1
 8001180:	e042      	b.n	8001208 <ad7124_init+0x2a4>
	for (i = 0; i < AD7124_MAX_SETUPS; i++) {
 8001182:	f897 33a6 	ldrb.w	r3, [r7, #934]	@ 0x3a6
 8001186:	3301      	adds	r3, #1
 8001188:	f887 33a6 	strb.w	r3, [r7, #934]	@ 0x3a6
 800118c:	f897 33a6 	ldrb.w	r3, [r7, #934]	@ 0x3a6
 8001190:	2b07      	cmp	r3, #7
 8001192:	d9bc      	bls.n	800110e <ad7124_init+0x1aa>
	}


	if (flag)
 8001194:	f997 33a7 	ldrsb.w	r3, [r7, #935]	@ 0x3a7
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <ad7124_init+0x23c>
		return 1;
 800119c:	2301      	movs	r3, #1
 800119e:	e033      	b.n	8001208 <ad7124_init+0x2a4>

	// Reads Calbiration Data
	for (uint8_t i = 0; i < 8; i++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 33a5 	strb.w	r3, [r7, #933]	@ 0x3a5
 80011a6:	e02a      	b.n	80011fe <ad7124_init+0x29a>
		ad7124_readRegister(device, &device->regs[AD7124_Offset_0 + i]);
 80011a8:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80011ac:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	f897 33a5 	ldrb.w	r3, [r7, #933]	@ 0x3a5
 80011b8:	3329      	adds	r3, #41	@ 0x29
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	441a      	add	r2, r3
 80011be:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80011c2:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011c6:	4611      	mov	r1, r2
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	f7ff fafd 	bl	80007c8 <ad7124_readRegister>
		ad7124_readRegister(device, &device->regs[AD7124_Gain_0 + i]);
 80011ce:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80011d2:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	f897 33a5 	ldrb.w	r3, [r7, #933]	@ 0x3a5
 80011de:	3331      	adds	r3, #49	@ 0x31
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	441a      	add	r2, r3
 80011e4:	f507 736a 	add.w	r3, r7, #936	@ 0x3a8
 80011e8:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011ec:	4611      	mov	r1, r2
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f7ff faea 	bl	80007c8 <ad7124_readRegister>
	for (uint8_t i = 0; i < 8; i++) {
 80011f4:	f897 33a5 	ldrb.w	r3, [r7, #933]	@ 0x3a5
 80011f8:	3301      	adds	r3, #1
 80011fa:	f887 33a5 	strb.w	r3, [r7, #933]	@ 0x3a5
 80011fe:	f897 33a5 	ldrb.w	r3, [r7, #933]	@ 0x3a5
 8001202:	2b07      	cmp	r3, #7
 8001204:	d9d0      	bls.n	80011a8 <ad7124_init+0x244>
	}

	return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	f507 776a 	add.w	r7, r7, #936	@ 0x3a8
 800120e:	46bd      	mov	sp, r7
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	bf00      	nop
 8001214:	08007f10 	.word	0x08007f10

08001218 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001236:	4b3e      	ldr	r3, [pc, #248]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001238:	4a3e      	ldr	r2, [pc, #248]	@ (8001334 <MX_ADC1_Init+0x11c>)
 800123a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800123c:	4b3c      	ldr	r3, [pc, #240]	@ (8001330 <MX_ADC1_Init+0x118>)
 800123e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001242:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001244:	4b3a      	ldr	r3, [pc, #232]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800124a:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <MX_ADC1_Init+0x118>)
 800124c:	2201      	movs	r2, #1
 800124e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001250:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001256:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800125e:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001264:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001266:	4b32      	ldr	r3, [pc, #200]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001268:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800126c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126e:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001274:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001276:	2204      	movs	r2, #4
 8001278:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <MX_ADC1_Init+0x118>)
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001288:	4829      	ldr	r0, [pc, #164]	@ (8001330 <MX_ADC1_Init+0x118>)
 800128a:	f001 ff09 	bl	80030a0 <HAL_ADC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001294:	f001 f820 	bl	80022d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8001298:	2307      	movs	r3, #7
 800129a:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 800129c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012a0:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4820      	ldr	r0, [pc, #128]	@ (8001330 <MX_ADC1_Init+0x118>)
 80012ae:	f002 faa1 	bl	80037f4 <HAL_ADCEx_MultiModeConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80012b8:	f001 f80e 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012bc:	2309      	movs	r3, #9
 80012be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4818      	ldr	r0, [pc, #96]	@ (8001330 <MX_ADC1_Init+0x118>)
 80012ce:	f002 f859 	bl	8003384 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80012d8:	f000 fffe 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012dc:	2305      	movs	r3, #5
 80012de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4811      	ldr	r0, [pc, #68]	@ (8001330 <MX_ADC1_Init+0x118>)
 80012ea:	f002 f84b 	bl	8003384 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80012f4:	f000 fff0 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	480b      	ldr	r0, [pc, #44]	@ (8001330 <MX_ADC1_Init+0x118>)
 8001302:	f002 f83f 	bl	8003384 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 800130c:	f000 ffe4 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8001310:	2304      	movs	r3, #4
 8001312:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <MX_ADC1_Init+0x118>)
 800131a:	f002 f833 	bl	8003384 <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001324:	f000 ffd8 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000028 	.word	0x20000028
 8001334:	40012000 	.word	0x40012000

08001338 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133e:	463b      	mov	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800134a:	4b31      	ldr	r3, [pc, #196]	@ (8001410 <MX_ADC2_Init+0xd8>)
 800134c:	4a31      	ldr	r2, [pc, #196]	@ (8001414 <MX_ADC2_Init+0xdc>)
 800134e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001350:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <MX_ADC2_Init+0xd8>)
 8001352:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001356:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001358:	4b2d      	ldr	r3, [pc, #180]	@ (8001410 <MX_ADC2_Init+0xd8>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800135e:	4b2c      	ldr	r3, [pc, #176]	@ (8001410 <MX_ADC2_Init+0xd8>)
 8001360:	2201      	movs	r2, #1
 8001362:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001364:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <MX_ADC2_Init+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800136a:	4b29      	ldr	r3, [pc, #164]	@ (8001410 <MX_ADC2_Init+0xd8>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001372:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <MX_ADC2_Init+0xd8>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001378:	4b25      	ldr	r3, [pc, #148]	@ (8001410 <MX_ADC2_Init+0xd8>)
 800137a:	2204      	movs	r2, #4
 800137c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800137e:	4b24      	ldr	r3, [pc, #144]	@ (8001410 <MX_ADC2_Init+0xd8>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001386:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <MX_ADC2_Init+0xd8>)
 8001388:	2201      	movs	r2, #1
 800138a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800138c:	4820      	ldr	r0, [pc, #128]	@ (8001410 <MX_ADC2_Init+0xd8>)
 800138e:	f001 fe87 	bl	80030a0 <HAL_ADC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001398:	f000 ff9e 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800139c:	2308      	movs	r3, #8
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4818      	ldr	r0, [pc, #96]	@ (8001410 <MX_ADC2_Init+0xd8>)
 80013ae:	f001 ffe9 	bl	8003384 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80013b8:	f000 ff8e 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013bc:	2304      	movs	r3, #4
 80013be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	4811      	ldr	r0, [pc, #68]	@ (8001410 <MX_ADC2_Init+0xd8>)
 80013ca:	f001 ffdb 	bl	8003384 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 80013d4:	f000 ff80 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80013d8:	2303      	movs	r3, #3
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	480b      	ldr	r0, [pc, #44]	@ (8001410 <MX_ADC2_Init+0xd8>)
 80013e2:	f001 ffcf 	bl	8003384 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80013ec:	f000 ff74 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80013f0:	2304      	movs	r3, #4
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	@ (8001410 <MX_ADC2_Init+0xd8>)
 80013fa:	f001 ffc3 	bl	8003384 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8001404:	f000 ff68 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000070 	.word	0x20000070
 8001414:	40012100 	.word	0x40012100

08001418 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800142a:	4b40      	ldr	r3, [pc, #256]	@ (800152c <MX_ADC3_Init+0x114>)
 800142c:	4a40      	ldr	r2, [pc, #256]	@ (8001530 <MX_ADC3_Init+0x118>)
 800142e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001430:	4b3e      	ldr	r3, [pc, #248]	@ (800152c <MX_ADC3_Init+0x114>)
 8001432:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001436:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001438:	4b3c      	ldr	r3, [pc, #240]	@ (800152c <MX_ADC3_Init+0x114>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <MX_ADC3_Init+0x114>)
 8001440:	2201      	movs	r2, #1
 8001442:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001444:	4b39      	ldr	r3, [pc, #228]	@ (800152c <MX_ADC3_Init+0x114>)
 8001446:	2200      	movs	r2, #0
 8001448:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800144a:	4b38      	ldr	r3, [pc, #224]	@ (800152c <MX_ADC3_Init+0x114>)
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001452:	4b36      	ldr	r3, [pc, #216]	@ (800152c <MX_ADC3_Init+0x114>)
 8001454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800145a:	4b34      	ldr	r3, [pc, #208]	@ (800152c <MX_ADC3_Init+0x114>)
 800145c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001460:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001462:	4b32      	ldr	r3, [pc, #200]	@ (800152c <MX_ADC3_Init+0x114>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8001468:	4b30      	ldr	r3, [pc, #192]	@ (800152c <MX_ADC3_Init+0x114>)
 800146a:	2206      	movs	r2, #6
 800146c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800146e:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <MX_ADC3_Init+0x114>)
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <MX_ADC3_Init+0x114>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800147c:	482b      	ldr	r0, [pc, #172]	@ (800152c <MX_ADC3_Init+0x114>)
 800147e:	f001 fe0f 	bl	80030a0 <HAL_ADC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001488:	f000 ff26 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001494:	2301      	movs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	4823      	ldr	r0, [pc, #140]	@ (800152c <MX_ADC3_Init+0x114>)
 800149e:	f001 ff71 	bl	8003384 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80014a8:	f000 ff16 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	481d      	ldr	r0, [pc, #116]	@ (800152c <MX_ADC3_Init+0x114>)
 80014b6:	f001 ff65 	bl	8003384 <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 80014c0:	f000 ff0a 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80014c4:	2303      	movs	r3, #3
 80014c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4817      	ldr	r0, [pc, #92]	@ (800152c <MX_ADC3_Init+0x114>)
 80014ce:	f001 ff59 	bl	8003384 <HAL_ADC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 80014d8:	f000 fefe 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80014dc:	2304      	movs	r3, #4
 80014de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4811      	ldr	r0, [pc, #68]	@ (800152c <MX_ADC3_Init+0x114>)
 80014e6:	f001 ff4d 	bl	8003384 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80014f0:	f000 fef2 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80014f4:	2305      	movs	r3, #5
 80014f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	480b      	ldr	r0, [pc, #44]	@ (800152c <MX_ADC3_Init+0x114>)
 80014fe:	f001 ff41 	bl	8003384 <HAL_ADC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8001508:	f000 fee6 	bl	80022d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 800150c:	2306      	movs	r3, #6
 800150e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_ADC3_Init+0x114>)
 8001516:	f001 ff35 	bl	8003384 <HAL_ADC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 8001520:	f000 feda 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200000b8 	.word	0x200000b8
 8001530:	40012200 	.word	0x40012200

08001534 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b092      	sub	sp, #72	@ 0x48
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a81      	ldr	r2, [pc, #516]	@ (8001758 <HAL_ADC_MspInit+0x224>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f040 8096 	bne.w	8001684 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
 800155c:	4b7f      	ldr	r3, [pc, #508]	@ (800175c <HAL_ADC_MspInit+0x228>)
 800155e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001560:	4a7e      	ldr	r2, [pc, #504]	@ (800175c <HAL_ADC_MspInit+0x228>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001566:	6453      	str	r3, [r2, #68]	@ 0x44
 8001568:	4b7c      	ldr	r3, [pc, #496]	@ (800175c <HAL_ADC_MspInit+0x228>)
 800156a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001570:	633b      	str	r3, [r7, #48]	@ 0x30
 8001572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001578:	4b78      	ldr	r3, [pc, #480]	@ (800175c <HAL_ADC_MspInit+0x228>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	4a77      	ldr	r2, [pc, #476]	@ (800175c <HAL_ADC_MspInit+0x228>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6313      	str	r3, [r2, #48]	@ 0x30
 8001584:	4b75      	ldr	r3, [pc, #468]	@ (800175c <HAL_ADC_MspInit+0x228>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800158e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001594:	4b71      	ldr	r3, [pc, #452]	@ (800175c <HAL_ADC_MspInit+0x228>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	4a70      	ldr	r2, [pc, #448]	@ (800175c <HAL_ADC_MspInit+0x228>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a0:	4b6e      	ldr	r3, [pc, #440]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b0:	4b6a      	ldr	r3, [pc, #424]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b4:	4a69      	ldr	r2, [pc, #420]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80015bc:	4b67      	ldr	r3, [pc, #412]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015c8:	23a0      	movs	r3, #160	@ 0xa0
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015cc:	2303      	movs	r3, #3
 80015ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015d8:	4619      	mov	r1, r3
 80015da:	4861      	ldr	r0, [pc, #388]	@ (8001760 <HAL_ADC_MspInit+0x22c>)
 80015dc:	f003 f966 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e0:	2320      	movs	r3, #32
 80015e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e4:	2303      	movs	r3, #3
 80015e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015f0:	4619      	mov	r1, r3
 80015f2:	485c      	ldr	r0, [pc, #368]	@ (8001764 <HAL_ADC_MspInit+0x230>)
 80015f4:	f003 f95a 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015f8:	2302      	movs	r3, #2
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fc:	2303      	movs	r3, #3
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001608:	4619      	mov	r1, r3
 800160a:	4857      	ldr	r0, [pc, #348]	@ (8001768 <HAL_ADC_MspInit+0x234>)
 800160c:	f003 f94e 	bl	80048ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001610:	4b56      	ldr	r3, [pc, #344]	@ (800176c <HAL_ADC_MspInit+0x238>)
 8001612:	4a57      	ldr	r2, [pc, #348]	@ (8001770 <HAL_ADC_MspInit+0x23c>)
 8001614:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001616:	4b55      	ldr	r3, [pc, #340]	@ (800176c <HAL_ADC_MspInit+0x238>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_ADC_MspInit+0x238>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001622:	4b52      	ldr	r3, [pc, #328]	@ (800176c <HAL_ADC_MspInit+0x238>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_ADC_MspInit+0x238>)
 800162a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800162e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001630:	4b4e      	ldr	r3, [pc, #312]	@ (800176c <HAL_ADC_MspInit+0x238>)
 8001632:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001636:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001638:	4b4c      	ldr	r3, [pc, #304]	@ (800176c <HAL_ADC_MspInit+0x238>)
 800163a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800163e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001640:	4b4a      	ldr	r3, [pc, #296]	@ (800176c <HAL_ADC_MspInit+0x238>)
 8001642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001646:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001648:	4b48      	ldr	r3, [pc, #288]	@ (800176c <HAL_ADC_MspInit+0x238>)
 800164a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800164e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b46      	ldr	r3, [pc, #280]	@ (800176c <HAL_ADC_MspInit+0x238>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001656:	4845      	ldr	r0, [pc, #276]	@ (800176c <HAL_ADC_MspInit+0x238>)
 8001658:	f002 fd58 	bl	800410c <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8001662:	f000 fe39 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a40      	ldr	r2, [pc, #256]	@ (800176c <HAL_ADC_MspInit+0x238>)
 800166a:	639a      	str	r2, [r3, #56]	@ 0x38
 800166c:	4a3f      	ldr	r2, [pc, #252]	@ (800176c <HAL_ADC_MspInit+0x238>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2012      	movs	r0, #18
 8001678:	f002 fd11 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800167c:	2012      	movs	r0, #18
 800167e:	f002 fd2a 	bl	80040d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001682:	e0fa      	b.n	800187a <HAL_ADC_MspInit+0x346>
  else if(adcHandle->Instance==ADC2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a3a      	ldr	r2, [pc, #232]	@ (8001774 <HAL_ADC_MspInit+0x240>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d174      	bne.n	8001778 <HAL_ADC_MspInit+0x244>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
 8001692:	4b32      	ldr	r3, [pc, #200]	@ (800175c <HAL_ADC_MspInit+0x228>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a31      	ldr	r2, [pc, #196]	@ (800175c <HAL_ADC_MspInit+0x228>)
 8001698:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44
 800169e:	4b2f      	ldr	r3, [pc, #188]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a2a      	ldr	r2, [pc, #168]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b28      	ldr	r3, [pc, #160]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a23      	ldr	r2, [pc, #140]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <HAL_ADC_MspInit+0x228>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80016fe:	2350      	movs	r3, #80	@ 0x50
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001702:	2303      	movs	r3, #3
 8001704:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800170e:	4619      	mov	r1, r3
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <HAL_ADC_MspInit+0x22c>)
 8001712:	f003 f8cb 	bl	80048ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001716:	2310      	movs	r3, #16
 8001718:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171a:	2303      	movs	r3, #3
 800171c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001726:	4619      	mov	r1, r3
 8001728:	480e      	ldr	r0, [pc, #56]	@ (8001764 <HAL_ADC_MspInit+0x230>)
 800172a:	f003 f8bf 	bl	80048ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800172e:	2301      	movs	r3, #1
 8001730:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001732:	2303      	movs	r3, #3
 8001734:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800173e:	4619      	mov	r1, r3
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <HAL_ADC_MspInit+0x234>)
 8001742:	f003 f8b3 	bl	80048ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2012      	movs	r0, #18
 800174c:	f002 fca7 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001750:	2012      	movs	r0, #18
 8001752:	f002 fcc0 	bl	80040d6 <HAL_NVIC_EnableIRQ>
}
 8001756:	e090      	b.n	800187a <HAL_ADC_MspInit+0x346>
 8001758:	40012000 	.word	0x40012000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020800 	.word	0x40020800
 8001768:	40020400 	.word	0x40020400
 800176c:	20000100 	.word	0x20000100
 8001770:	40026410 	.word	0x40026410
 8001774:	40012100 	.word	0x40012100
  else if(adcHandle->Instance==ADC3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a41      	ldr	r2, [pc, #260]	@ (8001884 <HAL_ADC_MspInit+0x350>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d17b      	bne.n	800187a <HAL_ADC_MspInit+0x346>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b40      	ldr	r3, [pc, #256]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	4a3f      	ldr	r2, [pc, #252]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 800178c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001790:	6453      	str	r3, [r2, #68]	@ 0x44
 8001792:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b39      	ldr	r3, [pc, #228]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a38      	ldr	r2, [pc, #224]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b36      	ldr	r3, [pc, #216]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a31      	ldr	r2, [pc, #196]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001888 <HAL_ADC_MspInit+0x354>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80017d6:	2307      	movs	r3, #7
 80017d8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017e6:	4619      	mov	r1, r3
 80017e8:	4828      	ldr	r0, [pc, #160]	@ (800188c <HAL_ADC_MspInit+0x358>)
 80017ea:	f003 f85f 	bl	80048ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80017ee:	2307      	movs	r3, #7
 80017f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f2:	2303      	movs	r3, #3
 80017f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017fe:	4619      	mov	r1, r3
 8001800:	4823      	ldr	r0, [pc, #140]	@ (8001890 <HAL_ADC_MspInit+0x35c>)
 8001802:	f003 f853 	bl	80048ac <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001806:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 8001808:	4a23      	ldr	r2, [pc, #140]	@ (8001898 <HAL_ADC_MspInit+0x364>)
 800180a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 800180e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001812:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 8001822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001826:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 800182a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800182e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001830:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 8001832:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001836:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 800183a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800183e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 8001842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001846:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800184e:	4811      	ldr	r0, [pc, #68]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 8001850:	f002 fc5c 	bl	800410c <HAL_DMA_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 800185a:	f000 fd3d 	bl	80022d8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 8001862:	639a      	str	r2, [r3, #56]	@ 0x38
 8001864:	4a0b      	ldr	r2, [pc, #44]	@ (8001894 <HAL_ADC_MspInit+0x360>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2012      	movs	r0, #18
 8001870:	f002 fc15 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001874:	2012      	movs	r0, #18
 8001876:	f002 fc2e 	bl	80040d6 <HAL_NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3748      	adds	r7, #72	@ 0x48
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40012200 	.word	0x40012200
 8001888:	40023800 	.word	0x40023800
 800188c:	40020800 	.word	0x40020800
 8001890:	40020000 	.word	0x40020000
 8001894:	20000160 	.word	0x20000160
 8001898:	40026428 	.word	0x40026428

0800189c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018a2:	4a19      	ldr	r2, [pc, #100]	@ (8001908 <MX_CAN1_Init+0x6c>)
 80018a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018a8:	220e      	movs	r2, #14
 80018aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018b8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80018c8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018d8:	2200      	movs	r2, #0
 80018da:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018de:	2201      	movs	r2, #1
 80018e0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_CAN1_Init+0x68>)
 80018f0:	f001 ffc6 	bl	8003880 <HAL_CAN_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80018fa:	f000 fced 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200001c0 	.word	0x200001c0
 8001908:	40006400 	.word	0x40006400

0800190c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a25      	ldr	r2, [pc, #148]	@ (80019c0 <HAL_CAN_MspInit+0xb4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d143      	bne.n	80019b6 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <HAL_CAN_MspInit+0xb8>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	4a23      	ldr	r2, [pc, #140]	@ (80019c4 <HAL_CAN_MspInit+0xb8>)
 8001938:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800193c:	6413      	str	r3, [r2, #64]	@ 0x40
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <HAL_CAN_MspInit+0xb8>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_CAN_MspInit+0xb8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a1c      	ldr	r2, [pc, #112]	@ (80019c4 <HAL_CAN_MspInit+0xb8>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <HAL_CAN_MspInit+0xb8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001966:	2301      	movs	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196e:	2301      	movs	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001976:	2309      	movs	r3, #9
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4811      	ldr	r0, [pc, #68]	@ (80019c8 <HAL_CAN_MspInit+0xbc>)
 8001982:	f002 ff93 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001986:	2302      	movs	r3, #2
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001996:	2309      	movs	r3, #9
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4809      	ldr	r0, [pc, #36]	@ (80019c8 <HAL_CAN_MspInit+0xbc>)
 80019a2:	f002 ff83 	bl	80048ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2014      	movs	r0, #20
 80019ac:	f002 fb77 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019b0:	2014      	movs	r0, #20
 80019b2:	f002 fb90 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	@ 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40006400 	.word	0x40006400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020c00 	.word	0x40020c00

080019cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <MX_DMA_Init+0xc8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a2e      	ldr	r2, [pc, #184]	@ (8001a94 <MX_DMA_Init+0xc8>)
 80019dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <MX_DMA_Init+0xc8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <MX_DMA_Init+0xc8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a27      	ldr	r2, [pc, #156]	@ (8001a94 <MX_DMA_Init+0xc8>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <MX_DMA_Init+0xc8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	200e      	movs	r0, #14
 8001a10:	f002 fb45 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a14:	200e      	movs	r0, #14
 8001a16:	f002 fb5e 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f002 fb3d 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a24:	200f      	movs	r0, #15
 8001a26:	f002 fb56 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2011      	movs	r0, #17
 8001a30:	f002 fb35 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a34:	2011      	movs	r0, #17
 8001a36:	f002 fb4e 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	202f      	movs	r0, #47	@ 0x2f
 8001a40:	f002 fb2d 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001a44:	202f      	movs	r0, #47	@ 0x2f
 8001a46:	f002 fb46 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2038      	movs	r0, #56	@ 0x38
 8001a50:	f002 fb25 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a54:	2038      	movs	r0, #56	@ 0x38
 8001a56:	f002 fb3e 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2039      	movs	r0, #57	@ 0x39
 8001a60:	f002 fb1d 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a64:	2039      	movs	r0, #57	@ 0x39
 8001a66:	f002 fb36 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	203a      	movs	r0, #58	@ 0x3a
 8001a70:	f002 fb15 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a74:	203a      	movs	r0, #58	@ 0x3a
 8001a76:	f002 fb2e 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2044      	movs	r0, #68	@ 0x44
 8001a80:	f002 fb0d 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001a84:	2044      	movs	r0, #68	@ 0x44
 8001a86:	f002 fb26 	bl	80040d6 <HAL_NVIC_EnableIRQ>

}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <MX_FMPI2C1_Init>:

FMPI2C_HandleTypeDef hfmpi2c1;

/* FMPI2C1 init function */
void MX_FMPI2C1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001a9e:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <MX_FMPI2C1_Init+0x64>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00A0A3F7;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <MX_FMPI2C1_Init+0x68>)
 8001aa6:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001ad2:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001ad4:	f002 fe04 	bl	80046e0 <HAL_FMPI2C_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8001ade:	f000 fbfb 	bl	80022d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4804      	ldr	r0, [pc, #16]	@ (8001af8 <MX_FMPI2C1_Init+0x60>)
 8001ae6:	f002 fe96 	bl	8004816 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001af0:	f000 fbf2 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200001e8 	.word	0x200001e8
 8001afc:	40006000 	.word	0x40006000
 8001b00:	00a0a3f7 	.word	0x00a0a3f7

08001b04 <HAL_FMPI2C_MspInit>:

void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* fmpi2cHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0a0      	sub	sp, #128	@ 0x80
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	225c      	movs	r2, #92	@ 0x5c
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f006 f9a5 	bl	8007e74 <memset>
  if(fmpi2cHandle->Instance==FMPI2C1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a21      	ldr	r2, [pc, #132]	@ (8001bb4 <HAL_FMPI2C_MspInit+0xb0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d13a      	bne.n	8001baa <HAL_FMPI2C_MspInit+0xa6>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fb6d 	bl	8005220 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b4c:	f000 fbc4 	bl	80022d8 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <HAL_FMPI2C_MspInit+0xb4>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	4a17      	ldr	r2, [pc, #92]	@ (8001bb8 <HAL_FMPI2C_MspInit+0xb4>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b60:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_FMPI2C_MspInit+0xb4>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PD12     ------> FMPI2C1_SCL
    PD13     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b72:	2312      	movs	r3, #18
 8001b74:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001b86:	4619      	mov	r1, r3
 8001b88:	480c      	ldr	r0, [pc, #48]	@ (8001bbc <HAL_FMPI2C_MspInit+0xb8>)
 8001b8a:	f002 fe8f 	bl	80048ac <HAL_GPIO_Init>

    /* FMPI2C1 clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_FMPI2C_MspInit+0xb4>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <HAL_FMPI2C_MspInit+0xb4>)
 8001b98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_FMPI2C_MspInit+0xb4>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }
}
 8001baa:	bf00      	nop
 8001bac:	3780      	adds	r7, #128	@ 0x80
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40006000 	.word	0x40006000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020c00 	.word	0x40020c00

08001bc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	@ 0x30
 8001bc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a5c      	ldr	r2, [pc, #368]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b56      	ldr	r3, [pc, #344]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a55      	ldr	r2, [pc, #340]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b4f      	ldr	r3, [pc, #316]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a4e      	ldr	r2, [pc, #312]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b48      	ldr	r3, [pc, #288]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a47      	ldr	r2, [pc, #284]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b45      	ldr	r3, [pc, #276]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a40      	ldr	r2, [pc, #256]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b3e      	ldr	r3, [pc, #248]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b3a      	ldr	r3, [pc, #232]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a39      	ldr	r2, [pc, #228]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b37      	ldr	r3, [pc, #220]	@ (8001d50 <MX_GPIO_Init+0x190>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f248 013a 	movw	r1, #32826	@ 0x803a
 8001c84:	4833      	ldr	r0, [pc, #204]	@ (8001d54 <MX_GPIO_Init+0x194>)
 8001c86:	f002 ffa5 	bl	8004bd4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4832      	ldr	r0, [pc, #200]	@ (8001d58 <MX_GPIO_Init+0x198>)
 8001c90:	f002 ffa0 	bl	8004bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001c9a:	4830      	ldr	r0, [pc, #192]	@ (8001d5c <MX_GPIO_Init+0x19c>)
 8001c9c:	f002 ff9a 	bl	8004bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_3
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8001ca6:	482e      	ldr	r0, [pc, #184]	@ (8001d60 <MX_GPIO_Init+0x1a0>)
 8001ca8:	f002 ff94 	bl	8004bd4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	21c0      	movs	r1, #192	@ 0xc0
 8001cb0:	482c      	ldr	r0, [pc, #176]	@ (8001d64 <MX_GPIO_Init+0x1a4>)
 8001cb2:	f002 ff8f 	bl	8004bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE15
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15
 8001cb6:	f248 033a 	movw	r3, #32826	@ 0x803a
 8001cba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4821      	ldr	r0, [pc, #132]	@ (8001d54 <MX_GPIO_Init+0x194>)
 8001cd0:	f002 fdec 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	481b      	ldr	r0, [pc, #108]	@ (8001d58 <MX_GPIO_Init+0x198>)
 8001cec:	f002 fdde 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001cf0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4814      	ldr	r0, [pc, #80]	@ (8001d5c <MX_GPIO_Init+0x19c>)
 8001d0a:	f002 fdcf 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_3
 8001d0e:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8001d12:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	480e      	ldr	r0, [pc, #56]	@ (8001d60 <MX_GPIO_Init+0x1a0>)
 8001d28:	f002 fdc0 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d2c:	23c0      	movs	r3, #192	@ 0xc0
 8001d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	4808      	ldr	r0, [pc, #32]	@ (8001d64 <MX_GPIO_Init+0x1a4>)
 8001d44:	f002 fdb2 	bl	80048ac <HAL_GPIO_Init>

}
 8001d48:	bf00      	nop
 8001d4a:	3730      	adds	r7, #48	@ 0x30
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40020800 	.word	0x40020800

08001d68 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <MX_I2C3_Init+0x54>)
 8001d70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <MX_I2C3_Init+0x58>)
 8001d76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d8a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001da6:	f002 ff2f 	bl	8004c08 <HAL_I2C_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001db0:	f000 fa92 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000023c 	.word	0x2000023c
 8001dbc:	40005c00 	.word	0x40005c00
 8001dc0:	000186a0 	.word	0x000186a0

08001dc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a29      	ldr	r2, [pc, #164]	@ (8001e88 <HAL_I2C_MspInit+0xc4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d14b      	bne.n	8001e7e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a27      	ldr	r2, [pc, #156]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a20      	ldr	r2, [pc, #128]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e24:	2312      	movs	r3, #18
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e30:	2304      	movs	r3, #4
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4815      	ldr	r0, [pc, #84]	@ (8001e90 <HAL_I2C_MspInit+0xcc>)
 8001e3c:	f002 fd36 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e46:	2312      	movs	r3, #18
 8001e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e52:	2304      	movs	r3, #4
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <HAL_I2C_MspInit+0xd0>)
 8001e5e:	f002 fd25 	bl	80048ac <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	4a08      	ldr	r2, [pc, #32]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001e6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <HAL_I2C_MspInit+0xc8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	@ 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40005c00 	.word	0x40005c00
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020000 	.word	0x40020000

08001e98 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0a0      	sub	sp, #128	@ 0x80
 8001e9c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e9e:	f001 f869 	bl	8002f74 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ea2:	f000 f9ad 	bl	8002200 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ea6:	f7ff fe8b 	bl	8001bc0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001eaa:	f7ff fd8f 	bl	80019cc <MX_DMA_Init>
	MX_ADC1_Init();
 8001eae:	f7ff f9b3 	bl	8001218 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001eb2:	f7ff fa41 	bl	8001338 <MX_ADC2_Init>
	MX_CAN1_Init();
 8001eb6:	f7ff fcf1 	bl	800189c <MX_CAN1_Init>
	MX_FMPI2C1_Init();
 8001eba:	f7ff fded 	bl	8001a98 <MX_FMPI2C1_Init>
	MX_I2C3_Init();
 8001ebe:	f7ff ff53 	bl	8001d68 <MX_I2C3_Init>
	MX_QUADSPI_Init();
 8001ec2:	f000 fa0f 	bl	80022e4 <MX_QUADSPI_Init>
	MX_SPI1_Init();
 8001ec6:	f000 fb4b 	bl	8002560 <MX_SPI1_Init>
	MX_SPI2_Init();
 8001eca:	f000 fb7f 	bl	80025cc <MX_SPI2_Init>
	MX_TIM4_Init();
 8001ece:	f000 fecb 	bl	8002c68 <MX_TIM4_Init>
	MX_SPI4_Init();
 8001ed2:	f000 fbb1 	bl	8002638 <MX_SPI4_Init>
	MX_TIM3_Init();
 8001ed6:	f000 fe4b 	bl	8002b70 <MX_TIM3_Init>
	MX_ADC3_Init();
 8001eda:	f7ff fa9d 	bl	8001418 <MX_ADC3_Init>
	MX_SAI2_Init();
 8001ede:	f000 fab7 	bl	8002450 <MX_SAI2_Init>
//
	int8_t flag;

	struct ad7124_dev ad7124_device;

	flag = ad7124_init(&ad7124_device, &hspi2, GPIOD, GPIO_PIN_10);
 8001ee2:	4638      	mov	r0, r7
 8001ee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ee8:	4ac0      	ldr	r2, [pc, #768]	@ (80021ec <main+0x354>)
 8001eea:	49c1      	ldr	r1, [pc, #772]	@ (80021f0 <main+0x358>)
 8001eec:	f7ff f83a 	bl	8000f64 <ad7124_init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

	if (flag != 0)
 8001ef6:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <main+0x6c>
		return flag;
 8001efe:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 8001f02:	e16f      	b.n	80021e4 <main+0x34c>
//
//	HAL_Delay(100);
//
	ad7124_noCheckReadRegister(&ad7124_device, &ad7124_device.regs[0x06]);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe faf0 	bl	80004f4 <ad7124_noCheckReadRegister>

		//ad7124reading();
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		value[0] = ad7124_adcRead(&ad7124_device, 0);
 8001f14:	463b      	mov	r3, r7
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe ff36 	bl	8000d8a <ad7124_adcRead>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4ab4      	ldr	r2, [pc, #720]	@ (80021f4 <main+0x35c>)
 8001f22:	6013      	str	r3, [r2, #0]
		value[1] = ad7124_adcRead(&ad7124_device, 1);
 8001f24:	463b      	mov	r3, r7
 8001f26:	2101      	movs	r1, #1
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe ff2e 	bl	8000d8a <ad7124_adcRead>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4ab0      	ldr	r2, [pc, #704]	@ (80021f4 <main+0x35c>)
 8001f32:	6053      	str	r3, [r2, #4]
		value[2] = ad7124_adcRead(&ad7124_device, 2);
 8001f34:	463b      	mov	r3, r7
 8001f36:	2102      	movs	r1, #2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe ff26 	bl	8000d8a <ad7124_adcRead>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4aac      	ldr	r2, [pc, #688]	@ (80021f4 <main+0x35c>)
 8001f42:	6093      	str	r3, [r2, #8]
		value[3] = ad7124_adcRead(&ad7124_device, 3);
 8001f44:	463b      	mov	r3, r7
 8001f46:	2103      	movs	r1, #3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe ff1e 	bl	8000d8a <ad7124_adcRead>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4aa8      	ldr	r2, [pc, #672]	@ (80021f4 <main+0x35c>)
 8001f52:	60d3      	str	r3, [r2, #12]
		value[4] = ad7124_adcRead(&ad7124_device, 4);
 8001f54:	463b      	mov	r3, r7
 8001f56:	2104      	movs	r1, #4
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe ff16 	bl	8000d8a <ad7124_adcRead>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4aa4      	ldr	r2, [pc, #656]	@ (80021f4 <main+0x35c>)
 8001f62:	6113      	str	r3, [r2, #16]
		value[5] = ad7124_adcRead(&ad7124_device, 5);
 8001f64:	463b      	mov	r3, r7
 8001f66:	2105      	movs	r1, #5
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe ff0e 	bl	8000d8a <ad7124_adcRead>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4aa0      	ldr	r2, [pc, #640]	@ (80021f4 <main+0x35c>)
 8001f72:	6153      	str	r3, [r2, #20]
		value[6] = ad7124_adcRead(&ad7124_device, 6);
 8001f74:	463b      	mov	r3, r7
 8001f76:	2106      	movs	r1, #6
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe ff06 	bl	8000d8a <ad7124_adcRead>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a9c      	ldr	r2, [pc, #624]	@ (80021f4 <main+0x35c>)
 8001f82:	6193      	str	r3, [r2, #24]
		value[7] = ad7124_adcRead(&ad7124_device, 7);
 8001f84:	463b      	mov	r3, r7
 8001f86:	2107      	movs	r1, #7
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fefe 	bl	8000d8a <ad7124_adcRead>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a98      	ldr	r2, [pc, #608]	@ (80021f4 <main+0x35c>)
 8001f92:	61d3      	str	r3, [r2, #28]
		value[8] = ad7124_adcRead(&ad7124_device, 8);
 8001f94:	463b      	mov	r3, r7
 8001f96:	2108      	movs	r1, #8
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fef6 	bl	8000d8a <ad7124_adcRead>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a94      	ldr	r2, [pc, #592]	@ (80021f4 <main+0x35c>)
 8001fa2:	6213      	str	r3, [r2, #32]
		value[9] = ad7124_adcRead(&ad7124_device, 9);
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2109      	movs	r1, #9
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe feee 	bl	8000d8a <ad7124_adcRead>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a90      	ldr	r2, [pc, #576]	@ (80021f4 <main+0x35c>)
 8001fb2:	6253      	str	r3, [r2, #36]	@ 0x24
		value[10] = ad7124_adcRead(&ad7124_device, 10);
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	210a      	movs	r1, #10
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fee6 	bl	8000d8a <ad7124_adcRead>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a8c      	ldr	r2, [pc, #560]	@ (80021f4 <main+0x35c>)
 8001fc2:	6293      	str	r3, [r2, #40]	@ 0x28
		value[11] = ad7124_adcRead(&ad7124_device, 11);
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	210b      	movs	r1, #11
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fede 	bl	8000d8a <ad7124_adcRead>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a88      	ldr	r2, [pc, #544]	@ (80021f4 <main+0x35c>)
 8001fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
		value[12] = ad7124_adcRead(&ad7124_device, 12);
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	210c      	movs	r1, #12
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fed6 	bl	8000d8a <ad7124_adcRead>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4a84      	ldr	r2, [pc, #528]	@ (80021f4 <main+0x35c>)
 8001fe2:	6313      	str	r3, [r2, #48]	@ 0x30
		value[13] = ad7124_adcRead(&ad7124_device, 13);
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	210d      	movs	r1, #13
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fece 	bl	8000d8a <ad7124_adcRead>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a80      	ldr	r2, [pc, #512]	@ (80021f4 <main+0x35c>)
 8001ff2:	6353      	str	r3, [r2, #52]	@ 0x34
		value[14] = ad7124_adcRead(&ad7124_device, 14);
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	210e      	movs	r1, #14
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fec6 	bl	8000d8a <ad7124_adcRead>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4a7c      	ldr	r2, [pc, #496]	@ (80021f4 <main+0x35c>)
 8002002:	6393      	str	r3, [r2, #56]	@ 0x38
		value[15] = ad7124_adcRead(&ad7124_device, 15);
 8002004:	463b      	mov	r3, r7
 8002006:	210f      	movs	r1, #15
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe febe 	bl	8000d8a <ad7124_adcRead>
 800200e:	4603      	mov	r3, r0
 8002010:	4a78      	ldr	r2, [pc, #480]	@ (80021f4 <main+0x35c>)
 8002012:	63d3      	str	r3, [r2, #60]	@ 0x3c

		HAL_Delay(50);
 8002014:	2032      	movs	r0, #50	@ 0x32
 8002016:	f001 f81f 	bl	8003058 <HAL_Delay>
		voltage[0] = ad7124_toVoltage(value[0], 1, 3.3, 1);
 800201a:	4b76      	ldr	r3, [pc, #472]	@ (80021f4 <main+0x35c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 80021f8 <main+0x360>
 8002024:	2101      	movs	r1, #1
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe ff2c 	bl	8000e84 <ad7124_toVoltage>
 800202c:	eef0 7a40 	vmov.f32	s15, s0
 8002030:	4b72      	ldr	r3, [pc, #456]	@ (80021fc <main+0x364>)
 8002032:	edc3 7a00 	vstr	s15, [r3]
		voltage[1] = ad7124_toVoltage(value[1], 1, 3.3, 1);
 8002036:	4b6f      	ldr	r3, [pc, #444]	@ (80021f4 <main+0x35c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 80021f8 <main+0x360>
 8002040:	2101      	movs	r1, #1
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe ff1e 	bl	8000e84 <ad7124_toVoltage>
 8002048:	eef0 7a40 	vmov.f32	s15, s0
 800204c:	4b6b      	ldr	r3, [pc, #428]	@ (80021fc <main+0x364>)
 800204e:	edc3 7a01 	vstr	s15, [r3, #4]
		voltage[2] = ad7124_toVoltage(value[2], 1, 3.3, 1);
 8002052:	4b68      	ldr	r3, [pc, #416]	@ (80021f4 <main+0x35c>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2201      	movs	r2, #1
 8002058:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 80021f8 <main+0x360>
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe ff10 	bl	8000e84 <ad7124_toVoltage>
 8002064:	eef0 7a40 	vmov.f32	s15, s0
 8002068:	4b64      	ldr	r3, [pc, #400]	@ (80021fc <main+0x364>)
 800206a:	edc3 7a02 	vstr	s15, [r3, #8]
		voltage[3] = ad7124_toVoltage(value[3], 1, 3.3, 1);
 800206e:	4b61      	ldr	r3, [pc, #388]	@ (80021f4 <main+0x35c>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 80021f8 <main+0x360>
 8002078:	2101      	movs	r1, #1
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe ff02 	bl	8000e84 <ad7124_toVoltage>
 8002080:	eef0 7a40 	vmov.f32	s15, s0
 8002084:	4b5d      	ldr	r3, [pc, #372]	@ (80021fc <main+0x364>)
 8002086:	edc3 7a03 	vstr	s15, [r3, #12]
		voltage[4] = ad7124_toVoltage(value[4], 1, 3.3, 1);
 800208a:	4b5a      	ldr	r3, [pc, #360]	@ (80021f4 <main+0x35c>)
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2201      	movs	r2, #1
 8002090:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 80021f8 <main+0x360>
 8002094:	2101      	movs	r1, #1
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fef4 	bl	8000e84 <ad7124_toVoltage>
 800209c:	eef0 7a40 	vmov.f32	s15, s0
 80020a0:	4b56      	ldr	r3, [pc, #344]	@ (80021fc <main+0x364>)
 80020a2:	edc3 7a04 	vstr	s15, [r3, #16]
		voltage[5] = ad7124_toVoltage(value[5], 1, 3.3, 1);
 80020a6:	4b53      	ldr	r3, [pc, #332]	@ (80021f4 <main+0x35c>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2201      	movs	r2, #1
 80020ac:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80021f8 <main+0x360>
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fee6 	bl	8000e84 <ad7124_toVoltage>
 80020b8:	eef0 7a40 	vmov.f32	s15, s0
 80020bc:	4b4f      	ldr	r3, [pc, #316]	@ (80021fc <main+0x364>)
 80020be:	edc3 7a05 	vstr	s15, [r3, #20]
		voltage[6] = ad7124_toVoltage(value[6], 1, 3.3, 1);
 80020c2:	4b4c      	ldr	r3, [pc, #304]	@ (80021f4 <main+0x35c>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2201      	movs	r2, #1
 80020c8:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 80021f8 <main+0x360>
 80020cc:	2101      	movs	r1, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fed8 	bl	8000e84 <ad7124_toVoltage>
 80020d4:	eef0 7a40 	vmov.f32	s15, s0
 80020d8:	4b48      	ldr	r3, [pc, #288]	@ (80021fc <main+0x364>)
 80020da:	edc3 7a06 	vstr	s15, [r3, #24]
		voltage[7] = ad7124_toVoltage(value[7], 1, 3.3, 1);
 80020de:	4b45      	ldr	r3, [pc, #276]	@ (80021f4 <main+0x35c>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2201      	movs	r2, #1
 80020e4:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 80021f8 <main+0x360>
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe feca 	bl	8000e84 <ad7124_toVoltage>
 80020f0:	eef0 7a40 	vmov.f32	s15, s0
 80020f4:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <main+0x364>)
 80020f6:	edc3 7a07 	vstr	s15, [r3, #28]
		voltage[8] = ad7124_toVoltage(value[8], 1, 3.3, 1);
 80020fa:	4b3e      	ldr	r3, [pc, #248]	@ (80021f4 <main+0x35c>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	2201      	movs	r2, #1
 8002100:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 80021f8 <main+0x360>
 8002104:	2101      	movs	r1, #1
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe febc 	bl	8000e84 <ad7124_toVoltage>
 800210c:	eef0 7a40 	vmov.f32	s15, s0
 8002110:	4b3a      	ldr	r3, [pc, #232]	@ (80021fc <main+0x364>)
 8002112:	edc3 7a08 	vstr	s15, [r3, #32]
		voltage[9] = ad7124_toVoltage(value[9], 1, 3.3, 1);
 8002116:	4b37      	ldr	r3, [pc, #220]	@ (80021f4 <main+0x35c>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	2201      	movs	r2, #1
 800211c:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80021f8 <main+0x360>
 8002120:	2101      	movs	r1, #1
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe feae 	bl	8000e84 <ad7124_toVoltage>
 8002128:	eef0 7a40 	vmov.f32	s15, s0
 800212c:	4b33      	ldr	r3, [pc, #204]	@ (80021fc <main+0x364>)
 800212e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		voltage[10] = ad7124_toVoltage(value[10], 1, 3.3, 1);
 8002132:	4b30      	ldr	r3, [pc, #192]	@ (80021f4 <main+0x35c>)
 8002134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002136:	2201      	movs	r2, #1
 8002138:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80021f8 <main+0x360>
 800213c:	2101      	movs	r1, #1
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fea0 	bl	8000e84 <ad7124_toVoltage>
 8002144:	eef0 7a40 	vmov.f32	s15, s0
 8002148:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <main+0x364>)
 800214a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		voltage[11] = ad7124_toVoltage(value[11], 1, 3.3, 1);
 800214e:	4b29      	ldr	r3, [pc, #164]	@ (80021f4 <main+0x35c>)
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	2201      	movs	r2, #1
 8002154:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 80021f8 <main+0x360>
 8002158:	2101      	movs	r1, #1
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fe92 	bl	8000e84 <ad7124_toVoltage>
 8002160:	eef0 7a40 	vmov.f32	s15, s0
 8002164:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <main+0x364>)
 8002166:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		voltage[12] = ad7124_toVoltage(value[12], 1, 3.3, 1);
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <main+0x35c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	2201      	movs	r2, #1
 8002170:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80021f8 <main+0x360>
 8002174:	2101      	movs	r1, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fe84 	bl	8000e84 <ad7124_toVoltage>
 800217c:	eef0 7a40 	vmov.f32	s15, s0
 8002180:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <main+0x364>)
 8002182:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		voltage[13] = ad7124_toVoltage(value[13], 1, 3.3, 1);
 8002186:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <main+0x35c>)
 8002188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218a:	2201      	movs	r2, #1
 800218c:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 80021f8 <main+0x360>
 8002190:	2101      	movs	r1, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fe76 	bl	8000e84 <ad7124_toVoltage>
 8002198:	eef0 7a40 	vmov.f32	s15, s0
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <main+0x364>)
 800219e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		voltage[14] = ad7124_toVoltage(value[14], 1, 3.3, 1);
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <main+0x35c>)
 80021a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a6:	2201      	movs	r2, #1
 80021a8:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80021f8 <main+0x360>
 80021ac:	2101      	movs	r1, #1
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fe68 	bl	8000e84 <ad7124_toVoltage>
 80021b4:	eef0 7a40 	vmov.f32	s15, s0
 80021b8:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <main+0x364>)
 80021ba:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		voltage[15] = ad7124_toVoltage(value[15], 1, 3.3, 1);
 80021be:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <main+0x35c>)
 80021c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c2:	2201      	movs	r2, #1
 80021c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80021f8 <main+0x360>
 80021c8:	2101      	movs	r1, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fe5a 	bl	8000e84 <ad7124_toVoltage>
 80021d0:	eef0 7a40 	vmov.f32	s15, s0
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <main+0x364>)
 80021d6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
		HAL_Delay(50);
 80021da:	2032      	movs	r0, #50	@ 0x32
 80021dc:	f000 ff3c 	bl	8003058 <HAL_Delay>
		value[0] = ad7124_adcRead(&ad7124_device, 0);
 80021e0:	bf00      	nop
 80021e2:	e697      	b.n	8001f14 <main+0x7c>
//			HAL_Delay(500);
//			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
//		}
	}
	/* USER CODE END 3 */
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3780      	adds	r7, #128	@ 0x80
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	20000440 	.word	0x20000440
 80021f4:	20000290 	.word	0x20000290
 80021f8:	40533333 	.word	0x40533333
 80021fc:	200002d0 	.word	0x200002d0

08002200 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b094      	sub	sp, #80	@ 0x50
 8002204:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	2234      	movs	r2, #52	@ 0x34
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f005 fe30 	bl	8007e74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <SystemClock_Config+0xd0>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	4a28      	ldr	r2, [pc, #160]	@ (80022d0 <SystemClock_Config+0xd0>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	@ 0x40
 8002234:	4b26      	ldr	r3, [pc, #152]	@ (80022d0 <SystemClock_Config+0xd0>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002240:	2300      	movs	r3, #0
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <SystemClock_Config+0xd4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a22      	ldr	r2, [pc, #136]	@ (80022d4 <SystemClock_Config+0xd4>)
 800224a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <SystemClock_Config+0xd4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800225c:	2301      	movs	r3, #1
 800225e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002260:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002264:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002266:	2302      	movs	r3, #2
 8002268:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800226a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800226e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002270:	2310      	movs	r3, #16
 8002272:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 224;
 8002274:	23e0      	movs	r3, #224	@ 0xe0
 8002276:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002278:	2302      	movs	r3, #2
 800227a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800227c:	2307      	movs	r3, #7
 800227e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002280:	2302      	movs	r3, #2
 8002282:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fee7 	bl	800605c <HAL_RCC_OscConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0x98>
		Error_Handler();
 8002294:	f000 f820 	bl	80022d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002298:	230f      	movs	r3, #15
 800229a:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800229c:	2303      	movs	r3, #3
 800229e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022a8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ae:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	2105      	movs	r1, #5
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 feac 	bl	8005014 <HAL_RCC_ClockConfig>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0xc6>
		Error_Handler();
 80022c2:	f000 f809 	bl	80022d8 <Error_Handler>
	}
}
 80022c6:	bf00      	nop
 80022c8:	3750      	adds	r7, #80	@ 0x50
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40007000 	.word	0x40007000

080022d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022dc:	b672      	cpsid	i
}
 80022de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <Error_Handler+0x8>

080022e4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 80022ea:	4a13      	ldr	r2, [pc, #76]	@ (8002338 <MX_QUADSPI_Init+0x54>)
 80022ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 80022f0:	22ff      	movs	r2, #255	@ 0xff
 80022f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 8002302:	2201      	movs	r2, #1
 8002304:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 8002308:	2200      	movs	r2, #0
 800230a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_QUADSPI_Init+0x50>)
 8002320:	f002 fdb6 	bl	8004e90 <HAL_QSPI_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800232a:	f7ff ffd5 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000310 	.word	0x20000310
 8002338:	a0001000 	.word	0xa0001000

0800233c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a38      	ldr	r2, [pc, #224]	@ (800243c <HAL_QSPI_MspInit+0x100>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d169      	bne.n	8002432 <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	4b37      	ldr	r3, [pc, #220]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 8002364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002366:	4a36      	ldr	r2, [pc, #216]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6393      	str	r3, [r2, #56]	@ 0x38
 800236e:	4b34      	ldr	r3, [pc, #208]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 8002370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	4b30      	ldr	r3, [pc, #192]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a2f      	ldr	r2, [pc, #188]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a28      	ldr	r2, [pc, #160]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 80023a0:	f043 0310 	orr.w	r3, r3, #16
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b22      	ldr	r3, [pc, #136]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002440 <HAL_QSPI_MspInit+0x104>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ce:	2304      	movs	r3, #4
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80023de:	2309      	movs	r3, #9
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	4816      	ldr	r0, [pc, #88]	@ (8002444 <HAL_QSPI_MspInit+0x108>)
 80023ea:	f002 fa5f 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80023ee:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002400:	230a      	movs	r3, #10
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	480f      	ldr	r0, [pc, #60]	@ (8002448 <HAL_QSPI_MspInit+0x10c>)
 800240c:	f002 fa4e 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002410:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002422:	2309      	movs	r3, #9
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	4807      	ldr	r0, [pc, #28]	@ (800244c <HAL_QSPI_MspInit+0x110>)
 800242e:	f002 fa3d 	bl	80048ac <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002432:	bf00      	nop
 8002434:	3730      	adds	r7, #48	@ 0x30
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	a0001000 	.word	0xa0001000
 8002440:	40023800 	.word	0x40023800
 8002444:	40020400 	.word	0x40020400
 8002448:	40021000 	.word	0x40021000
 800244c:	40020800 	.word	0x40020800

08002450 <MX_SAI2_Init>:

SAI_HandleTypeDef hsai_BlockA2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <MX_SAI2_Init+0x50>)
 8002456:	4a13      	ldr	r2, [pc, #76]	@ (80024a4 <MX_SAI2_Init+0x54>)
 8002458:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <MX_SAI2_Init+0x50>)
 800245c:	2204      	movs	r2, #4
 800245e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <MX_SAI2_Init+0x50>)
 8002462:	2200      	movs	r2, #0
 8002464:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <MX_SAI2_Init+0x50>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <MX_SAI2_Init+0x50>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002472:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <MX_SAI2_Init+0x50>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002478:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <MX_SAI2_Init+0x50>)
 800247a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800247e:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <MX_SAI2_Init+0x50>)
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <MX_SAI2_Init+0x50>)
 8002488:	2200      	movs	r2, #0
 800248a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800248c:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <MX_SAI2_Init+0x50>)
 800248e:	f004 f883 	bl	8006598 <HAL_SAI_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 8002498:	f7ff ff1e 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000035c 	.word	0x2000035c
 80024a4:	40015c04 	.word	0x40015c04

080024a8 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0a0      	sub	sp, #128	@ 0x80
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	225c      	movs	r2, #92	@ 0x5c
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f005 fcdb 	bl	8007e74 <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a23      	ldr	r2, [pc, #140]	@ (8002550 <HAL_SAI_MspInit+0xa8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d13f      	bne.n	8002548 <HAL_SAI_MspInit+0xa0>
    {
    /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80024c8:	2308      	movs	r3, #8
 80024ca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 80024cc:	2310      	movs	r3, #16
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80024d0:	23c0      	movs	r3, #192	@ 0xc0
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80024d4:	2302      	movs	r3, #2
 80024d6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80024d8:	2302      	movs	r3, #2
 80024da:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80024dc:	2301      	movs	r3, #1
 80024de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80024e0:	2300      	movs	r3, #0
 80024e2:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fe99 	bl	8005220 <HAL_RCCEx_PeriphCLKConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_SAI_MspInit+0x50>
    {
      Error_Handler();
 80024f4:	f7ff fef0 	bl	80022d8 <Error_Handler>
    }

    if (SAI2_client == 0)
 80024f8:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <HAL_SAI_MspInit+0xac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_SAI_MspInit+0x74>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <HAL_SAI_MspInit+0xb0>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <HAL_SAI_MspInit+0xb0>)
 800250a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800250e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <HAL_SAI_MspInit+0xb0>)
 8002512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 800251c:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <HAL_SAI_MspInit+0xac>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	4a0c      	ldr	r2, [pc, #48]	@ (8002554 <HAL_SAI_MspInit+0xac>)
 8002524:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800252a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002538:	230a      	movs	r3, #10
 800253a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800253c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002540:	4619      	mov	r1, r3
 8002542:	4806      	ldr	r0, [pc, #24]	@ (800255c <HAL_SAI_MspInit+0xb4>)
 8002544:	f002 f9b2 	bl	80048ac <HAL_GPIO_Init>

    }
}
 8002548:	bf00      	nop
 800254a:	3780      	adds	r7, #128	@ 0x80
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40015c04 	.word	0x40015c04
 8002554:	200003e4 	.word	0x200003e4
 8002558:	40023800 	.word	0x40023800
 800255c:	40020c00 	.word	0x40020c00

08002560 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002564:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <MX_SPI1_Init+0x64>)
 8002566:	4a18      	ldr	r2, [pc, #96]	@ (80025c8 <MX_SPI1_Init+0x68>)
 8002568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <MX_SPI1_Init+0x64>)
 800256c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002572:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <MX_SPI1_Init+0x64>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002578:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <MX_SPI1_Init+0x64>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <MX_SPI1_Init+0x64>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002584:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <MX_SPI1_Init+0x64>)
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800258a:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <MX_SPI1_Init+0x64>)
 800258c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002590:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <MX_SPI1_Init+0x64>)
 8002594:	2220      	movs	r2, #32
 8002596:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002598:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <MX_SPI1_Init+0x64>)
 800259a:	2200      	movs	r2, #0
 800259c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800259e:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <MX_SPI1_Init+0x64>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a4:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <MX_SPI1_Init+0x64>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <MX_SPI1_Init+0x64>)
 80025ac:	220a      	movs	r2, #10
 80025ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025b0:	4804      	ldr	r0, [pc, #16]	@ (80025c4 <MX_SPI1_Init+0x64>)
 80025b2:	f004 f9b7 	bl	8006924 <HAL_SPI_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025bc:	f7ff fe8c 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200003e8 	.word	0x200003e8
 80025c8:	40013000 	.word	0x40013000

080025cc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80025d0:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <MX_SPI2_Init+0x64>)
 80025d2:	4a18      	ldr	r2, [pc, #96]	@ (8002634 <MX_SPI2_Init+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025d6:	4b16      	ldr	r3, [pc, #88]	@ (8002630 <MX_SPI2_Init+0x64>)
 80025d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025de:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <MX_SPI2_Init+0x64>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e4:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <MX_SPI2_Init+0x64>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <MX_SPI2_Init+0x64>)
 80025ec:	2202      	movs	r2, #2
 80025ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <MX_SPI2_Init+0x64>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <MX_SPI2_Init+0x64>)
 80025f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80025fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <MX_SPI2_Init+0x64>)
 8002600:	2220      	movs	r2, #32
 8002602:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002604:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <MX_SPI2_Init+0x64>)
 8002606:	2200      	movs	r2, #0
 8002608:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800260a:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <MX_SPI2_Init+0x64>)
 800260c:	2200      	movs	r2, #0
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002610:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <MX_SPI2_Init+0x64>)
 8002612:	2200      	movs	r2, #0
 8002614:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002616:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <MX_SPI2_Init+0x64>)
 8002618:	220a      	movs	r2, #10
 800261a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800261c:	4804      	ldr	r0, [pc, #16]	@ (8002630 <MX_SPI2_Init+0x64>)
 800261e:	f004 f981 	bl	8006924 <HAL_SPI_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002628:	f7ff fe56 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000440 	.word	0x20000440
 8002634:	40003800 	.word	0x40003800

08002638 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800263c:	4b17      	ldr	r3, [pc, #92]	@ (800269c <MX_SPI4_Init+0x64>)
 800263e:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <MX_SPI4_Init+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <MX_SPI4_Init+0x64>)
 8002644:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002648:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <MX_SPI4_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <MX_SPI4_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_SPI4_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <MX_SPI4_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_SPI4_Init+0x64>)
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800266a:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <MX_SPI4_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002670:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <MX_SPI4_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <MX_SPI4_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	@ (800269c <MX_SPI4_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MX_SPI4_Init+0x64>)
 8002684:	220a      	movs	r2, #10
 8002686:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	@ (800269c <MX_SPI4_Init+0x64>)
 800268a:	f004 f94b 	bl	8006924 <HAL_SPI_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002694:	f7ff fe20 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000498 	.word	0x20000498
 80026a0:	40013400 	.word	0x40013400

080026a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08e      	sub	sp, #56	@ 0x38
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a95      	ldr	r2, [pc, #596]	@ (8002918 <HAL_SPI_MspInit+0x274>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	f040 8089 	bne.w	80027da <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
 80026cc:	4b93      	ldr	r3, [pc, #588]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80026ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d0:	4a92      	ldr	r2, [pc, #584]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80026d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d8:	4b90      	ldr	r3, [pc, #576]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80026da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026e0:	623b      	str	r3, [r7, #32]
 80026e2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	4b8c      	ldr	r3, [pc, #560]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	4a8b      	ldr	r2, [pc, #556]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80026ee:	f043 0302 	orr.w	r3, r3, #2
 80026f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f4:	4b89      	ldr	r3, [pc, #548]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002700:	2338      	movs	r3, #56	@ 0x38
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002710:	2305      	movs	r3, #5
 8002712:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002718:	4619      	mov	r1, r3
 800271a:	4881      	ldr	r0, [pc, #516]	@ (8002920 <HAL_SPI_MspInit+0x27c>)
 800271c:	f002 f8c6 	bl	80048ac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002720:	4b80      	ldr	r3, [pc, #512]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002722:	4a81      	ldr	r2, [pc, #516]	@ (8002928 <HAL_SPI_MspInit+0x284>)
 8002724:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002726:	4b7f      	ldr	r3, [pc, #508]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002728:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800272c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272e:	4b7d      	ldr	r3, [pc, #500]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002734:	4b7b      	ldr	r3, [pc, #492]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800273a:	4b7a      	ldr	r3, [pc, #488]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 800273c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002740:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002742:	4b78      	ldr	r3, [pc, #480]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002744:	2200      	movs	r2, #0
 8002746:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002748:	4b76      	ldr	r3, [pc, #472]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800274e:	4b75      	ldr	r3, [pc, #468]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002754:	4b73      	ldr	r3, [pc, #460]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800275a:	4b72      	ldr	r3, [pc, #456]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 800275c:	2200      	movs	r2, #0
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002760:	4870      	ldr	r0, [pc, #448]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002762:	f001 fcd3 	bl	800410c <HAL_DMA_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800276c:	f7ff fdb4 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a6c      	ldr	r2, [pc, #432]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002774:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002776:	4a6b      	ldr	r2, [pc, #428]	@ (8002924 <HAL_SPI_MspInit+0x280>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 800277c:	4b6b      	ldr	r3, [pc, #428]	@ (800292c <HAL_SPI_MspInit+0x288>)
 800277e:	4a6c      	ldr	r2, [pc, #432]	@ (8002930 <HAL_SPI_MspInit+0x28c>)
 8002780:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002782:	4b6a      	ldr	r3, [pc, #424]	@ (800292c <HAL_SPI_MspInit+0x288>)
 8002784:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002788:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800278a:	4b68      	ldr	r3, [pc, #416]	@ (800292c <HAL_SPI_MspInit+0x288>)
 800278c:	2240      	movs	r2, #64	@ 0x40
 800278e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002790:	4b66      	ldr	r3, [pc, #408]	@ (800292c <HAL_SPI_MspInit+0x288>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002796:	4b65      	ldr	r3, [pc, #404]	@ (800292c <HAL_SPI_MspInit+0x288>)
 8002798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800279c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800279e:	4b63      	ldr	r3, [pc, #396]	@ (800292c <HAL_SPI_MspInit+0x288>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a4:	4b61      	ldr	r3, [pc, #388]	@ (800292c <HAL_SPI_MspInit+0x288>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80027aa:	4b60      	ldr	r3, [pc, #384]	@ (800292c <HAL_SPI_MspInit+0x288>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027b0:	4b5e      	ldr	r3, [pc, #376]	@ (800292c <HAL_SPI_MspInit+0x288>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b6:	4b5d      	ldr	r3, [pc, #372]	@ (800292c <HAL_SPI_MspInit+0x288>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80027bc:	485b      	ldr	r0, [pc, #364]	@ (800292c <HAL_SPI_MspInit+0x288>)
 80027be:	f001 fca5 	bl	800410c <HAL_DMA_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80027c8:	f7ff fd86 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a57      	ldr	r2, [pc, #348]	@ (800292c <HAL_SPI_MspInit+0x288>)
 80027d0:	649a      	str	r2, [r3, #72]	@ 0x48
 80027d2:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_SPI_MspInit+0x288>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80027d8:	e0e8      	b.n	80029ac <HAL_SPI_MspInit+0x308>
  else if(spiHandle->Instance==SPI2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a55      	ldr	r2, [pc, #340]	@ (8002934 <HAL_SPI_MspInit+0x290>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	f040 80b1 	bne.w	8002948 <HAL_SPI_MspInit+0x2a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	4b4c      	ldr	r3, [pc, #304]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	4a4b      	ldr	r2, [pc, #300]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f6:	4b49      	ldr	r3, [pc, #292]	@ (800291c <HAL_SPI_MspInit+0x278>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4b45      	ldr	r3, [pc, #276]	@ (800291c <HAL_SPI_MspInit+0x278>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a44      	ldr	r2, [pc, #272]	@ (800291c <HAL_SPI_MspInit+0x278>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b42      	ldr	r3, [pc, #264]	@ (800291c <HAL_SPI_MspInit+0x278>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800281e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002830:	2305      	movs	r3, #5
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002838:	4619      	mov	r1, r3
 800283a:	4839      	ldr	r0, [pc, #228]	@ (8002920 <HAL_SPI_MspInit+0x27c>)
 800283c:	f002 f836 	bl	80048ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002840:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284a:	2301      	movs	r3, #1
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284e:	2303      	movs	r3, #3
 8002850:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002852:	2305      	movs	r3, #5
 8002854:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800285a:	4619      	mov	r1, r3
 800285c:	4830      	ldr	r0, [pc, #192]	@ (8002920 <HAL_SPI_MspInit+0x27c>)
 800285e:	f002 f825 	bl	80048ac <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002862:	4b35      	ldr	r3, [pc, #212]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 8002864:	4a35      	ldr	r2, [pc, #212]	@ (800293c <HAL_SPI_MspInit+0x298>)
 8002866:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002868:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 800286a:	2200      	movs	r2, #0
 800286c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800286e:	4b32      	ldr	r3, [pc, #200]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002874:	4b30      	ldr	r3, [pc, #192]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800287a:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 800287c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002880:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002882:	4b2d      	ldr	r3, [pc, #180]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 8002884:	2200      	movs	r2, #0
 8002886:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 800288a:	2200      	movs	r2, #0
 800288c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800288e:	4b2a      	ldr	r3, [pc, #168]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 8002890:	2200      	movs	r2, #0
 8002892:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002894:	4b28      	ldr	r3, [pc, #160]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289a:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80028a0:	4825      	ldr	r0, [pc, #148]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 80028a2:	f001 fc33 	bl	800410c <HAL_DMA_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_SPI_MspInit+0x20c>
      Error_Handler();
 80028ac:	f7ff fd14 	bl	80022d8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a21      	ldr	r2, [pc, #132]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 80028b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80028b6:	4a20      	ldr	r2, [pc, #128]	@ (8002938 <HAL_SPI_MspInit+0x294>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80028bc:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028be:	4a21      	ldr	r2, [pc, #132]	@ (8002944 <HAL_SPI_MspInit+0x2a0>)
 80028c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028da:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e2:	4b17      	ldr	r3, [pc, #92]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80028fa:	4811      	ldr	r0, [pc, #68]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 80028fc:	f001 fc06 	bl	800410c <HAL_DMA_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_SPI_MspInit+0x266>
      Error_Handler();
 8002906:	f7ff fce7 	bl	80022d8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0c      	ldr	r2, [pc, #48]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 800290e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002910:	4a0b      	ldr	r2, [pc, #44]	@ (8002940 <HAL_SPI_MspInit+0x29c>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002916:	e049      	b.n	80029ac <HAL_SPI_MspInit+0x308>
 8002918:	40013000 	.word	0x40013000
 800291c:	40023800 	.word	0x40023800
 8002920:	40020400 	.word	0x40020400
 8002924:	200004f0 	.word	0x200004f0
 8002928:	40026440 	.word	0x40026440
 800292c:	20000550 	.word	0x20000550
 8002930:	40026488 	.word	0x40026488
 8002934:	40003800 	.word	0x40003800
 8002938:	200005b0 	.word	0x200005b0
 800293c:	40026058 	.word	0x40026058
 8002940:	20000610 	.word	0x20000610
 8002944:	40026070 	.word	0x40026070
  else if(spiHandle->Instance==SPI4)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <HAL_SPI_MspInit+0x310>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d12c      	bne.n	80029ac <HAL_SPI_MspInit+0x308>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <HAL_SPI_MspInit+0x314>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	4a17      	ldr	r2, [pc, #92]	@ (80029b8 <HAL_SPI_MspInit+0x314>)
 800295c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002960:	6453      	str	r3, [r2, #68]	@ 0x44
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_SPI_MspInit+0x314>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <HAL_SPI_MspInit+0x314>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	4a10      	ldr	r2, [pc, #64]	@ (80029b8 <HAL_SPI_MspInit+0x314>)
 8002978:	f043 0310 	orr.w	r3, r3, #16
 800297c:	6313      	str	r3, [r2, #48]	@ 0x30
 800297e:	4b0e      	ldr	r3, [pc, #56]	@ (80029b8 <HAL_SPI_MspInit+0x314>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 800298a:	f246 0304 	movw	r3, #24580	@ 0x6004
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002998:	2303      	movs	r3, #3
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800299c:	2305      	movs	r3, #5
 800299e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a4:	4619      	mov	r1, r3
 80029a6:	4805      	ldr	r0, [pc, #20]	@ (80029bc <HAL_SPI_MspInit+0x318>)
 80029a8:	f001 ff80 	bl	80048ac <HAL_GPIO_Init>
}
 80029ac:	bf00      	nop
 80029ae:	3738      	adds	r7, #56	@ 0x38
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40013400 	.word	0x40013400
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <HAL_MspInit+0x4c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	4a0f      	ldr	r2, [pc, #60]	@ (8002a0c <HAL_MspInit+0x4c>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <HAL_MspInit+0x4c>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_MspInit+0x4c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <HAL_MspInit+0x4c>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_MspInit+0x4c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a14:	bf00      	nop
 8002a16:	e7fd      	b.n	8002a14 <NMI_Handler+0x4>

08002a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <HardFault_Handler+0x4>

08002a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <MemManage_Handler+0x4>

08002a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <BusFault_Handler+0x4>

08002a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <UsageFault_Handler+0x4>

08002a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a66:	f000 fad7 	bl	8003018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002a74:	4802      	ldr	r0, [pc, #8]	@ (8002a80 <DMA1_Stream3_IRQHandler+0x10>)
 8002a76:	f001 fbf7 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200005b0 	.word	0x200005b0

08002a84 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002a88:	4802      	ldr	r0, [pc, #8]	@ (8002a94 <DMA1_Stream4_IRQHandler+0x10>)
 8002a8a:	f001 fbed 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000610 	.word	0x20000610

08002a98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002a9c:	4802      	ldr	r0, [pc, #8]	@ (8002aa8 <DMA1_Stream6_IRQHandler+0x10>)
 8002a9e:	f001 fbe3 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000700 	.word	0x20000700

08002aac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ab0:	4805      	ldr	r0, [pc, #20]	@ (8002ac8 <ADC_IRQHandler+0x1c>)
 8002ab2:	f000 fb38 	bl	8003126 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002ab6:	4805      	ldr	r0, [pc, #20]	@ (8002acc <ADC_IRQHandler+0x20>)
 8002ab8:	f000 fb35 	bl	8003126 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002abc:	4804      	ldr	r0, [pc, #16]	@ (8002ad0 <ADC_IRQHandler+0x24>)
 8002abe:	f000 fb32 	bl	8003126 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000028 	.word	0x20000028
 8002acc:	20000070 	.word	0x20000070
 8002ad0:	200000b8 	.word	0x200000b8

08002ad4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ad8:	4802      	ldr	r0, [pc, #8]	@ (8002ae4 <CAN1_RX0_IRQHandler+0x10>)
 8002ada:	f000 ffcc 	bl	8003a76 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200001c0 	.word	0x200001c0

08002ae8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002aec:	4802      	ldr	r0, [pc, #8]	@ (8002af8 <DMA1_Stream7_IRQHandler+0x10>)
 8002aee:	f001 fbbb 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000760 	.word	0x20000760

08002afc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b00:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <DMA2_Stream0_IRQHandler+0x10>)
 8002b02:	f001 fbb1 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000100 	.word	0x20000100

08002b10 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002b14:	4802      	ldr	r0, [pc, #8]	@ (8002b20 <DMA2_Stream1_IRQHandler+0x10>)
 8002b16:	f001 fba7 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000160 	.word	0x20000160

08002b24 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002b28:	4802      	ldr	r0, [pc, #8]	@ (8002b34 <DMA2_Stream2_IRQHandler+0x10>)
 8002b2a:	f001 fb9d 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200004f0 	.word	0x200004f0

08002b38 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b3c:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <DMA2_Stream5_IRQHandler+0x10>)
 8002b3e:	f001 fb93 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000550 	.word	0x20000550

08002b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b50:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <SystemInit+0x20>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b56:	4a05      	ldr	r2, [pc, #20]	@ (8002b6c <SystemInit+0x20>)
 8002b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim4_up;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08e      	sub	sp, #56	@ 0x38
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b84:	f107 0320 	add.w	r3, r7, #32
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
 8002b9c:	615a      	str	r2, [r3, #20]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002ba2:	4a30      	ldr	r2, [pc, #192]	@ (8002c64 <MX_TIM3_Init+0xf4>)
 8002ba4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1312;
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002ba8:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8002bac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b2c      	ldr	r3, [pc, #176]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002bb6:	22ff      	movs	r2, #255	@ 0xff
 8002bb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bba:	4b29      	ldr	r3, [pc, #164]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc0:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bc6:	4826      	ldr	r0, [pc, #152]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002bc8:	f004 fb04 	bl	80071d4 <HAL_TIM_Base_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002bd2:	f7ff fb81 	bl	80022d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002be0:	4619      	mov	r1, r3
 8002be2:	481f      	ldr	r0, [pc, #124]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002be4:	f004 fd0c 	bl	8007600 <HAL_TIM_ConfigClockSource>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002bee:	f7ff fb73 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002bf2:	481b      	ldr	r0, [pc, #108]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002bf4:	f004 fb3d 	bl	8007272 <HAL_TIM_OC_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002bfe:	f7ff fb6b 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c02:	2320      	movs	r3, #32
 8002c04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c0a:	f107 0320 	add.w	r3, r7, #32
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4813      	ldr	r0, [pc, #76]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002c12:	f005 f8b3 	bl	8007d7c <HAL_TIMEx_MasterConfigSynchronization>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002c1c:	f7ff fb5c 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	2200      	movs	r2, #0
 8002c34:	4619      	mov	r1, r3
 8002c36:	480a      	ldr	r0, [pc, #40]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002c38:	f004 fbc4 	bl	80073c4 <HAL_TIM_OC_ConfigChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002c42:	f7ff fb49 	bl	80022d8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8002c46:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <MX_TIM3_Init+0xf0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0208 	orr.w	r2, r2, #8
 8002c54:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	3738      	adds	r7, #56	@ 0x38
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000670 	.word	0x20000670
 8002c64:	40000400 	.word	0x40000400

08002c68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	@ 0x28
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6e:	f107 0320 	add.w	r3, r7, #32
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	611a      	str	r2, [r3, #16]
 8002c86:	615a      	str	r2, [r3, #20]
 8002c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c8a:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002c8c:	4a31      	ldr	r2, [pc, #196]	@ (8002d54 <MX_TIM4_Init+0xec>)
 8002c8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 466-1;
 8002c90:	4b2f      	ldr	r3, [pc, #188]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002c92:	f240 12d1 	movw	r2, #465	@ 0x1d1
 8002c96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c98:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600-1;
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002ca0:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002ca4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cac:	4b28      	ldr	r3, [pc, #160]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002cae:	2280      	movs	r2, #128	@ 0x80
 8002cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002cb2:	4827      	ldr	r0, [pc, #156]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002cb4:	f004 fb36 	bl	8007324 <HAL_TIM_PWM_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002cbe:	f7ff fb0b 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cca:	f107 0320 	add.w	r3, r7, #32
 8002cce:	4619      	mov	r1, r3
 8002cd0:	481f      	ldr	r0, [pc, #124]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002cd2:	f005 f853 	bl	8007d7c <HAL_TIMEx_MasterConfigSynchronization>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002cdc:	f7ff fafc 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ce0:	2360      	movs	r3, #96	@ 0x60
 8002ce2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 290;
 8002ce4:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002ce8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4815      	ldr	r0, [pc, #84]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002cfa:	f004 fbbf 	bl	800747c <HAL_TIM_PWM_ConfigChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002d04:	f7ff fae8 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.Pulse = 270;
 8002d08:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2208      	movs	r2, #8
 8002d12:	4619      	mov	r1, r3
 8002d14:	480e      	ldr	r0, [pc, #56]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002d16:	f004 fbb1 	bl	800747c <HAL_TIM_PWM_ConfigChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM4_Init+0xbc>
  {
    Error_Handler();
 8002d20:	f7ff fada 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.Pulse = 280;
 8002d24:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	220c      	movs	r2, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4807      	ldr	r0, [pc, #28]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002d32:	f004 fba3 	bl	800747c <HAL_TIM_PWM_ConfigChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002d3c:	f7ff facc 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d40:	4803      	ldr	r0, [pc, #12]	@ (8002d50 <MX_TIM4_Init+0xe8>)
 8002d42:	f000 f8b3 	bl	8002eac <HAL_TIM_MspPostInit>

}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	@ 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200006b8 	.word	0x200006b8
 8002d54:	40000800 	.word	0x40000800

08002d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0b      	ldr	r2, [pc, #44]	@ (8002d94 <HAL_TIM_Base_MspInit+0x3c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10d      	bne.n	8002d86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d98 <HAL_TIM_Base_MspInit+0x40>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <HAL_TIM_Base_MspInit+0x40>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7a:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <HAL_TIM_Base_MspInit+0x40>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40023800 	.word	0x40023800

08002d9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3a      	ldr	r2, [pc, #232]	@ (8002e94 <HAL_TIM_PWM_MspInit+0xf8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d16d      	bne.n	8002e8a <HAL_TIM_PWM_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	4b39      	ldr	r3, [pc, #228]	@ (8002e98 <HAL_TIM_PWM_MspInit+0xfc>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a38      	ldr	r2, [pc, #224]	@ (8002e98 <HAL_TIM_PWM_MspInit+0xfc>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <HAL_TIM_PWM_MspInit+0xfc>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_UP Init */
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002dca:	4b34      	ldr	r3, [pc, #208]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002dcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <HAL_TIM_PWM_MspInit+0x104>)
 8002dce:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002dd0:	4b32      	ldr	r3, [pc, #200]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002dd2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002dd6:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dd8:	4b30      	ldr	r3, [pc, #192]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dde:	4b2f      	ldr	r3, [pc, #188]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002de6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dea:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dec:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002dee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002df2:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002df4:	4b29      	ldr	r3, [pc, #164]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002df6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dfa:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002dfc:	4b27      	ldr	r3, [pc, #156]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002e02:	4b26      	ldr	r3, [pc, #152]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e08:	4b24      	ldr	r3, [pc, #144]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002e0e:	4823      	ldr	r0, [pc, #140]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002e10:	f001 f97c 	bl	800410c <HAL_DMA_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002e1a:	f7ff fa5d 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1e      	ldr	r2, [pc, #120]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002e22:	621a      	str	r2, [r3, #32]
 8002e24:	4a1d      	ldr	r2, [pc, #116]	@ (8002e9c <HAL_TIM_PWM_MspInit+0x100>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea8 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e2e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002e30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e32:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e36:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002e44:	4b17      	ldr	r3, [pc, #92]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e4a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e52:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e54:	4b13      	ldr	r3, [pc, #76]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e5a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002e62:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002e6e:	480d      	ldr	r0, [pc, #52]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e70:	f001 f94c 	bl	800410c <HAL_DMA_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_TIM_PWM_MspInit+0xe2>
    {
      Error_Handler();
 8002e7a:	f7ff fa2d 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e84:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <HAL_TIM_PWM_MspInit+0x108>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40000800 	.word	0x40000800
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	20000700 	.word	0x20000700
 8002ea0:	400260a0 	.word	0x400260a0
 8002ea4:	20000760 	.word	0x20000760
 8002ea8:	400260b8 	.word	0x400260b8

08002eac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <HAL_TIM_MspPostInit+0x68>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d11e      	bne.n	8002f0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <HAL_TIM_MspPostInit+0x6c>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a10      	ldr	r2, [pc, #64]	@ (8002f18 <HAL_TIM_MspPostInit+0x6c>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <HAL_TIM_MspPostInit+0x6c>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002eea:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002eee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002efc:	2302      	movs	r3, #2
 8002efe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	4619      	mov	r1, r3
 8002f06:	4805      	ldr	r0, [pc, #20]	@ (8002f1c <HAL_TIM_MspPostInit+0x70>)
 8002f08:	f001 fcd0 	bl	80048ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f0c:	bf00      	nop
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020400 	.word	0x40020400

08002f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f24:	f7ff fe12 	bl	8002b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f28:	480c      	ldr	r0, [pc, #48]	@ (8002f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f2a:	490d      	ldr	r1, [pc, #52]	@ (8002f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f30:	e002      	b.n	8002f38 <LoopCopyDataInit>

08002f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f36:	3304      	adds	r3, #4

08002f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f3c:	d3f9      	bcc.n	8002f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f40:	4c0a      	ldr	r4, [pc, #40]	@ (8002f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f44:	e001      	b.n	8002f4a <LoopFillZerobss>

08002f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f48:	3204      	adds	r2, #4

08002f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f4c:	d3fb      	bcc.n	8002f46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f4e:	f004 ff99 	bl	8007e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f52:	f7fe ffa1 	bl	8001e98 <main>
  bx  lr    
 8002f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002f64:	080082d0 	.word	0x080082d0
  ldr r2, =_sbss
 8002f68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002f6c:	200007c4 	.word	0x200007c4

08002f70 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <CAN1_RX1_IRQHandler>
	...

08002f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f78:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb4 <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb4 <HAL_Init+0x40>)
 8002f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_Init+0x40>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <HAL_Init+0x40>)
 8002f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_Init+0x40>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a07      	ldr	r2, [pc, #28]	@ (8002fb4 <HAL_Init+0x40>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f001 f873 	bl	8004088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fa2:	200f      	movs	r0, #15
 8002fa4:	f000 f808 	bl	8002fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fa8:	f7ff fd0a 	bl	80029c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00

08002fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc0:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_InitTick+0x54>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_InitTick+0x58>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 f88b 	bl	80040f2 <HAL_SYSTICK_Config>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e00e      	b.n	8003004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d80a      	bhi.n	8003002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fec:	2200      	movs	r2, #0
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff4:	f001 f853 	bl	800409e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff8:	4a06      	ldr	r2, [pc, #24]	@ (8003014 <HAL_InitTick+0x5c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e000      	b.n	8003004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000000 	.word	0x20000000
 8003010:	20000008 	.word	0x20000008
 8003014:	20000004 	.word	0x20000004

08003018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_IncTick+0x20>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_IncTick+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_IncTick+0x24>)
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000008 	.word	0x20000008
 800303c:	200007c0 	.word	0x200007c0

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b03      	ldr	r3, [pc, #12]	@ (8003054 <HAL_GetTick+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	200007c0 	.word	0x200007c0

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff ffee 	bl	8003040 <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d005      	beq.n	800307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <HAL_Delay+0x44>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800307e:	bf00      	nop
 8003080:	f7ff ffde 	bl	8003040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f7      	bhi.n	8003080 <HAL_Delay+0x28>
  {
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000008 	.word	0x20000008

080030a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e033      	b.n	800311e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fa38 	bl	8001534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d118      	bne.n	8003110 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030e6:	f023 0302 	bic.w	r3, r3, #2
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa78 	bl	80035e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
 800310e:	e001      	b.n	8003114 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d049      	beq.n	80031f0 <HAL_ADC_IRQHandler+0xca>
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d046      	beq.n	80031f0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d12b      	bne.n	80031e0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	d127      	bne.n	80031e0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d119      	bne.n	80031e0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0220 	bic.w	r2, r2, #32
 80031ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f8b0 	bl	8003346 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f06f 0212 	mvn.w	r2, #18
 80031ee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d057      	beq.n	80032b6 <HAL_ADC_IRQHandler+0x190>
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d054      	beq.n	80032b6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d139      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003238:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800323c:	2b00      	cmp	r3, #0
 800323e:	d006      	beq.n	800324e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d12b      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	d124      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11d      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	d119      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003280:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa9a 	bl	80037e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 020c 	mvn.w	r2, #12
 80032b4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <HAL_ADC_IRQHandler+0x1d6>
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10d      	bne.n	80032fc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f834 	bl	800335a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f06f 0201 	mvn.w	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800330a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <HAL_ADC_IRQHandler+0x218>
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d012      	beq.n	800333e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	f043 0202 	orr.w	r2, r3, #2
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0220 	mvn.w	r2, #32
 800332c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f81d 	bl	800336e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0220 	mvn.w	r2, #32
 800333c:	601a      	str	r2, [r3, #0]
  }
}
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x1c>
 800339c:	2302      	movs	r3, #2
 800339e:	e113      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x244>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	d925      	bls.n	80033fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68d9      	ldr	r1, [r3, #12]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	3b1e      	subs	r3, #30
 80033c6:	2207      	movs	r2, #7
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68d9      	ldr	r1, [r3, #12]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4618      	mov	r0, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4403      	add	r3, r0
 80033ee:	3b1e      	subs	r3, #30
 80033f0:	409a      	lsls	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e022      	b.n	8003442 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6919      	ldr	r1, [r3, #16]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	2207      	movs	r2, #7
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6919      	ldr	r1, [r3, #16]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	4618      	mov	r0, r3
 8003432:	4603      	mov	r3, r0
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4403      	add	r3, r0
 8003438:	409a      	lsls	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d824      	bhi.n	8003494 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	3b05      	subs	r3, #5
 800345c:	221f      	movs	r2, #31
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	4618      	mov	r0, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	3b05      	subs	r3, #5
 8003486:	fa00 f203 	lsl.w	r2, r0, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	635a      	str	r2, [r3, #52]	@ 0x34
 8003492:	e04c      	b.n	800352e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d824      	bhi.n	80034e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	3b23      	subs	r3, #35	@ 0x23
 80034ae:	221f      	movs	r2, #31
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43da      	mvns	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	400a      	ands	r2, r1
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	4618      	mov	r0, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	3b23      	subs	r3, #35	@ 0x23
 80034d8:	fa00 f203 	lsl.w	r2, r0, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034e4:	e023      	b.n	800352e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	3b41      	subs	r3, #65	@ 0x41
 80034f8:	221f      	movs	r2, #31
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43da      	mvns	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	400a      	ands	r2, r1
 8003506:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	4618      	mov	r0, r3
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	3b41      	subs	r3, #65	@ 0x41
 8003522:	fa00 f203 	lsl.w	r2, r0, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800352e:	4b29      	ldr	r3, [pc, #164]	@ (80035d4 <HAL_ADC_ConfigChannel+0x250>)
 8003530:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a28      	ldr	r2, [pc, #160]	@ (80035d8 <HAL_ADC_ConfigChannel+0x254>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d10f      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1d8>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b12      	cmp	r3, #18
 8003542:	d10b      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1d      	ldr	r2, [pc, #116]	@ (80035d8 <HAL_ADC_ConfigChannel+0x254>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12b      	bne.n	80035be <HAL_ADC_ConfigChannel+0x23a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <HAL_ADC_ConfigChannel+0x258>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <HAL_ADC_ConfigChannel+0x1f4>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b11      	cmp	r3, #17
 8003576:	d122      	bne.n	80035be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a11      	ldr	r2, [pc, #68]	@ (80035dc <HAL_ADC_ConfigChannel+0x258>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d111      	bne.n	80035be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800359a:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <HAL_ADC_ConfigChannel+0x25c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a11      	ldr	r2, [pc, #68]	@ (80035e4 <HAL_ADC_ConfigChannel+0x260>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	0c9a      	lsrs	r2, r3, #18
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40012300 	.word	0x40012300
 80035d8:	40012000 	.word	0x40012000
 80035dc:	10000012 	.word	0x10000012
 80035e0:	20000000 	.word	0x20000000
 80035e4:	431bde83 	.word	0x431bde83

080035e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035f0:	4b79      	ldr	r3, [pc, #484]	@ (80037d8 <ADC_Init+0x1f0>)
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	431a      	orrs	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800361c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	4a58      	ldr	r2, [pc, #352]	@ (80037dc <ADC_Init+0x1f4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800368e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6899      	ldr	r1, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6899      	ldr	r1, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	e00f      	b.n	80036e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0202 	bic.w	r2, r2, #2
 80036f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7e1b      	ldrb	r3, [r3, #24]
 8003700:	005a      	lsls	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003722:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	3b01      	subs	r3, #1
 8003740:	035a      	lsls	r2, r3, #13
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	e007      	b.n	800375c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	3b01      	subs	r3, #1
 8003778:	051a      	lsls	r2, r3, #20
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800379e:	025a      	lsls	r2, r3, #9
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	029a      	lsls	r2, r3, #10
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40012300 	.word	0x40012300
 80037dc:	0f000001 	.word	0x0f000001

080037e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003808:	2302      	movs	r3, #2
 800380a:	e031      	b.n	8003870 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8003816:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 021f 	bic.w	r2, r3, #31
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	431a      	orrs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	431a      	orrs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40012300 	.word	0x40012300

08003880 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0ed      	b.n	8003a6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe f834 	bl	800190c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b4:	f7ff fbc4 	bl	8003040 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038ba:	e012      	b.n	80038e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038bc:	f7ff fbc0 	bl	8003040 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b0a      	cmp	r3, #10
 80038c8:	d90b      	bls.n	80038e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2205      	movs	r2, #5
 80038da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0c5      	b.n	8003a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0e5      	beq.n	80038bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0202 	bic.w	r2, r2, #2
 80038fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7ff fb9e 	bl	8003040 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003906:	e012      	b.n	800392e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003908:	f7ff fb9a 	bl	8003040 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b0a      	cmp	r3, #10
 8003914:	d90b      	bls.n	800392e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2205      	movs	r2, #5
 8003926:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e09f      	b.n	8003a6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7e1b      	ldrb	r3, [r3, #24]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d108      	bne.n	8003956 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e007      	b.n	8003966 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	7e5b      	ldrb	r3, [r3, #25]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d108      	bne.n	8003980 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e007      	b.n	8003990 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7e9b      	ldrb	r3, [r3, #26]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d108      	bne.n	80039aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0220 	orr.w	r2, r2, #32
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e007      	b.n	80039ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0220 	bic.w	r2, r2, #32
 80039b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7edb      	ldrb	r3, [r3, #27]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d108      	bne.n	80039d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0210 	bic.w	r2, r2, #16
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e007      	b.n	80039e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0210 	orr.w	r2, r2, #16
 80039e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7f1b      	ldrb	r3, [r3, #28]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d108      	bne.n	80039fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0208 	orr.w	r2, r2, #8
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e007      	b.n	8003a0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0208 	bic.w	r2, r2, #8
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7f5b      	ldrb	r3, [r3, #29]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d108      	bne.n	8003a28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0204 	orr.w	r2, r2, #4
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e007      	b.n	8003a38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	ea42 0103 	orr.w	r1, r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	1e5a      	subs	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b08a      	sub	sp, #40	@ 0x28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d07c      	beq.n	8003bb6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d023      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f983 	bl	8003de4 <HAL_CAN_TxMailbox0CompleteCallback>
 8003ade:	e016      	b.n	8003b0e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af2:	e00c      	b.n	8003b0e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b06:	e002      	b.n	8003b0e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f989 	bl	8003e20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d024      	beq.n	8003b62 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f963 	bl	8003df8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b32:	e016      	b.n	8003b62 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d004      	beq.n	8003b48 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b46:	e00c      	b.n	8003b62 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5a:	e002      	b.n	8003b62 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f969 	bl	8003e34 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d024      	beq.n	8003bb6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f943 	bl	8003e0c <HAL_CAN_TxMailbox2CompleteCallback>
 8003b86:	e016      	b.n	8003bb6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9a:	e00c      	b.n	8003bb6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bae:	e002      	b.n	8003bb6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f949 	bl	8003e48 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f93a 	bl	8003e70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f921 	bl	8003e5c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00c      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d007      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00b      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2208      	movs	r2, #8
 8003c58:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f91c 	bl	8003e98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f903 	bl	8003e84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2210      	movs	r2, #16
 8003c98:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f906 	bl	8003eac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d006      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8ff 	bl	8003ec0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d07b      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d072      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d043      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d03e      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d44:	2b60      	cmp	r3, #96	@ 0x60
 8003d46:	d02b      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x32a>
 8003d48:	2b60      	cmp	r3, #96	@ 0x60
 8003d4a:	d82e      	bhi.n	8003daa <HAL_CAN_IRQHandler+0x334>
 8003d4c:	2b50      	cmp	r3, #80	@ 0x50
 8003d4e:	d022      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x320>
 8003d50:	2b50      	cmp	r3, #80	@ 0x50
 8003d52:	d82a      	bhi.n	8003daa <HAL_CAN_IRQHandler+0x334>
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	d019      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x316>
 8003d58:	2b40      	cmp	r3, #64	@ 0x40
 8003d5a:	d826      	bhi.n	8003daa <HAL_CAN_IRQHandler+0x334>
 8003d5c:	2b30      	cmp	r3, #48	@ 0x30
 8003d5e:	d010      	beq.n	8003d82 <HAL_CAN_IRQHandler+0x30c>
 8003d60:	2b30      	cmp	r3, #48	@ 0x30
 8003d62:	d822      	bhi.n	8003daa <HAL_CAN_IRQHandler+0x334>
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d002      	beq.n	8003d6e <HAL_CAN_IRQHandler+0x2f8>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d005      	beq.n	8003d78 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d6c:	e01d      	b.n	8003daa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	f043 0308 	orr.w	r3, r3, #8
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d76:	e019      	b.n	8003dac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	f043 0310 	orr.w	r3, r3, #16
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d80:	e014      	b.n	8003dac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	f043 0320 	orr.w	r3, r3, #32
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d8a:	e00f      	b.n	8003dac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d94:	e00a      	b.n	8003dac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d9e:	e005      	b.n	8003dac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003da8:	e000      	b.n	8003dac <HAL_CAN_IRQHandler+0x336>
            break;
 8003daa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003dba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f87c 	bl	8003ed4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3728      	adds	r7, #40	@ 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <__NVIC_SetPriorityGrouping+0x44>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f04:	4013      	ands	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f1a:	4a04      	ldr	r2, [pc, #16]	@ (8003f2c <__NVIC_SetPriorityGrouping+0x44>)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	60d3      	str	r3, [r2, #12]
}
 8003f20:	bf00      	nop
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <__NVIC_GetPriorityGrouping+0x18>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	f003 0307 	and.w	r3, r3, #7
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	db0b      	blt.n	8003f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	f003 021f 	and.w	r2, r3, #31
 8003f64:	4907      	ldr	r1, [pc, #28]	@ (8003f84 <__NVIC_EnableIRQ+0x38>)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	e000e100 	.word	0xe000e100

08003f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	6039      	str	r1, [r7, #0]
 8003f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	db0a      	blt.n	8003fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	490c      	ldr	r1, [pc, #48]	@ (8003fd4 <__NVIC_SetPriority+0x4c>)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	0112      	lsls	r2, r2, #4
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	440b      	add	r3, r1
 8003fac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fb0:	e00a      	b.n	8003fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4908      	ldr	r1, [pc, #32]	@ (8003fd8 <__NVIC_SetPriority+0x50>)
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	3b04      	subs	r3, #4
 8003fc0:	0112      	lsls	r2, r2, #4
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	761a      	strb	r2, [r3, #24]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000e100 	.word	0xe000e100
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b089      	sub	sp, #36	@ 0x24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f1c3 0307 	rsb	r3, r3, #7
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	bf28      	it	cs
 8003ffa:	2304      	movcs	r3, #4
 8003ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3304      	adds	r3, #4
 8004002:	2b06      	cmp	r3, #6
 8004004:	d902      	bls.n	800400c <NVIC_EncodePriority+0x30>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3b03      	subs	r3, #3
 800400a:	e000      	b.n	800400e <NVIC_EncodePriority+0x32>
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004010:	f04f 32ff 	mov.w	r2, #4294967295
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43da      	mvns	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	401a      	ands	r2, r3
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004024:	f04f 31ff 	mov.w	r1, #4294967295
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	43d9      	mvns	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004034:	4313      	orrs	r3, r2
         );
}
 8004036:	4618      	mov	r0, r3
 8004038:	3724      	adds	r7, #36	@ 0x24
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004054:	d301      	bcc.n	800405a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004056:	2301      	movs	r3, #1
 8004058:	e00f      	b.n	800407a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800405a:	4a0a      	ldr	r2, [pc, #40]	@ (8004084 <SysTick_Config+0x40>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004062:	210f      	movs	r1, #15
 8004064:	f04f 30ff 	mov.w	r0, #4294967295
 8004068:	f7ff ff8e 	bl	8003f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800406c:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <SysTick_Config+0x40>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004072:	4b04      	ldr	r3, [pc, #16]	@ (8004084 <SysTick_Config+0x40>)
 8004074:	2207      	movs	r2, #7
 8004076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	e000e010 	.word	0xe000e010

08004088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff29 	bl	8003ee8 <__NVIC_SetPriorityGrouping>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4603      	mov	r3, r0
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040b0:	f7ff ff3e 	bl	8003f30 <__NVIC_GetPriorityGrouping>
 80040b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	6978      	ldr	r0, [r7, #20]
 80040bc:	f7ff ff8e 	bl	8003fdc <NVIC_EncodePriority>
 80040c0:	4602      	mov	r2, r0
 80040c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff5d 	bl	8003f88 <__NVIC_SetPriority>
}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff31 	bl	8003f4c <__NVIC_EnableIRQ>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ffa2 	bl	8004044 <SysTick_Config>
 8004100:	4603      	mov	r3, r0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004118:	f7fe ff92 	bl	8003040 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e099      	b.n	800425c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004148:	e00f      	b.n	800416a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800414a:	f7fe ff79 	bl	8003040 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b05      	cmp	r3, #5
 8004156:	d908      	bls.n	800416a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2203      	movs	r2, #3
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e078      	b.n	800425c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e8      	bne.n	800414a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4b38      	ldr	r3, [pc, #224]	@ (8004264 <HAL_DMA_Init+0x158>)
 8004184:	4013      	ands	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d107      	bne.n	80041d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	4313      	orrs	r3, r2
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0307 	bic.w	r3, r3, #7
 80041ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d117      	bne.n	800422e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f9e9 	bl	80045e8 <DMA_CheckFifoParam>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2240      	movs	r2, #64	@ 0x40
 8004220:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800422a:	2301      	movs	r3, #1
 800422c:	e016      	b.n	800425c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f9a0 	bl	800457c <DMA_CalcBaseAndBitshift>
 800423c:	4603      	mov	r3, r0
 800423e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004244:	223f      	movs	r2, #63	@ 0x3f
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	f010803f 	.word	0xf010803f

08004268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004274:	4b8e      	ldr	r3, [pc, #568]	@ (80044b0 <HAL_DMA_IRQHandler+0x248>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a8e      	ldr	r2, [pc, #568]	@ (80044b4 <HAL_DMA_IRQHandler+0x24c>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004292:	2208      	movs	r2, #8
 8004294:	409a      	lsls	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01a      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d013      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0204 	bic.w	r2, r2, #4
 80042ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c0:	2208      	movs	r2, #8
 80042c2:	409a      	lsls	r2, r3
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	2201      	movs	r2, #1
 80042f8:	409a      	lsls	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004302:	f043 0202 	orr.w	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430e:	2204      	movs	r2, #4
 8004310:	409a      	lsls	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d012      	beq.n	8004340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00b      	beq.n	8004340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432c:	2204      	movs	r2, #4
 800432e:	409a      	lsls	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f043 0204 	orr.w	r2, r3, #4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004344:	2210      	movs	r2, #16
 8004346:	409a      	lsls	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d043      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d03c      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004362:	2210      	movs	r2, #16
 8004364:	409a      	lsls	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d018      	beq.n	80043aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d108      	bne.n	8004398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d024      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
 8004396:	e01f      	b.n	80043d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01b      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
 80043a8:	e016      	b.n	80043d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0208 	bic.w	r2, r2, #8
 80043c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043dc:	2220      	movs	r2, #32
 80043de:	409a      	lsls	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 808f 	beq.w	8004508 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8087 	beq.w	8004508 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fe:	2220      	movs	r2, #32
 8004400:	409a      	lsls	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b05      	cmp	r3, #5
 8004410:	d136      	bne.n	8004480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0216 	bic.w	r2, r2, #22
 8004420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_DMA_IRQHandler+0x1da>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0208 	bic.w	r2, r2, #8
 8004450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004456:	223f      	movs	r2, #63	@ 0x3f
 8004458:	409a      	lsls	r2, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004472:	2b00      	cmp	r3, #0
 8004474:	d07e      	beq.n	8004574 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
        }
        return;
 800447e:	e079      	b.n	8004574 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01d      	beq.n	80044ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10d      	bne.n	80044b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d031      	beq.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
 80044ac:	e02c      	b.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
 80044ae:	bf00      	nop
 80044b0:	20000000 	.word	0x20000000
 80044b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d023      	beq.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
 80044c8:	e01e      	b.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10f      	bne.n	80044f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0210 	bic.w	r2, r2, #16
 80044e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450c:	2b00      	cmp	r3, #0
 800450e:	d032      	beq.n	8004576 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d022      	beq.n	8004562 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2205      	movs	r2, #5
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3301      	adds	r3, #1
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	d307      	bcc.n	8004550 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f2      	bne.n	8004534 <HAL_DMA_IRQHandler+0x2cc>
 800454e:	e000      	b.n	8004552 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004550:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
 8004572:	e000      	b.n	8004576 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004574:	bf00      	nop
    }
  }
}
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	3b10      	subs	r3, #16
 800458c:	4a14      	ldr	r2, [pc, #80]	@ (80045e0 <DMA_CalcBaseAndBitshift+0x64>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004596:	4a13      	ldr	r2, [pc, #76]	@ (80045e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d909      	bls.n	80045be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	1d1a      	adds	r2, r3, #4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80045bc:	e007      	b.n	80045ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	aaaaaaab 	.word	0xaaaaaaab
 80045e4:	080082b8 	.word	0x080082b8

080045e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11f      	bne.n	8004642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d856      	bhi.n	80046b6 <DMA_CheckFifoParam+0xce>
 8004608:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <DMA_CheckFifoParam+0x28>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004621 	.word	0x08004621
 8004614:	08004633 	.word	0x08004633
 8004618:	08004621 	.word	0x08004621
 800461c:	080046b7 	.word	0x080046b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d046      	beq.n	80046ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e043      	b.n	80046ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800463a:	d140      	bne.n	80046be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004640:	e03d      	b.n	80046be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800464a:	d121      	bne.n	8004690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d837      	bhi.n	80046c2 <DMA_CheckFifoParam+0xda>
 8004652:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <DMA_CheckFifoParam+0x70>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	0800466f 	.word	0x0800466f
 8004660:	08004669 	.word	0x08004669
 8004664:	08004681 	.word	0x08004681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e030      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d025      	beq.n	80046c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467e:	e022      	b.n	80046c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004688:	d11f      	bne.n	80046ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800468e:	e01c      	b.n	80046ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d903      	bls.n	800469e <DMA_CheckFifoParam+0xb6>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d003      	beq.n	80046a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800469c:	e018      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
      break;
 80046a2:	e015      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e00b      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;
 80046b6:	bf00      	nop
 80046b8:	e00a      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ba:	bf00      	nop
 80046bc:	e008      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e006      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ce:	bf00      	nop
    }
  } 
  
  return status; 
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e08d      	b.n	800480e <HAL_FMPI2C_Init+0x12e>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fd f9fc 	bl	8001b04 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	@ 0x24
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004730:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004740:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	e006      	b.n	8004768 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004766:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d108      	bne.n	8004782 <HAL_FMPI2C_Init+0xa2>
  {
    SET_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	e007      	b.n	8004792 <HAL_FMPI2C_Init+0xb2>
  }
  else
  {
    /* Clear the FMPI2C ADD10 bit */
    CLEAR_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047b4:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69d9      	ldr	r1, [r3, #28]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b20      	cmp	r3, #32
 800482a:	d138      	bne.n	800489e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004836:	2302      	movs	r3, #2
 8004838:	e032      	b.n	80048a0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2224      	movs	r2, #36	@ 0x24
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004868:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
  }
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b089      	sub	sp, #36	@ 0x24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e165      	b.n	8004b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048c8:	2201      	movs	r2, #1
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	f040 8154 	bne.w	8004b8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d005      	beq.n	80048fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d130      	bne.n	8004960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2203      	movs	r2, #3
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004934:	2201      	movs	r2, #1
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 0201 	and.w	r2, r3, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b03      	cmp	r3, #3
 800496a:	d017      	beq.n	800499c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	2203      	movs	r2, #3
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d123      	bne.n	80049f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	08da      	lsrs	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3208      	adds	r2, #8
 80049b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	220f      	movs	r2, #15
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	08da      	lsrs	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3208      	adds	r2, #8
 80049ea:	69b9      	ldr	r1, [r7, #24]
 80049ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0203 	and.w	r2, r3, #3
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80ae 	beq.w	8004b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	4b5d      	ldr	r3, [pc, #372]	@ (8004bac <HAL_GPIO_Init+0x300>)
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004bac <HAL_GPIO_Init+0x300>)
 8004a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a42:	4b5a      	ldr	r3, [pc, #360]	@ (8004bac <HAL_GPIO_Init+0x300>)
 8004a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a4e:	4a58      	ldr	r2, [pc, #352]	@ (8004bb0 <HAL_GPIO_Init+0x304>)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	3302      	adds	r3, #2
 8004a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	220f      	movs	r2, #15
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a4f      	ldr	r2, [pc, #316]	@ (8004bb4 <HAL_GPIO_Init+0x308>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d025      	beq.n	8004ac6 <HAL_GPIO_Init+0x21a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004bb8 <HAL_GPIO_Init+0x30c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01f      	beq.n	8004ac2 <HAL_GPIO_Init+0x216>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a4d      	ldr	r2, [pc, #308]	@ (8004bbc <HAL_GPIO_Init+0x310>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d019      	beq.n	8004abe <HAL_GPIO_Init+0x212>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8004bc0 <HAL_GPIO_Init+0x314>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_GPIO_Init+0x20e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a4b      	ldr	r2, [pc, #300]	@ (8004bc4 <HAL_GPIO_Init+0x318>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00d      	beq.n	8004ab6 <HAL_GPIO_Init+0x20a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc8 <HAL_GPIO_Init+0x31c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <HAL_GPIO_Init+0x206>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a49      	ldr	r2, [pc, #292]	@ (8004bcc <HAL_GPIO_Init+0x320>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_GPIO_Init+0x202>
 8004aaa:	2306      	movs	r3, #6
 8004aac:	e00c      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004aae:	2307      	movs	r3, #7
 8004ab0:	e00a      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	e008      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	e006      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004aba:	2303      	movs	r3, #3
 8004abc:	e004      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e002      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	f002 0203 	and.w	r2, r2, #3
 8004ace:	0092      	lsls	r2, r2, #2
 8004ad0:	4093      	lsls	r3, r2
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ad8:	4935      	ldr	r1, [pc, #212]	@ (8004bb0 <HAL_GPIO_Init+0x304>)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	3302      	adds	r3, #2
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b0a:	4a31      	ldr	r2, [pc, #196]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b10:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b34:	4a26      	ldr	r2, [pc, #152]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b3a:	4b25      	ldr	r3, [pc, #148]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b64:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b88:	4a11      	ldr	r2, [pc, #68]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3301      	adds	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	f67f ae96 	bls.w	80048c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3724      	adds	r7, #36	@ 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	40013800 	.word	0x40013800
 8004bb4:	40020000 	.word	0x40020000
 8004bb8:	40020400 	.word	0x40020400
 8004bbc:	40020800 	.word	0x40020800
 8004bc0:	40020c00 	.word	0x40020c00
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40021400 	.word	0x40021400
 8004bcc:	40021800 	.word	0x40021800
 8004bd0:	40013c00 	.word	0x40013c00

08004bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
 8004be0:	4613      	mov	r3, r2
 8004be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004be4:	787b      	ldrb	r3, [r7, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bea:	887a      	ldrh	r2, [r7, #2]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bf0:	e003      	b.n	8004bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bf2:	887b      	ldrh	r3, [r7, #2]
 8004bf4:	041a      	lsls	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	619a      	str	r2, [r3, #24]
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e12b      	b.n	8004e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd f8c8 	bl	8001dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	@ 0x24
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c6c:	f000 fac4 	bl	80051f8 <HAL_RCC_GetPCLK1Freq>
 8004c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4a81      	ldr	r2, [pc, #516]	@ (8004e7c <HAL_I2C_Init+0x274>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d807      	bhi.n	8004c8c <HAL_I2C_Init+0x84>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4a80      	ldr	r2, [pc, #512]	@ (8004e80 <HAL_I2C_Init+0x278>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	bf94      	ite	ls
 8004c84:	2301      	movls	r3, #1
 8004c86:	2300      	movhi	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	e006      	b.n	8004c9a <HAL_I2C_Init+0x92>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e84 <HAL_I2C_Init+0x27c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	bf94      	ite	ls
 8004c94:	2301      	movls	r3, #1
 8004c96:	2300      	movhi	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e0e7      	b.n	8004e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a78      	ldr	r2, [pc, #480]	@ (8004e88 <HAL_I2C_Init+0x280>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	0c9b      	lsrs	r3, r3, #18
 8004cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8004e7c <HAL_I2C_Init+0x274>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d802      	bhi.n	8004cdc <HAL_I2C_Init+0xd4>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	e009      	b.n	8004cf0 <HAL_I2C_Init+0xe8>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	4a69      	ldr	r2, [pc, #420]	@ (8004e8c <HAL_I2C_Init+0x284>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	099b      	lsrs	r3, r3, #6
 8004cee:	3301      	adds	r3, #1
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	495c      	ldr	r1, [pc, #368]	@ (8004e7c <HAL_I2C_Init+0x274>)
 8004d0c:	428b      	cmp	r3, r1
 8004d0e:	d819      	bhi.n	8004d44 <HAL_I2C_Init+0x13c>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1e59      	subs	r1, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d1e:	1c59      	adds	r1, r3, #1
 8004d20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d24:	400b      	ands	r3, r1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_I2C_Init+0x138>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1e59      	subs	r1, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d38:	3301      	adds	r3, #1
 8004d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3e:	e051      	b.n	8004de4 <HAL_I2C_Init+0x1dc>
 8004d40:	2304      	movs	r3, #4
 8004d42:	e04f      	b.n	8004de4 <HAL_I2C_Init+0x1dc>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d111      	bne.n	8004d70 <HAL_I2C_Init+0x168>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	1e58      	subs	r0, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	440b      	add	r3, r1
 8004d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf0c      	ite	eq
 8004d68:	2301      	moveq	r3, #1
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e012      	b.n	8004d96 <HAL_I2C_Init+0x18e>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1e58      	subs	r0, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6859      	ldr	r1, [r3, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	0099      	lsls	r1, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d86:	3301      	adds	r3, #1
 8004d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Init+0x196>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e022      	b.n	8004de4 <HAL_I2C_Init+0x1dc>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10e      	bne.n	8004dc4 <HAL_I2C_Init+0x1bc>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1e58      	subs	r0, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	440b      	add	r3, r1
 8004db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db8:	3301      	adds	r3, #1
 8004dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dc2:	e00f      	b.n	8004de4 <HAL_I2C_Init+0x1dc>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	1e58      	subs	r0, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	0099      	lsls	r1, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	6809      	ldr	r1, [r1, #0]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6911      	ldr	r1, [r2, #16]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68d2      	ldr	r2, [r2, #12]
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695a      	ldr	r2, [r3, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	000186a0 	.word	0x000186a0
 8004e80:	001e847f 	.word	0x001e847f
 8004e84:	003d08ff 	.word	0x003d08ff
 8004e88:	431bde83 	.word	0x431bde83
 8004e8c:	10624dd3 	.word	0x10624dd3

08004e90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004e98:	f7fe f8d2 	bl	8003040 <HAL_GetTick>
 8004e9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e069      	b.n	8004f7c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10b      	bne.n	8004ecc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fd fa3d 	bl	800233c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004ec2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f85e 	bl	8004f88 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	021a      	lsls	r2, r3, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2120      	movs	r1, #32
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f856 	bl	8004fa4 <QSPI_WaitFlagStateUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004efc:	7afb      	ldrb	r3, [r7, #11]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d137      	bne.n	8004f72 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f0c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6852      	ldr	r2, [r2, #4]
 8004f14:	0611      	lsls	r1, r2, #24
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68d2      	ldr	r2, [r2, #12]
 8004f1a:	4311      	orrs	r1, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	69d2      	ldr	r2, [r2, #28]
 8004f20:	4311      	orrs	r1, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6a12      	ldr	r2, [r2, #32]
 8004f26:	4311      	orrs	r1, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <HAL_QSPI_Init+0xf4>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6912      	ldr	r2, [r2, #16]
 8004f3e:	0411      	lsls	r1, r2, #16
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6952      	ldr	r2, [r2, #20]
 8004f44:	4311      	orrs	r1, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6992      	ldr	r2, [r2, #24]
 8004f4a:	4311      	orrs	r1, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004f7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	ffe0f8fe 	.word	0xffe0f8fe

08004f88 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004fb4:	e01a      	b.n	8004fec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d016      	beq.n	8004fec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fe f83f 	bl	8003040 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10b      	bne.n	8004fec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe0:	f043 0201 	orr.w	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e00e      	b.n	800500a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	429a      	cmp	r2, r3
 8005006:	d1d6      	bne.n	8004fb6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0cc      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	4b68      	ldr	r3, [pc, #416]	@ (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d90c      	bls.n	8005050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b65      	ldr	r3, [pc, #404]	@ (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b63      	ldr	r3, [pc, #396]	@ (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0b8      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005068:	4b59      	ldr	r3, [pc, #356]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a58      	ldr	r2, [pc, #352]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005080:	4b53      	ldr	r3, [pc, #332]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4a52      	ldr	r2, [pc, #328]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800508a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508c:	4b50      	ldr	r3, [pc, #320]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	494d      	ldr	r1, [pc, #308]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d044      	beq.n	8005134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	4b47      	ldr	r3, [pc, #284]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d119      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e07f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d003      	beq.n	80050d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d2:	4b3f      	ldr	r3, [pc, #252]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e06f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e2:	4b3b      	ldr	r3, [pc, #236]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e067      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f2:	4b37      	ldr	r3, [pc, #220]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4934      	ldr	r1, [pc, #208]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005104:	f7fd ff9c 	bl	8003040 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fd ff98 	bl	8003040 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e04f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	4b2b      	ldr	r3, [pc, #172]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 020c 	and.w	r2, r3, #12
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	429a      	cmp	r2, r3
 8005132:	d1eb      	bne.n	800510c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005134:	4b25      	ldr	r3, [pc, #148]	@ (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d20c      	bcs.n	800515c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b22      	ldr	r3, [pc, #136]	@ (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b20      	ldr	r3, [pc, #128]	@ (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e032      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005168:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4916      	ldr	r1, [pc, #88]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005186:	4b12      	ldr	r3, [pc, #72]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	490e      	ldr	r1, [pc, #56]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	4313      	orrs	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800519a:	f000 fdb5 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 800519e:	4602      	mov	r2, r0
 80051a0:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	490a      	ldr	r1, [pc, #40]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 80051ac:	5ccb      	ldrb	r3, [r1, r3]
 80051ae:	fa22 f303 	lsr.w	r3, r2, r3
 80051b2:	4a09      	ldr	r2, [pc, #36]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051b6:	4b09      	ldr	r3, [pc, #36]	@ (80051dc <HAL_RCC_ClockConfig+0x1c8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fd fefc 	bl	8002fb8 <HAL_InitTick>

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023c00 	.word	0x40023c00
 80051d0:	40023800 	.word	0x40023800
 80051d4:	080082a0 	.word	0x080082a0
 80051d8:	20000000 	.word	0x20000000
 80051dc:	20000004 	.word	0x20000004

080051e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e4:	4b03      	ldr	r3, [pc, #12]	@ (80051f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051e6:	681b      	ldr	r3, [r3, #0]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000000 	.word	0x20000000

080051f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051fc:	f7ff fff0 	bl	80051e0 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	0a9b      	lsrs	r3, r3, #10
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	@ (800521c <HAL_RCC_GetPCLK1Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40023800 	.word	0x40023800
 800521c:	080082b0 	.word	0x080082b0

08005220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	@ 0x30
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d010      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005258:	4b6f      	ldr	r3, [pc, #444]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800525a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800525e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	496c      	ldr	r1, [pc, #432]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005276:	2301      	movs	r3, #1
 8005278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d010      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005286:	4b64      	ldr	r3, [pc, #400]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800528c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005294:	4960      	ldr	r1, [pc, #384]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80052a4:	2301      	movs	r3, #1
 80052a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d017      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052b4:	4b58      	ldr	r3, [pc, #352]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	4955      	ldr	r1, [pc, #340]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052d2:	d101      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80052d4:	2301      	movs	r3, #1
 80052d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80052e0:	2301      	movs	r3, #1
 80052e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d017      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052f0:	4b49      	ldr	r3, [pc, #292]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80052f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fe:	4946      	ldr	r1, [pc, #280]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800530e:	d101      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005310:	2301      	movs	r3, #1
 8005312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800531c:	2301      	movs	r3, #1
 800531e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 808a 	beq.w	8005442 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	4b39      	ldr	r3, [pc, #228]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	4a38      	ldr	r2, [pc, #224]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800533c:	6413      	str	r3, [r2, #64]	@ 0x40
 800533e:	4b36      	ldr	r3, [pc, #216]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800534a:	4b34      	ldr	r3, [pc, #208]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a33      	ldr	r2, [pc, #204]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005354:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005356:	f7fd fe73 	bl	8003040 <HAL_GetTick>
 800535a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800535c:	e008      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800535e:	f7fd fe6f 	bl	8003040 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d901      	bls.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e278      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005370:	4b2a      	ldr	r3, [pc, #168]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0f0      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800537c:	4b26      	ldr	r3, [pc, #152]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005384:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02f      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005394:	6a3a      	ldr	r2, [r7, #32]
 8005396:	429a      	cmp	r2, r3
 8005398:	d028      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800539a:	4b1f      	ldr	r3, [pc, #124]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053b0:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053b6:	4b18      	ldr	r3, [pc, #96]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d114      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053c2:	f7fd fe3d 	bl	8003040 <HAL_GetTick>
 80053c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fd fe39 	bl	8003040 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e240      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0ee      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053f8:	d114      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80053fa:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800540a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800540e:	4902      	ldr	r1, [pc, #8]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005410:	4313      	orrs	r3, r2
 8005412:	608b      	str	r3, [r1, #8]
 8005414:	e00c      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800
 800541c:	40007000 	.word	0x40007000
 8005420:	42470e40 	.word	0x42470e40
 8005424:	4b4a      	ldr	r3, [pc, #296]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4a49      	ldr	r2, [pc, #292]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800542a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800542e:	6093      	str	r3, [r2, #8]
 8005430:	4b47      	ldr	r3, [pc, #284]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005432:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543c:	4944      	ldr	r1, [pc, #272]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800543e:	4313      	orrs	r3, r2
 8005440:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005454:	4b3f      	ldr	r3, [pc, #252]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005456:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005464:	4b3a      	ldr	r3, [pc, #232]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800546a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005472:	4937      	ldr	r1, [pc, #220]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005486:	4b32      	ldr	r3, [pc, #200]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005494:	492e      	ldr	r1, [pc, #184]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d011      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054a8:	4b29      	ldr	r3, [pc, #164]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ae:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b6:	4926      	ldr	r1, [pc, #152]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054c6:	d101      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80054c8:	2301      	movs	r3, #1
 80054ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80054d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	491a      	ldr	r1, [pc, #104]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d011      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80054fa:	4b15      	ldr	r3, [pc, #84]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80054fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005500:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	4911      	ldr	r1, [pc, #68]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005518:	d101      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800551a:	2301      	movs	r3, #1
 800551c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800551e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d005      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800552c:	f040 80ff 	bne.w	800572e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005530:	4b09      	ldr	r3, [pc, #36]	@ (8005558 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005536:	f7fd fd83 	bl	8003040 <HAL_GetTick>
 800553a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800553c:	e00e      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800553e:	f7fd fd7f 	bl	8003040 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d907      	bls.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e188      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005550:	40023800 	.word	0x40023800
 8005554:	424711e0 	.word	0x424711e0
 8005558:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800555c:	4b7e      	ldr	r3, [pc, #504]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ea      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005584:	2b00      	cmp	r3, #0
 8005586:	d028      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d124      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005590:	4b71      	ldr	r3, [pc, #452]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005596:	0c1b      	lsrs	r3, r3, #16
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	3301      	adds	r3, #1
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055a8:	0e1b      	lsrs	r3, r3, #24
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	019b      	lsls	r3, r3, #6
 80055ba:	431a      	orrs	r2, r3
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	3b01      	subs	r3, #1
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	431a      	orrs	r2, r3
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	061b      	lsls	r3, r3, #24
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	071b      	lsls	r3, r3, #28
 80055d2:	4961      	ldr	r1, [pc, #388]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d035      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005604:	d130      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005606:	4b54      	ldr	r3, [pc, #336]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	3301      	adds	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005618:	4b4f      	ldr	r3, [pc, #316]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800561a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561e:	0f1b      	lsrs	r3, r3, #28
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	019b      	lsls	r3, r3, #6
 8005630:	431a      	orrs	r2, r3
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	3b01      	subs	r3, #1
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	061b      	lsls	r3, r3, #24
 8005642:	431a      	orrs	r2, r3
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	071b      	lsls	r3, r3, #28
 8005648:	4943      	ldr	r1, [pc, #268]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005650:	4b41      	ldr	r3, [pc, #260]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005652:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005656:	f023 021f 	bic.w	r2, r3, #31
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565e:	3b01      	subs	r3, #1
 8005660:	493d      	ldr	r1, [pc, #244]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005670:	2b00      	cmp	r3, #0
 8005672:	d029      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800567c:	d124      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800567e:	4b36      	ldr	r3, [pc, #216]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005684:	0c1b      	lsrs	r3, r3, #16
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	3301      	adds	r3, #1
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005690:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005696:	0f1b      	lsrs	r3, r3, #28
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	019b      	lsls	r3, r3, #6
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	3b01      	subs	r3, #1
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	431a      	orrs	r2, r3
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	431a      	orrs	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	071b      	lsls	r3, r3, #28
 80056c0:	4925      	ldr	r1, [pc, #148]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d016      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	019b      	lsls	r3, r3, #6
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	3b01      	subs	r3, #1
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	4917      	ldr	r1, [pc, #92]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005702:	4b16      	ldr	r3, [pc, #88]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005708:	f7fd fc9a 	bl	8003040 <HAL_GetTick>
 800570c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005710:	f7fd fc96 	bl	8003040 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e09f      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005722:	4b0d      	ldr	r3, [pc, #52]	@ (8005758 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	2b01      	cmp	r3, #1
 8005732:	f040 8095 	bne.w	8005860 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005736:	4b0a      	ldr	r3, [pc, #40]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800573c:	f7fd fc80 	bl	8003040 <HAL_GetTick>
 8005740:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005742:	e00f      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005744:	f7fd fc7c 	bl	8003040 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d908      	bls.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e085      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	42470068 	.word	0x42470068
 8005760:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005764:	4b41      	ldr	r3, [pc, #260]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800576c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005770:	d0e8      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02b      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	2b00      	cmp	r3, #0
 8005798:	d127      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800579a:	4b34      	ldr	r3, [pc, #208]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a0:	0c1b      	lsrs	r3, r3, #16
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	3301      	adds	r3, #1
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	019b      	lsls	r3, r3, #6
 80057b6:	431a      	orrs	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	3b01      	subs	r3, #1
 80057be:	041b      	lsls	r3, r3, #16
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	061b      	lsls	r3, r3, #24
 80057c8:	4928      	ldr	r1, [pc, #160]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057d0:	4b26      	ldr	r3, [pc, #152]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	3b01      	subs	r3, #1
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	4922      	ldr	r1, [pc, #136]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01d      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057fe:	d118      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005800:	4b1a      	ldr	r3, [pc, #104]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005806:	0e1b      	lsrs	r3, r3, #24
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	019b      	lsls	r3, r3, #6
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	3b01      	subs	r3, #1
 8005822:	041b      	lsls	r3, r3, #16
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	4910      	ldr	r1, [pc, #64]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005832:	4b0f      	ldr	r3, [pc, #60]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005838:	f7fd fc02 	bl	8003040 <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005840:	f7fd fbfe 	bl	8003040 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e007      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005852:	4b06      	ldr	r3, [pc, #24]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800585a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800585e:	d1ef      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3730      	adds	r7, #48	@ 0x30
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800
 8005870:	42470070 	.word	0x42470070

08005874 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005874:	b480      	push	{r7}
 8005876:	b089      	sub	sp, #36	@ 0x24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3b01      	subs	r3, #1
 8005898:	2b07      	cmp	r3, #7
 800589a:	f200 8224 	bhi.w	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800589e:	a201      	add	r2, pc, #4	@ (adr r2, 80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	08005aa7 	.word	0x08005aa7
 80058a8:	08005bd1 	.word	0x08005bd1
 80058ac:	08005ce7 	.word	0x08005ce7
 80058b0:	080058c5 	.word	0x080058c5
 80058b4:	08005ce7 	.word	0x08005ce7
 80058b8:	08005ce7 	.word	0x08005ce7
 80058bc:	08005ce7 	.word	0x08005ce7
 80058c0:	080058c5 	.word	0x080058c5
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80058c4:	4ba8      	ldr	r3, [pc, #672]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80058c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ca:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058da:	f000 80d6 	beq.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058e4:	f200 80dd 	bhi.w	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058ee:	f000 809f 	beq.w	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058f8:	f200 80d3 	bhi.w	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005902:	d05b      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800590a:	f200 80ca 	bhi.w	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005914:	f000 80b6 	beq.w	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800591e:	f200 80c0 	bhi.w	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005928:	f000 8082 	beq.w	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005932:	f200 80b6 	bhi.w	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005942:	d03b      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8005944:	e0ad      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005946:	4b88      	ldr	r3, [pc, #544]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8005952:	4b85      	ldr	r3, [pc, #532]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800595c:	4a83      	ldr	r2, [pc, #524]	@ (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	e008      	b.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8005966:	4b80      	ldr	r3, [pc, #512]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005970:	4a7f      	ldr	r2, [pc, #508]	@ (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8005978:	4b7b      	ldr	r3, [pc, #492]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597e:	0e1b      	lsrs	r3, r3, #24
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8005986:	4b78      	ldr	r3, [pc, #480]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598c:	099b      	lsrs	r3, r3, #6
 800598e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	fb03 f202 	mul.w	r2, r3, r2
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80059a0:	4b71      	ldr	r3, [pc, #452]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	3301      	adds	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	61fb      	str	r3, [r7, #28]
          break;
 80059ba:	e073      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80059bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80059c8:	4b67      	ldr	r3, [pc, #412]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059d2:	4a66      	ldr	r2, [pc, #408]	@ (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e008      	b.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80059dc:	4b62      	ldr	r3, [pc, #392]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059e6:	4a62      	ldr	r2, [pc, #392]	@ (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80059ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059f4:	0e1b      	lsrs	r3, r3, #24
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80059fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a02:	099b      	lsrs	r3, r3, #6
 8005a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	fb03 f202 	mul.w	r2, r3, r2
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8005a16:	4b54      	ldr	r3, [pc, #336]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	3301      	adds	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	61fb      	str	r3, [r7, #28]
          break;
 8005a2e:	e039      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a30:	4b4d      	ldr	r3, [pc, #308]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d108      	bne.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a44:	4a49      	ldr	r2, [pc, #292]	@ (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	e007      	b.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005a4e:	4b46      	ldr	r3, [pc, #280]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a56:	4a46      	ldr	r2, [pc, #280]	@ (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8005a5e:	4b42      	ldr	r3, [pc, #264]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	0f1b      	lsrs	r3, r3, #28
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8005a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	099b      	lsrs	r3, r3, #6
 8005a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	fb03 f202 	mul.w	r2, r3, r2
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	61fb      	str	r3, [r7, #28]
          break;
 8005a82:	e00f      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a84:	4b3b      	ldr	r3, [pc, #236]	@ (8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005a86:	61fb      	str	r3, [r7, #28]
          break;
 8005a88:	e00c      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a8a:	4b37      	ldr	r3, [pc, #220]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8005a96:	4b35      	ldr	r3, [pc, #212]	@ (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005a98:	61fb      	str	r3, [r7, #28]
          break;
 8005a9a:	e003      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8005a9c:	4b34      	ldr	r3, [pc, #208]	@ (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005a9e:	61fb      	str	r3, [r7, #28]
          break;
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8005aa2:	bf00      	nop
        }
      }
      break;
 8005aa4:	e120      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005aa6:	4b30      	ldr	r3, [pc, #192]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aac:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8005ab8:	d079      	beq.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8005ac0:	f200 8082 	bhi.w	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005aca:	d03c      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ad2:	d879      	bhi.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d006      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ae0:	d172      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ae2:	4b24      	ldr	r3, [pc, #144]	@ (8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8005ae4:	61fb      	str	r3, [r7, #28]
          break;
 8005ae6:	e072      	b.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005af4:	d109      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005af6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b00:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e008      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b0a:	4b17      	ldr	r3, [pc, #92]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b14:	4a15      	ldr	r2, [pc, #84]	@ (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8005b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b1c:	4b12      	ldr	r3, [pc, #72]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b22:	099b      	lsrs	r3, r3, #6
 8005b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	fb02 f303 	mul.w	r3, r2, r3
 8005b2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b30:	4b0d      	ldr	r3, [pc, #52]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b36:	0f1b      	lsrs	r3, r3, #28
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b42:	61fb      	str	r3, [r7, #28]
          break;
 8005b44:	e043      	b.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b46:	4b08      	ldr	r3, [pc, #32]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b52:	d111      	bne.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b54:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b5c:	4a04      	ldr	r2, [pc, #16]	@ (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e010      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8005b66:	bf00      	nop
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	00f42400 	.word	0x00f42400
 8005b70:	016e3600 	.word	0x016e3600
 8005b74:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b78:	4b5f      	ldr	r3, [pc, #380]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b80:	4a5e      	ldr	r2, [pc, #376]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005b88:	4b5b      	ldr	r3, [pc, #364]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	099b      	lsrs	r3, r3, #6
 8005b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005b9a:	4b57      	ldr	r3, [pc, #348]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	0f1b      	lsrs	r3, r3, #28
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	61fb      	str	r3, [r7, #28]
          break;
 8005bac:	e00f      	b.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bae:	4b52      	ldr	r3, [pc, #328]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bba:	d102      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8005bbc:	4b50      	ldr	r3, [pc, #320]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005bbe:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005bc0:	e005      	b.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8005bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005bc4:	61fb      	str	r3, [r7, #28]
          break;
 8005bc6:	e002      	b.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
          break;
 8005bcc:	bf00      	nop
        }
      }
      break;
 8005bce:	e08b      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005bd0:	4b49      	ldr	r3, [pc, #292]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bd6:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005be2:	d06f      	beq.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005bea:	d878      	bhi.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf2:	d03c      	beq.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bfa:	d870      	bhi.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c08:	d169      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8005c0c:	61fb      	str	r3, [r7, #28]
          break;
 8005c0e:	e069      	b.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c10:	4b39      	ldr	r3, [pc, #228]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c1c:	d109      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c1e:	4b36      	ldr	r3, [pc, #216]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c28:	4a35      	ldr	r2, [pc, #212]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	e008      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c32:	4b31      	ldr	r3, [pc, #196]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c42:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c44:	4b2c      	ldr	r3, [pc, #176]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c4a:	099b      	lsrs	r3, r3, #6
 8005c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c58:	4b27      	ldr	r3, [pc, #156]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5e:	0f1b      	lsrs	r3, r3, #28
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6a:	61fb      	str	r3, [r7, #28]
          break;
 8005c6c:	e03a      	b.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c6e:	4b22      	ldr	r3, [pc, #136]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c7a:	d108      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c84:	4a1e      	ldr	r2, [pc, #120]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	e007      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c96:	4a19      	ldr	r2, [pc, #100]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005c9e:	4b16      	ldr	r3, [pc, #88]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	099b      	lsrs	r3, r3, #6
 8005ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	fb02 f303 	mul.w	r3, r2, r3
 8005cae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005cb0:	4b11      	ldr	r3, [pc, #68]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	0f1b      	lsrs	r3, r3, #28
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	61fb      	str	r3, [r7, #28]
          break;
 8005cc2:	e00f      	b.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd0:	d102      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8005cd4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005cd6:	e005      	b.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8005cd8:	4b08      	ldr	r3, [pc, #32]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8005cda:	61fb      	str	r3, [r7, #28]
          break;
 8005cdc:	e002      	b.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
          break;
 8005ce2:	bf00      	nop
        }
      }
      break;
 8005ce4:	e000      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  default:
    {
       break;
 8005ce6:	bf00      	nop
    }
  }
  return frequency;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3724      	adds	r7, #36	@ 0x24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	00f42400 	.word	0x00f42400
 8005d00:	016e3600 	.word	0x016e3600
 8005d04:	00bb8000 	.word	0x00bb8000

08005d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d0c:	b0a6      	sub	sp, #152	@ 0x98
 8005d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d2e:	4bc8      	ldr	r3, [pc, #800]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b0c      	cmp	r3, #12
 8005d38:	f200 817e 	bhi.w	8006038 <HAL_RCC_GetSysClockFreq+0x330>
 8005d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d42:	bf00      	nop
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08006039 	.word	0x08006039
 8005d4c:	08006039 	.word	0x08006039
 8005d50:	08006039 	.word	0x08006039
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	08006039 	.word	0x08006039
 8005d5c:	08006039 	.word	0x08006039
 8005d60:	08006039 	.word	0x08006039
 8005d64:	08005d89 	.word	0x08005d89
 8005d68:	08006039 	.word	0x08006039
 8005d6c:	08006039 	.word	0x08006039
 8005d70:	08006039 	.word	0x08006039
 8005d74:	08005ef3 	.word	0x08005ef3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d78:	4bb6      	ldr	r3, [pc, #728]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005d7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8005d7e:	e15f      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d80:	4bb5      	ldr	r3, [pc, #724]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x350>)
 8005d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005d86:	e15b      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d88:	4bb1      	ldr	r3, [pc, #708]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d94:	4bae      	ldr	r3, [pc, #696]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d031      	beq.n	8005e04 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005da0:	4bab      	ldr	r3, [pc, #684]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	099b      	lsrs	r3, r3, #6
 8005da6:	2200      	movs	r2, #0
 8005da8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005daa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005db4:	2300      	movs	r3, #0
 8005db6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005db8:	4ba7      	ldr	r3, [pc, #668]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x350>)
 8005dba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005dbe:	462a      	mov	r2, r5
 8005dc0:	fb03 f202 	mul.w	r2, r3, r2
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	4413      	add	r3, r2
 8005dce:	4aa2      	ldr	r2, [pc, #648]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x350>)
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	fba1 1202 	umull	r1, r2, r1, r2
 8005dd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dd8:	460a      	mov	r2, r1
 8005dda:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005ddc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005dde:	4413      	add	r3, r2
 8005de0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005de6:	2200      	movs	r2, #0
 8005de8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005dec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005df0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005df4:	f7fa fa06 	bl	8000204 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e02:	e064      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e04:	4b92      	ldr	r3, [pc, #584]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	099b      	lsrs	r3, r3, #6
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e0e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e18:	2300      	movs	r3, #0
 8005e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e1c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005e20:	4622      	mov	r2, r4
 8005e22:	462b      	mov	r3, r5
 8005e24:	f04f 0000 	mov.w	r0, #0
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	0159      	lsls	r1, r3, #5
 8005e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e32:	0150      	lsls	r0, r2, #5
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4621      	mov	r1, r4
 8005e3a:	1a51      	subs	r1, r2, r1
 8005e3c:	6139      	str	r1, [r7, #16]
 8005e3e:	4629      	mov	r1, r5
 8005e40:	eb63 0301 	sbc.w	r3, r3, r1
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e52:	4659      	mov	r1, fp
 8005e54:	018b      	lsls	r3, r1, #6
 8005e56:	4651      	mov	r1, sl
 8005e58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	018a      	lsls	r2, r1, #6
 8005e60:	4651      	mov	r1, sl
 8005e62:	ebb2 0801 	subs.w	r8, r2, r1
 8005e66:	4659      	mov	r1, fp
 8005e68:	eb63 0901 	sbc.w	r9, r3, r1
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e80:	4690      	mov	r8, r2
 8005e82:	4699      	mov	r9, r3
 8005e84:	4623      	mov	r3, r4
 8005e86:	eb18 0303 	adds.w	r3, r8, r3
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	462b      	mov	r3, r5
 8005e8e:	eb49 0303 	adc.w	r3, r9, r3
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	028b      	lsls	r3, r1, #10
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005eaa:	4621      	mov	r1, r4
 8005eac:	028a      	lsls	r2, r1, #10
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eba:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ebc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ec0:	f7fa f9a0 	bl	8000204 <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4613      	mov	r3, r2
 8005eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ece:	4b60      	ldr	r3, [pc, #384]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	0c1b      	lsrs	r3, r3, #16
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	3301      	adds	r3, #1
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8005ee0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005ef0:	e0a6      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ef2:	4b57      	ldr	r3, [pc, #348]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005efa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005efe:	4b54      	ldr	r3, [pc, #336]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d02a      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f0a:	4b51      	ldr	r3, [pc, #324]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	099b      	lsrs	r3, r3, #6
 8005f10:	2200      	movs	r2, #0
 8005f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f20:	fb03 f201 	mul.w	r2, r3, r1
 8005f24:	2300      	movs	r3, #0
 8005f26:	fb00 f303 	mul.w	r3, r0, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x350>)
 8005f2e:	fba0 1202 	umull	r1, r2, r0, r2
 8005f32:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f34:	460a      	mov	r2, r1
 8005f36:	673a      	str	r2, [r7, #112]	@ 0x70
 8005f38:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005f3a:	4413      	add	r3, r2
 8005f3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f42:	2200      	movs	r2, #0
 8005f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f46:	637a      	str	r2, [r7, #52]	@ 0x34
 8005f48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005f4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005f50:	f7fa f958 	bl	8000204 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f5e:	e05b      	b.n	8006018 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f60:	4b3b      	ldr	r3, [pc, #236]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	099b      	lsrs	r3, r3, #6
 8005f66:	2200      	movs	r2, #0
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	623b      	str	r3, [r7, #32]
 8005f74:	2300      	movs	r3, #0
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	f04f 0000 	mov.w	r0, #0
 8005f84:	f04f 0100 	mov.w	r1, #0
 8005f88:	0159      	lsls	r1, r3, #5
 8005f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f8e:	0150      	lsls	r0, r2, #5
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4641      	mov	r1, r8
 8005f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fa0:	f04f 0200 	mov.w	r2, #0
 8005fa4:	f04f 0300 	mov.w	r3, #0
 8005fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8005fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	00eb      	lsls	r3, r5, #3
 8005fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fca:	00e2      	lsls	r2, r4, #3
 8005fcc:	4614      	mov	r4, r2
 8005fce:	461d      	mov	r5, r3
 8005fd0:	4643      	mov	r3, r8
 8005fd2:	18e3      	adds	r3, r4, r3
 8005fd4:	603b      	str	r3, [r7, #0]
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	eb45 0303 	adc.w	r3, r5, r3
 8005fdc:	607b      	str	r3, [r7, #4]
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fea:	4629      	mov	r1, r5
 8005fec:	028b      	lsls	r3, r1, #10
 8005fee:	4621      	mov	r1, r4
 8005ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	028a      	lsls	r2, r1, #10
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006000:	2200      	movs	r2, #0
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	61fa      	str	r2, [r7, #28]
 8006006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800600a:	f7fa f8fb 	bl	8000204 <__aeabi_uldivmod>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4613      	mov	r3, r2
 8006014:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006018:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <HAL_RCC_GetSysClockFreq+0x348>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	0f1b      	lsrs	r3, r3, #28
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8006026:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800602a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800602e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006036:	e003      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006038:	4b06      	ldr	r3, [pc, #24]	@ (8006054 <HAL_RCC_GetSysClockFreq+0x34c>)
 800603a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800603e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006040:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006044:	4618      	mov	r0, r3
 8006046:	3798      	adds	r7, #152	@ 0x98
 8006048:	46bd      	mov	sp, r7
 800604a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800604e:	bf00      	nop
 8006050:	40023800 	.word	0x40023800
 8006054:	00f42400 	.word	0x00f42400
 8006058:	016e3600 	.word	0x016e3600

0800605c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e28d      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 8083 	beq.w	8006182 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800607c:	4b94      	ldr	r3, [pc, #592]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	2b04      	cmp	r3, #4
 8006086:	d019      	beq.n	80060bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006088:	4b91      	ldr	r3, [pc, #580]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006090:	2b08      	cmp	r3, #8
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006094:	4b8e      	ldr	r3, [pc, #568]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800609c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060a0:	d00c      	beq.n	80060bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060a2:	4b8b      	ldr	r3, [pc, #556]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d112      	bne.n	80060d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ae:	4b88      	ldr	r3, [pc, #544]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060ba:	d10b      	bne.n	80060d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060bc:	4b84      	ldr	r3, [pc, #528]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d05b      	beq.n	8006180 <HAL_RCC_OscConfig+0x124>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d157      	bne.n	8006180 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e25a      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060dc:	d106      	bne.n	80060ec <HAL_RCC_OscConfig+0x90>
 80060de:	4b7c      	ldr	r3, [pc, #496]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a7b      	ldr	r2, [pc, #492]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80060e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	e01d      	b.n	8006128 <HAL_RCC_OscConfig+0xcc>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060f4:	d10c      	bne.n	8006110 <HAL_RCC_OscConfig+0xb4>
 80060f6:	4b76      	ldr	r3, [pc, #472]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a75      	ldr	r2, [pc, #468]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80060fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	4b73      	ldr	r3, [pc, #460]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a72      	ldr	r2, [pc, #456]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	e00b      	b.n	8006128 <HAL_RCC_OscConfig+0xcc>
 8006110:	4b6f      	ldr	r3, [pc, #444]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a6e      	ldr	r2, [pc, #440]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	4b6c      	ldr	r3, [pc, #432]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a6b      	ldr	r2, [pc, #428]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d013      	beq.n	8006158 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fc ff86 	bl	8003040 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006138:	f7fc ff82 	bl	8003040 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b64      	cmp	r3, #100	@ 0x64
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e21f      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614a:	4b61      	ldr	r3, [pc, #388]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0f0      	beq.n	8006138 <HAL_RCC_OscConfig+0xdc>
 8006156:	e014      	b.n	8006182 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fc ff72 	bl	8003040 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006160:	f7fc ff6e 	bl	8003040 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b64      	cmp	r3, #100	@ 0x64
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e20b      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006172:	4b57      	ldr	r3, [pc, #348]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x104>
 800617e:	e000      	b.n	8006182 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d06f      	beq.n	800626e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800618e:	4b50      	ldr	r3, [pc, #320]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	2b00      	cmp	r3, #0
 8006198:	d017      	beq.n	80061ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800619a:	4b4d      	ldr	r3, [pc, #308]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d105      	bne.n	80061b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061a6:	4b4a      	ldr	r3, [pc, #296]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061b2:	4b47      	ldr	r3, [pc, #284]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061ba:	2b0c      	cmp	r3, #12
 80061bc:	d11c      	bne.n	80061f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061be:	4b44      	ldr	r3, [pc, #272]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d116      	bne.n	80061f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ca:	4b41      	ldr	r3, [pc, #260]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_RCC_OscConfig+0x186>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d001      	beq.n	80061e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e1d3      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e2:	4b3b      	ldr	r3, [pc, #236]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4937      	ldr	r1, [pc, #220]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f6:	e03a      	b.n	800626e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006200:	4b34      	ldr	r3, [pc, #208]	@ (80062d4 <HAL_RCC_OscConfig+0x278>)
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006206:	f7fc ff1b 	bl	8003040 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800620e:	f7fc ff17 	bl	8003040 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e1b4      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006220:	4b2b      	ldr	r3, [pc, #172]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622c:	4b28      	ldr	r3, [pc, #160]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4925      	ldr	r1, [pc, #148]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]
 8006240:	e015      	b.n	800626e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006242:	4b24      	ldr	r3, [pc, #144]	@ (80062d4 <HAL_RCC_OscConfig+0x278>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006248:	f7fc fefa 	bl	8003040 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006250:	f7fc fef6 	bl	8003040 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e193      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006262:	4b1b      	ldr	r3, [pc, #108]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d036      	beq.n	80062e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d016      	beq.n	80062b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006282:	4b15      	ldr	r3, [pc, #84]	@ (80062d8 <HAL_RCC_OscConfig+0x27c>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006288:	f7fc feda 	bl	8003040 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006290:	f7fc fed6 	bl	8003040 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e173      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062a2:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <HAL_RCC_OscConfig+0x274>)
 80062a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0x234>
 80062ae:	e01b      	b.n	80062e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062b0:	4b09      	ldr	r3, [pc, #36]	@ (80062d8 <HAL_RCC_OscConfig+0x27c>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b6:	f7fc fec3 	bl	8003040 <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062bc:	e00e      	b.n	80062dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062be:	f7fc febf 	bl	8003040 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d907      	bls.n	80062dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e15c      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
 80062d0:	40023800 	.word	0x40023800
 80062d4:	42470000 	.word	0x42470000
 80062d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062dc:	4b8a      	ldr	r3, [pc, #552]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 80062de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ea      	bne.n	80062be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8097 	beq.w	8006424 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062fa:	4b83      	ldr	r3, [pc, #524]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	4b7f      	ldr	r3, [pc, #508]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	4a7e      	ldr	r2, [pc, #504]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006314:	6413      	str	r3, [r2, #64]	@ 0x40
 8006316:	4b7c      	ldr	r3, [pc, #496]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006322:	2301      	movs	r3, #1
 8006324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006326:	4b79      	ldr	r3, [pc, #484]	@ (800650c <HAL_RCC_OscConfig+0x4b0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800632e:	2b00      	cmp	r3, #0
 8006330:	d118      	bne.n	8006364 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006332:	4b76      	ldr	r3, [pc, #472]	@ (800650c <HAL_RCC_OscConfig+0x4b0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a75      	ldr	r2, [pc, #468]	@ (800650c <HAL_RCC_OscConfig+0x4b0>)
 8006338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800633c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800633e:	f7fc fe7f 	bl	8003040 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006346:	f7fc fe7b 	bl	8003040 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e118      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006358:	4b6c      	ldr	r3, [pc, #432]	@ (800650c <HAL_RCC_OscConfig+0x4b0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d106      	bne.n	800637a <HAL_RCC_OscConfig+0x31e>
 800636c:	4b66      	ldr	r3, [pc, #408]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 800636e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006370:	4a65      	ldr	r2, [pc, #404]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006372:	f043 0301 	orr.w	r3, r3, #1
 8006376:	6713      	str	r3, [r2, #112]	@ 0x70
 8006378:	e01c      	b.n	80063b4 <HAL_RCC_OscConfig+0x358>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b05      	cmp	r3, #5
 8006380:	d10c      	bne.n	800639c <HAL_RCC_OscConfig+0x340>
 8006382:	4b61      	ldr	r3, [pc, #388]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006386:	4a60      	ldr	r2, [pc, #384]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006388:	f043 0304 	orr.w	r3, r3, #4
 800638c:	6713      	str	r3, [r2, #112]	@ 0x70
 800638e:	4b5e      	ldr	r3, [pc, #376]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006392:	4a5d      	ldr	r2, [pc, #372]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	6713      	str	r3, [r2, #112]	@ 0x70
 800639a:	e00b      	b.n	80063b4 <HAL_RCC_OscConfig+0x358>
 800639c:	4b5a      	ldr	r3, [pc, #360]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 800639e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a0:	4a59      	ldr	r2, [pc, #356]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a8:	4b57      	ldr	r3, [pc, #348]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ac:	4a56      	ldr	r2, [pc, #344]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 80063ae:	f023 0304 	bic.w	r3, r3, #4
 80063b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d015      	beq.n	80063e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fc fe40 	bl	8003040 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c2:	e00a      	b.n	80063da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c4:	f7fc fe3c 	bl	8003040 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e0d7      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063da:	4b4b      	ldr	r3, [pc, #300]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0ee      	beq.n	80063c4 <HAL_RCC_OscConfig+0x368>
 80063e6:	e014      	b.n	8006412 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fc fe2a 	bl	8003040 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063f0:	f7fc fe26 	bl	8003040 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e0c1      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006406:	4b40      	ldr	r3, [pc, #256]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1ee      	bne.n	80063f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d105      	bne.n	8006424 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006418:	4b3b      	ldr	r3, [pc, #236]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 800641a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641c:	4a3a      	ldr	r2, [pc, #232]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 800641e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006422:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80ad 	beq.w	8006588 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800642e:	4b36      	ldr	r3, [pc, #216]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 030c 	and.w	r3, r3, #12
 8006436:	2b08      	cmp	r3, #8
 8006438:	d060      	beq.n	80064fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d145      	bne.n	80064ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006442:	4b33      	ldr	r3, [pc, #204]	@ (8006510 <HAL_RCC_OscConfig+0x4b4>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006448:	f7fc fdfa 	bl	8003040 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006450:	f7fc fdf6 	bl	8003040 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e093      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006462:	4b29      	ldr	r3, [pc, #164]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	019b      	lsls	r3, r3, #6
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	3b01      	subs	r3, #1
 8006488:	041b      	lsls	r3, r3, #16
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	061b      	lsls	r3, r3, #24
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006498:	071b      	lsls	r3, r3, #28
 800649a:	491b      	ldr	r1, [pc, #108]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 800649c:	4313      	orrs	r3, r2
 800649e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064a0:	4b1b      	ldr	r3, [pc, #108]	@ (8006510 <HAL_RCC_OscConfig+0x4b4>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a6:	f7fc fdcb 	bl	8003040 <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ae:	f7fc fdc7 	bl	8003040 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e064      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064c0:	4b11      	ldr	r3, [pc, #68]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCC_OscConfig+0x452>
 80064cc:	e05c      	b.n	8006588 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ce:	4b10      	ldr	r3, [pc, #64]	@ (8006510 <HAL_RCC_OscConfig+0x4b4>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fc fdb4 	bl	8003040 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fc fdb0 	bl	8003040 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e04d      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ee:	4b06      	ldr	r3, [pc, #24]	@ (8006508 <HAL_RCC_OscConfig+0x4ac>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x480>
 80064fa:	e045      	b.n	8006588 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d107      	bne.n	8006514 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e040      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
 8006508:	40023800 	.word	0x40023800
 800650c:	40007000 	.word	0x40007000
 8006510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006514:	4b1f      	ldr	r3, [pc, #124]	@ (8006594 <HAL_RCC_OscConfig+0x538>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d030      	beq.n	8006584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800652c:	429a      	cmp	r2, r3
 800652e:	d129      	bne.n	8006584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d122      	bne.n	8006584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006544:	4013      	ands	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800654a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800654c:	4293      	cmp	r3, r2
 800654e:	d119      	bne.n	8006584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	3b01      	subs	r3, #1
 800655e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006560:	429a      	cmp	r2, r3
 8006562:	d10f      	bne.n	8006584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006570:	429a      	cmp	r2, r3
 8006572:	d107      	bne.n	8006584 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006580:	429a      	cmp	r2, r3
 8006582:	d001      	beq.n	8006588 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40023800 	.word	0x40023800

08006598 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e10c      	b.n	80067d4 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb ff6a 	bl	80024a8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f903 	bl	80067e8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f938 	bl	8006858 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d030      	beq.n	8006652 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f975 	bl	80068e0 <SAI_GetInputClock>
 80065f6:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	025b      	lsls	r3, r3, #9
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a72      	ldr	r2, [pc, #456]	@ (80067dc <HAL_SAI_Init+0x244>)
 8006614:	fba2 2303 	umull	r2, r3, r2, r3
 8006618:	08da      	lsrs	r2, r3, #3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	4b6e      	ldr	r3, [pc, #440]	@ (80067dc <HAL_SAI_Init+0x244>)
 8006622:	fba3 2301 	umull	r2, r3, r3, r1
 8006626:	08da      	lsrs	r2, r3, #3
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	1aca      	subs	r2, r1, r3
 8006632:	2a08      	cmp	r2, #8
 8006634:	d904      	bls.n	8006640 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006644:	2b04      	cmp	r3, #4
 8006646:	d104      	bne.n	8006652 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	085a      	lsrs	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_SAI_Init+0xca>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d109      	bne.n	8006676 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_SAI_Init+0xd6>
 800666a:	2300      	movs	r3, #0
 800666c:	e001      	b.n	8006672 <HAL_SAI_Init+0xda>
 800666e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e008      	b.n	8006688 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	2b01      	cmp	r3, #1
 800667c:	d102      	bne.n	8006684 <HAL_SAI_Init+0xec>
 800667e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006682:	e000      	b.n	8006686 <HAL_SAI_Init+0xee>
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d811      	bhi.n	80066b4 <HAL_SAI_Init+0x11c>
 8006690:	2b02      	cmp	r3, #2
 8006692:	d20b      	bcs.n	80066ac <HAL_SAI_Init+0x114>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_SAI_Init+0x106>
 8006698:	2b01      	cmp	r3, #1
 800669a:	d003      	beq.n	80066a4 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800669c:	e00a      	b.n	80066b4 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
    break;
 80066a2:	e008      	b.n	80066b6 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80066a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066a8:	613b      	str	r3, [r7, #16]
    break;
 80066aa:	e004      	b.n	80066b6 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80066ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80066b0:	613b      	str	r3, [r7, #16]
    break;
 80066b2:	e000      	b.n	80066b6 <HAL_SAI_Init+0x11e>
      break;
 80066b4:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6819      	ldr	r1, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b47      	ldr	r3, [pc, #284]	@ (80067e0 <HAL_SAI_Init+0x248>)
 80066c2:	400b      	ands	r3, r1
 80066c4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6819      	ldr	r1, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80066da:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e0:	431a      	orrs	r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 80066ee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80066fa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	051b      	lsls	r3, r3, #20
 8006702:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800671a:	f023 030f 	bic.w	r3, r3, #15
 800671e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6899      	ldr	r1, [r3, #8]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	4b26      	ldr	r3, [pc, #152]	@ (80067e4 <HAL_SAI_Init+0x24c>)
 800674a:	400b      	ands	r3, r1
 800674c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6899      	ldr	r1, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006758:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800675e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8006764:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 800676a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006770:	3b01      	subs	r3, #1
 8006772:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006774:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68d9      	ldr	r1, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800678c:	400b      	ands	r3, r1
 800678e:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68d9      	ldr	r1, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800679e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80067a6:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ac:	3b01      	subs	r3, #1
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	cccccccd 	.word	0xcccccccd
 80067e0:	ff05c010 	.word	0xff05c010
 80067e4:	fff88000 	.word	0xfff88000

080067e8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80067f0:	4b17      	ldr	r3, [pc, #92]	@ (8006850 <SAI_Disable+0x68>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a17      	ldr	r2, [pc, #92]	@ (8006854 <SAI_Disable+0x6c>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	0b1b      	lsrs	r3, r3, #12
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006812:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	1e5a      	subs	r2, r3, #1
 8006818:	60fa      	str	r2, [r7, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006824:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	72fb      	strb	r3, [r7, #11]
      break;
 8006832:	e006      	b.n	8006842 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e8      	bne.n	8006814 <SAI_Disable+0x2c>

  return status;
 8006842:	7afb      	ldrb	r3, [r7, #11]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	20000000 	.word	0x20000000
 8006854:	95cbec1b 	.word	0x95cbec1b

08006858 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d00c      	beq.n	8006882 <SAI_BlockSynchroConfig+0x2a>
 8006868:	2b02      	cmp	r3, #2
 800686a:	d80d      	bhi.n	8006888 <SAI_BlockSynchroConfig+0x30>
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <SAI_BlockSynchroConfig+0x1e>
 8006870:	2b01      	cmp	r3, #1
 8006872:	d003      	beq.n	800687c <SAI_BlockSynchroConfig+0x24>
 8006874:	e008      	b.n	8006888 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
      break;
 800687a:	e008      	b.n	800688e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800687c:	2310      	movs	r3, #16
 800687e:	60fb      	str	r3, [r7, #12]
      break;
 8006880:	e005      	b.n	800688e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006882:	2320      	movs	r3, #32
 8006884:	60fb      	str	r3, [r7, #12]
      break;
 8006886:	e002      	b.n	800688e <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	60fb      	str	r3, [r7, #12]
      break;
 800688c:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b03      	cmp	r3, #3
 8006894:	d103      	bne.n	800689e <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a0b      	ldr	r2, [pc, #44]	@ (80068d0 <SAI_BlockSynchroConfig+0x78>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d004      	beq.n	80068b2 <SAI_BlockSynchroConfig+0x5a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a09      	ldr	r2, [pc, #36]	@ (80068d4 <SAI_BlockSynchroConfig+0x7c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d103      	bne.n	80068ba <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 80068b2:	4a09      	ldr	r2, [pc, #36]	@ (80068d8 <SAI_BlockSynchroConfig+0x80>)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e003      	b.n	80068c2 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80068ba:	4a08      	ldr	r2, [pc, #32]	@ (80068dc <SAI_BlockSynchroConfig+0x84>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40015804 	.word	0x40015804
 80068d4:	40015824 	.word	0x40015824
 80068d8:	40015800 	.word	0x40015800
 80068dc:	40015c00 	.word	0x40015c00

080068e0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a0a      	ldr	r2, [pc, #40]	@ (800691c <SAI_GetInputClock+0x3c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <SAI_GetInputClock+0x20>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a09      	ldr	r2, [pc, #36]	@ (8006920 <SAI_GetInputClock+0x40>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d104      	bne.n	800690a <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006900:	2004      	movs	r0, #4
 8006902:	f7fe ffb7 	bl	8005874 <HAL_RCCEx_GetPeriphCLKFreq>
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	e003      	b.n	8006912 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800690a:	2008      	movs	r0, #8
 800690c:	f7fe ffb2 	bl	8005874 <HAL_RCCEx_GetPeriphCLKFreq>
 8006910:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8006912:	68fb      	ldr	r3, [r7, #12]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40015804 	.word	0x40015804
 8006920:	40015824 	.word	0x40015824

08006924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e07b      	b.n	8006a2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	d108      	bne.n	8006950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006946:	d009      	beq.n	800695c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	61da      	str	r2, [r3, #28]
 800694e:	e005      	b.n	800695c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb fe94 	bl	80026a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006992:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e0:	ea42 0103 	orr.w	r1, r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	0c1b      	lsrs	r3, r3, #16
 80069fa:	f003 0104 	and.w	r1, r3, #4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	f003 0210 	and.w	r2, r3, #16
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69da      	ldr	r2, [r3, #28]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b088      	sub	sp, #32
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_SPI_Transmit+0x22>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e12d      	b.n	8006cb4 <HAL_SPI_Transmit+0x27e>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a60:	f7fc faee 	bl	8003040 <HAL_GetTick>
 8006a64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a66:	88fb      	ldrh	r3, [r7, #6]
 8006a68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d002      	beq.n	8006a7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a76:	2302      	movs	r3, #2
 8006a78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a7a:	e116      	b.n	8006caa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_SPI_Transmit+0x52>
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a8c:	e10d      	b.n	8006caa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2203      	movs	r2, #3
 8006a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	88fa      	ldrh	r2, [r7, #6]
 8006aa6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	88fa      	ldrh	r2, [r7, #6]
 8006aac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ad4:	d10f      	bne.n	8006af6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006af4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	2b40      	cmp	r3, #64	@ 0x40
 8006b02:	d007      	beq.n	8006b14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1c:	d14f      	bne.n	8006bbe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <HAL_SPI_Transmit+0xf6>
 8006b26:	8afb      	ldrh	r3, [r7, #22]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d142      	bne.n	8006bb2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b30:	881a      	ldrh	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3c:	1c9a      	adds	r2, r3, #2
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b50:	e02f      	b.n	8006bb2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d112      	bne.n	8006b86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b64:	881a      	ldrh	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b70:	1c9a      	adds	r2, r3, #2
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b84:	e015      	b.n	8006bb2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b86:	f7fc fa5b 	bl	8003040 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d803      	bhi.n	8006b9e <HAL_SPI_Transmit+0x168>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d102      	bne.n	8006ba4 <HAL_SPI_Transmit+0x16e>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006bb0:	e07b      	b.n	8006caa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ca      	bne.n	8006b52 <HAL_SPI_Transmit+0x11c>
 8006bbc:	e050      	b.n	8006c60 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_SPI_Transmit+0x196>
 8006bc6:	8afb      	ldrh	r3, [r7, #22]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d144      	bne.n	8006c56 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	7812      	ldrb	r2, [r2, #0]
 8006bd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006bf2:	e030      	b.n	8006c56 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d113      	bne.n	8006c2a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c28:	e015      	b.n	8006c56 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c2a:	f7fc fa09 	bl	8003040 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d803      	bhi.n	8006c42 <HAL_SPI_Transmit+0x20c>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d102      	bne.n	8006c48 <HAL_SPI_Transmit+0x212>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d106      	bne.n	8006c56 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006c54:	e029      	b.n	8006caa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1c9      	bne.n	8006bf4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 fa61 	bl	800712c <SPI_EndRxTxTransaction>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10a      	bne.n	8006c94 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e003      	b.n	8006caa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006cb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3720      	adds	r7, #32
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08c      	sub	sp, #48	@ 0x30
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_SPI_TransmitReceive+0x26>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e198      	b.n	8007014 <HAL_SPI_TransmitReceive+0x358>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cea:	f7fc f9a9 	bl	8003040 <HAL_GetTick>
 8006cee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d00:	887b      	ldrh	r3, [r7, #2]
 8006d02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d00f      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x70>
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d12:	d107      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x68>
 8006d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d003      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006d2a:	e16d      	b.n	8007008 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_SPI_TransmitReceive+0x82>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_SPI_TransmitReceive+0x82>
 8006d38:	887b      	ldrh	r3, [r7, #2]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006d44:	e160      	b.n	8007008 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d003      	beq.n	8006d5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2205      	movs	r2, #5
 8006d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	887a      	ldrh	r2, [r7, #2]
 8006d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	887a      	ldrh	r2, [r7, #2]
 8006d70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	887a      	ldrh	r2, [r7, #2]
 8006d7c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	887a      	ldrh	r2, [r7, #2]
 8006d82:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9a:	2b40      	cmp	r3, #64	@ 0x40
 8006d9c:	d007      	beq.n	8006dae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006db6:	d17c      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_SPI_TransmitReceive+0x10a>
 8006dc0:	8b7b      	ldrh	r3, [r7, #26]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d16a      	bne.n	8006e9c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	881a      	ldrh	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd6:	1c9a      	adds	r2, r3, #2
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dea:	e057      	b.n	8006e9c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d11b      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x176>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d016      	beq.n	8006e32 <HAL_SPI_TransmitReceive+0x176>
 8006e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d113      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0e:	881a      	ldrh	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1a:	1c9a      	adds	r2, r3, #2
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d119      	bne.n	8006e74 <HAL_SPI_TransmitReceive+0x1b8>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d014      	beq.n	8006e74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e54:	b292      	uxth	r2, r2
 8006e56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e70:	2301      	movs	r3, #1
 8006e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e74:	f7fc f8e4 	bl	8003040 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d80b      	bhi.n	8006e9c <HAL_SPI_TransmitReceive+0x1e0>
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8a:	d007      	beq.n	8006e9c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006e9a:	e0b5      	b.n	8007008 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1a2      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x130>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d19d      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x130>
 8006eb0:	e080      	b.n	8006fb4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x204>
 8006eba:	8b7b      	ldrh	r3, [r7, #26]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d16f      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	330c      	adds	r3, #12
 8006eca:	7812      	ldrb	r2, [r2, #0]
 8006ecc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ee6:	e05b      	b.n	8006fa0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d11c      	bne.n	8006f30 <HAL_SPI_TransmitReceive+0x274>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d017      	beq.n	8006f30 <HAL_SPI_TransmitReceive+0x274>
 8006f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d114      	bne.n	8006f30 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	7812      	ldrb	r2, [r2, #0]
 8006f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d119      	bne.n	8006f72 <HAL_SPI_TransmitReceive+0x2b6>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d014      	beq.n	8006f72 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f52:	b2d2      	uxtb	r2, r2
 8006f54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f72:	f7fc f865 	bl	8003040 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d803      	bhi.n	8006f8a <HAL_SPI_TransmitReceive+0x2ce>
 8006f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d102      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x2d4>
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d107      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006f9e:	e033      	b.n	8007008 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d19e      	bne.n	8006ee8 <HAL_SPI_TransmitReceive+0x22c>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d199      	bne.n	8006ee8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f8b7 	bl	800712c <SPI_EndRxTxTransaction>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006fd0:	e01a      	b.n	8007008 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	e003      	b.n	8007008 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007010:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007014:	4618      	mov	r0, r3
 8007016:	3730      	adds	r7, #48	@ 0x30
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	603b      	str	r3, [r7, #0]
 8007028:	4613      	mov	r3, r2
 800702a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800702c:	f7fc f808 	bl	8003040 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4413      	add	r3, r2
 800703a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800703c:	f7fc f800 	bl	8003040 <HAL_GetTick>
 8007040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007042:	4b39      	ldr	r3, [pc, #228]	@ (8007128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	015b      	lsls	r3, r3, #5
 8007048:	0d1b      	lsrs	r3, r3, #20
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	fb02 f303 	mul.w	r3, r2, r3
 8007050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007052:	e054      	b.n	80070fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705a:	d050      	beq.n	80070fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800705c:	f7fb fff0 	bl	8003040 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	429a      	cmp	r2, r3
 800706a:	d902      	bls.n	8007072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d13d      	bne.n	80070ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800708a:	d111      	bne.n	80070b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007094:	d004      	beq.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800709e:	d107      	bne.n	80070b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b8:	d10f      	bne.n	80070da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e017      	b.n	800711e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4013      	ands	r3, r2
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	429a      	cmp	r2, r3
 800710c:	bf0c      	ite	eq
 800710e:	2301      	moveq	r3, #1
 8007110:	2300      	movne	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	429a      	cmp	r2, r3
 800711a:	d19b      	bne.n	8007054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000000 	.word	0x20000000

0800712c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af02      	add	r7, sp, #8
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2201      	movs	r2, #1
 8007140:	2102      	movs	r1, #2
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7ff ff6a 	bl	800701c <SPI_WaitFlagStateUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d007      	beq.n	800715e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007152:	f043 0220 	orr.w	r2, r3, #32
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e032      	b.n	80071c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800715e:	4b1b      	ldr	r3, [pc, #108]	@ (80071cc <SPI_EndRxTxTransaction+0xa0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1b      	ldr	r2, [pc, #108]	@ (80071d0 <SPI_EndRxTxTransaction+0xa4>)
 8007164:	fba2 2303 	umull	r2, r3, r2, r3
 8007168:	0d5b      	lsrs	r3, r3, #21
 800716a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800717c:	d112      	bne.n	80071a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2200      	movs	r2, #0
 8007186:	2180      	movs	r1, #128	@ 0x80
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff ff47 	bl	800701c <SPI_WaitFlagStateUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d016      	beq.n	80071c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007198:	f043 0220 	orr.w	r2, r3, #32
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e00f      	b.n	80071c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ba:	2b80      	cmp	r3, #128	@ 0x80
 80071bc:	d0f2      	beq.n	80071a4 <SPI_EndRxTxTransaction+0x78>
 80071be:	e000      	b.n	80071c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80071c0:	bf00      	nop
  }

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20000000 	.word	0x20000000
 80071d0:	165e9f81 	.word	0x165e9f81

080071d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e041      	b.n	800726a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7fb fdac 	bl	8002d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f000 fabc 	bl	8007790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e041      	b.n	8007308 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f839 	bl	8007310 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f000 fa6d 	bl	8007790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e041      	b.n	80073ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7fb fd26 	bl	8002d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f000 fa14 	bl	8007790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80073de:	2302      	movs	r3, #2
 80073e0:	e048      	b.n	8007474 <HAL_TIM_OC_ConfigChannel+0xb0>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b0c      	cmp	r3, #12
 80073ee:	d839      	bhi.n	8007464 <HAL_TIM_OC_ConfigChannel+0xa0>
 80073f0:	a201      	add	r2, pc, #4	@ (adr r2, 80073f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80073f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f6:	bf00      	nop
 80073f8:	0800742d 	.word	0x0800742d
 80073fc:	08007465 	.word	0x08007465
 8007400:	08007465 	.word	0x08007465
 8007404:	08007465 	.word	0x08007465
 8007408:	0800743b 	.word	0x0800743b
 800740c:	08007465 	.word	0x08007465
 8007410:	08007465 	.word	0x08007465
 8007414:	08007465 	.word	0x08007465
 8007418:	08007449 	.word	0x08007449
 800741c:	08007465 	.word	0x08007465
 8007420:	08007465 	.word	0x08007465
 8007424:	08007465 	.word	0x08007465
 8007428:	08007457 	.word	0x08007457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fa58 	bl	80078e8 <TIM_OC1_SetConfig>
      break;
 8007438:	e017      	b.n	800746a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fac1 	bl	80079c8 <TIM_OC2_SetConfig>
      break;
 8007446:	e010      	b.n	800746a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fb30 	bl	8007ab4 <TIM_OC3_SetConfig>
      break;
 8007454:	e009      	b.n	800746a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fb9d 	bl	8007b9c <TIM_OC4_SetConfig>
      break;
 8007462:	e002      	b.n	800746a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
      break;
 8007468:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007496:	2302      	movs	r3, #2
 8007498:	e0ae      	b.n	80075f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b0c      	cmp	r3, #12
 80074a6:	f200 809f 	bhi.w	80075e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074aa:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074e5 	.word	0x080074e5
 80074b4:	080075e9 	.word	0x080075e9
 80074b8:	080075e9 	.word	0x080075e9
 80074bc:	080075e9 	.word	0x080075e9
 80074c0:	08007525 	.word	0x08007525
 80074c4:	080075e9 	.word	0x080075e9
 80074c8:	080075e9 	.word	0x080075e9
 80074cc:	080075e9 	.word	0x080075e9
 80074d0:	08007567 	.word	0x08007567
 80074d4:	080075e9 	.word	0x080075e9
 80074d8:	080075e9 	.word	0x080075e9
 80074dc:	080075e9 	.word	0x080075e9
 80074e0:	080075a7 	.word	0x080075a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f9fc 	bl	80078e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0208 	orr.w	r2, r2, #8
 80074fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699a      	ldr	r2, [r3, #24]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0204 	bic.w	r2, r2, #4
 800750e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6999      	ldr	r1, [r3, #24]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	619a      	str	r2, [r3, #24]
      break;
 8007522:	e064      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fa4c 	bl	80079c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	699a      	ldr	r2, [r3, #24]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800753e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699a      	ldr	r2, [r3, #24]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800754e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6999      	ldr	r1, [r3, #24]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	021a      	lsls	r2, r3, #8
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	619a      	str	r2, [r3, #24]
      break;
 8007564:	e043      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 faa1 	bl	8007ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69da      	ldr	r2, [r3, #28]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0208 	orr.w	r2, r2, #8
 8007580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69da      	ldr	r2, [r3, #28]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0204 	bic.w	r2, r2, #4
 8007590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69d9      	ldr	r1, [r3, #28]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	61da      	str	r2, [r3, #28]
      break;
 80075a4:	e023      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 faf5 	bl	8007b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69da      	ldr	r2, [r3, #28]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69da      	ldr	r2, [r3, #28]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69d9      	ldr	r1, [r3, #28]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	021a      	lsls	r2, r3, #8
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	61da      	str	r2, [r3, #28]
      break;
 80075e6:	e002      	b.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
      break;
 80075ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_TIM_ConfigClockSource+0x1c>
 8007618:	2302      	movs	r3, #2
 800761a:	e0b4      	b.n	8007786 <HAL_TIM_ConfigClockSource+0x186>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800763a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007654:	d03e      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0xd4>
 8007656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800765a:	f200 8087 	bhi.w	800776c <HAL_TIM_ConfigClockSource+0x16c>
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007662:	f000 8086 	beq.w	8007772 <HAL_TIM_ConfigClockSource+0x172>
 8007666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800766a:	d87f      	bhi.n	800776c <HAL_TIM_ConfigClockSource+0x16c>
 800766c:	2b70      	cmp	r3, #112	@ 0x70
 800766e:	d01a      	beq.n	80076a6 <HAL_TIM_ConfigClockSource+0xa6>
 8007670:	2b70      	cmp	r3, #112	@ 0x70
 8007672:	d87b      	bhi.n	800776c <HAL_TIM_ConfigClockSource+0x16c>
 8007674:	2b60      	cmp	r3, #96	@ 0x60
 8007676:	d050      	beq.n	800771a <HAL_TIM_ConfigClockSource+0x11a>
 8007678:	2b60      	cmp	r3, #96	@ 0x60
 800767a:	d877      	bhi.n	800776c <HAL_TIM_ConfigClockSource+0x16c>
 800767c:	2b50      	cmp	r3, #80	@ 0x50
 800767e:	d03c      	beq.n	80076fa <HAL_TIM_ConfigClockSource+0xfa>
 8007680:	2b50      	cmp	r3, #80	@ 0x50
 8007682:	d873      	bhi.n	800776c <HAL_TIM_ConfigClockSource+0x16c>
 8007684:	2b40      	cmp	r3, #64	@ 0x40
 8007686:	d058      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x13a>
 8007688:	2b40      	cmp	r3, #64	@ 0x40
 800768a:	d86f      	bhi.n	800776c <HAL_TIM_ConfigClockSource+0x16c>
 800768c:	2b30      	cmp	r3, #48	@ 0x30
 800768e:	d064      	beq.n	800775a <HAL_TIM_ConfigClockSource+0x15a>
 8007690:	2b30      	cmp	r3, #48	@ 0x30
 8007692:	d86b      	bhi.n	800776c <HAL_TIM_ConfigClockSource+0x16c>
 8007694:	2b20      	cmp	r3, #32
 8007696:	d060      	beq.n	800775a <HAL_TIM_ConfigClockSource+0x15a>
 8007698:	2b20      	cmp	r3, #32
 800769a:	d867      	bhi.n	800776c <HAL_TIM_ConfigClockSource+0x16c>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d05c      	beq.n	800775a <HAL_TIM_ConfigClockSource+0x15a>
 80076a0:	2b10      	cmp	r3, #16
 80076a2:	d05a      	beq.n	800775a <HAL_TIM_ConfigClockSource+0x15a>
 80076a4:	e062      	b.n	800776c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076b6:	f000 fb41 	bl	8007d3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	609a      	str	r2, [r3, #8]
      break;
 80076d2:	e04f      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076e4:	f000 fb2a 	bl	8007d3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076f6:	609a      	str	r2, [r3, #8]
      break;
 80076f8:	e03c      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007706:	461a      	mov	r2, r3
 8007708:	f000 fa9e 	bl	8007c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2150      	movs	r1, #80	@ 0x50
 8007712:	4618      	mov	r0, r3
 8007714:	f000 faf7 	bl	8007d06 <TIM_ITRx_SetConfig>
      break;
 8007718:	e02c      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007726:	461a      	mov	r2, r3
 8007728:	f000 fabd 	bl	8007ca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2160      	movs	r1, #96	@ 0x60
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fae7 	bl	8007d06 <TIM_ITRx_SetConfig>
      break;
 8007738:	e01c      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007746:	461a      	mov	r2, r3
 8007748:	f000 fa7e 	bl	8007c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2140      	movs	r1, #64	@ 0x40
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fad7 	bl	8007d06 <TIM_ITRx_SetConfig>
      break;
 8007758:	e00c      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f000 face 	bl	8007d06 <TIM_ITRx_SetConfig>
      break;
 800776a:	e003      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
      break;
 8007770:	e000      	b.n	8007774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a46      	ldr	r2, [pc, #280]	@ (80078bc <TIM_Base_SetConfig+0x12c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d013      	beq.n	80077d0 <TIM_Base_SetConfig+0x40>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ae:	d00f      	beq.n	80077d0 <TIM_Base_SetConfig+0x40>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a43      	ldr	r2, [pc, #268]	@ (80078c0 <TIM_Base_SetConfig+0x130>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00b      	beq.n	80077d0 <TIM_Base_SetConfig+0x40>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a42      	ldr	r2, [pc, #264]	@ (80078c4 <TIM_Base_SetConfig+0x134>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d007      	beq.n	80077d0 <TIM_Base_SetConfig+0x40>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a41      	ldr	r2, [pc, #260]	@ (80078c8 <TIM_Base_SetConfig+0x138>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <TIM_Base_SetConfig+0x40>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a40      	ldr	r2, [pc, #256]	@ (80078cc <TIM_Base_SetConfig+0x13c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d108      	bne.n	80077e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a35      	ldr	r2, [pc, #212]	@ (80078bc <TIM_Base_SetConfig+0x12c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d02b      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f0:	d027      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a32      	ldr	r2, [pc, #200]	@ (80078c0 <TIM_Base_SetConfig+0x130>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d023      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a31      	ldr	r2, [pc, #196]	@ (80078c4 <TIM_Base_SetConfig+0x134>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d01f      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a30      	ldr	r2, [pc, #192]	@ (80078c8 <TIM_Base_SetConfig+0x138>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d01b      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a2f      	ldr	r2, [pc, #188]	@ (80078cc <TIM_Base_SetConfig+0x13c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d017      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a2e      	ldr	r2, [pc, #184]	@ (80078d0 <TIM_Base_SetConfig+0x140>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d013      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a2d      	ldr	r2, [pc, #180]	@ (80078d4 <TIM_Base_SetConfig+0x144>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00f      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2c      	ldr	r2, [pc, #176]	@ (80078d8 <TIM_Base_SetConfig+0x148>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00b      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a2b      	ldr	r2, [pc, #172]	@ (80078dc <TIM_Base_SetConfig+0x14c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d007      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a2a      	ldr	r2, [pc, #168]	@ (80078e0 <TIM_Base_SetConfig+0x150>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d003      	beq.n	8007842 <TIM_Base_SetConfig+0xb2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a29      	ldr	r2, [pc, #164]	@ (80078e4 <TIM_Base_SetConfig+0x154>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d108      	bne.n	8007854 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a10      	ldr	r2, [pc, #64]	@ (80078bc <TIM_Base_SetConfig+0x12c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d003      	beq.n	8007888 <TIM_Base_SetConfig+0xf8>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a12      	ldr	r2, [pc, #72]	@ (80078cc <TIM_Base_SetConfig+0x13c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d103      	bne.n	8007890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d105      	bne.n	80078ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f023 0201 	bic.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	611a      	str	r2, [r3, #16]
  }
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	40010000 	.word	0x40010000
 80078c0:	40000400 	.word	0x40000400
 80078c4:	40000800 	.word	0x40000800
 80078c8:	40000c00 	.word	0x40000c00
 80078cc:	40010400 	.word	0x40010400
 80078d0:	40014000 	.word	0x40014000
 80078d4:	40014400 	.word	0x40014400
 80078d8:	40014800 	.word	0x40014800
 80078dc:	40001800 	.word	0x40001800
 80078e0:	40001c00 	.word	0x40001c00
 80078e4:	40002000 	.word	0x40002000

080078e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	f023 0201 	bic.w	r2, r3, #1
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f023 0303 	bic.w	r3, r3, #3
 800791e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f023 0302 	bic.w	r3, r3, #2
 8007930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4313      	orrs	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a20      	ldr	r2, [pc, #128]	@ (80079c0 <TIM_OC1_SetConfig+0xd8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC1_SetConfig+0x64>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a1f      	ldr	r2, [pc, #124]	@ (80079c4 <TIM_OC1_SetConfig+0xdc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d10c      	bne.n	8007966 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0308 	bic.w	r3, r3, #8
 8007952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f023 0304 	bic.w	r3, r3, #4
 8007964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a15      	ldr	r2, [pc, #84]	@ (80079c0 <TIM_OC1_SetConfig+0xd8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <TIM_OC1_SetConfig+0x8e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a14      	ldr	r2, [pc, #80]	@ (80079c4 <TIM_OC1_SetConfig+0xdc>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d111      	bne.n	800799a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800797c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	621a      	str	r2, [r3, #32]
}
 80079b4:	bf00      	nop
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40010400 	.word	0x40010400

080079c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f023 0210 	bic.w	r2, r3, #16
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f023 0320 	bic.w	r3, r3, #32
 8007a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a22      	ldr	r2, [pc, #136]	@ (8007aac <TIM_OC2_SetConfig+0xe4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC2_SetConfig+0x68>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a21      	ldr	r2, [pc, #132]	@ (8007ab0 <TIM_OC2_SetConfig+0xe8>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10d      	bne.n	8007a4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a17      	ldr	r2, [pc, #92]	@ (8007aac <TIM_OC2_SetConfig+0xe4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d003      	beq.n	8007a5c <TIM_OC2_SetConfig+0x94>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a16      	ldr	r2, [pc, #88]	@ (8007ab0 <TIM_OC2_SetConfig+0xe8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d113      	bne.n	8007a84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40010400 	.word	0x40010400

08007ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0303 	bic.w	r3, r3, #3
 8007aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a21      	ldr	r2, [pc, #132]	@ (8007b94 <TIM_OC3_SetConfig+0xe0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d003      	beq.n	8007b1a <TIM_OC3_SetConfig+0x66>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a20      	ldr	r2, [pc, #128]	@ (8007b98 <TIM_OC3_SetConfig+0xe4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d10d      	bne.n	8007b36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a16      	ldr	r2, [pc, #88]	@ (8007b94 <TIM_OC3_SetConfig+0xe0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d003      	beq.n	8007b46 <TIM_OC3_SetConfig+0x92>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a15      	ldr	r2, [pc, #84]	@ (8007b98 <TIM_OC3_SetConfig+0xe4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d113      	bne.n	8007b6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	621a      	str	r2, [r3, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400

08007b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	031b      	lsls	r3, r3, #12
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a12      	ldr	r2, [pc, #72]	@ (8007c40 <TIM_OC4_SetConfig+0xa4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_OC4_SetConfig+0x68>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a11      	ldr	r2, [pc, #68]	@ (8007c44 <TIM_OC4_SetConfig+0xa8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d109      	bne.n	8007c18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	019b      	lsls	r3, r3, #6
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	621a      	str	r2, [r3, #32]
}
 8007c32:	bf00      	nop
 8007c34:	371c      	adds	r7, #28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40010400 	.word	0x40010400

08007c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f023 0201 	bic.w	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 030a 	bic.w	r3, r3, #10
 8007c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	621a      	str	r2, [r3, #32]
}
 8007c9a:	bf00      	nop
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b087      	sub	sp, #28
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	f023 0210 	bic.w	r2, r3, #16
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	031b      	lsls	r3, r3, #12
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f043 0307 	orr.w	r3, r3, #7
 8007d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	609a      	str	r2, [r3, #8]
}
 8007d30:	bf00      	nop
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	021a      	lsls	r2, r3, #8
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	609a      	str	r2, [r3, #8]
}
 8007d70:	bf00      	nop
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d101      	bne.n	8007d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d90:	2302      	movs	r3, #2
 8007d92:	e05a      	b.n	8007e4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a21      	ldr	r2, [pc, #132]	@ (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d022      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de0:	d01d      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a1d      	ldr	r2, [pc, #116]	@ (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d018      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a1b      	ldr	r2, [pc, #108]	@ (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d013      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00e      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a18      	ldr	r2, [pc, #96]	@ (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d009      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a17      	ldr	r2, [pc, #92]	@ (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d004      	beq.n	8007e1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a15      	ldr	r2, [pc, #84]	@ (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d10c      	bne.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40010000 	.word	0x40010000
 8007e5c:	40000400 	.word	0x40000400
 8007e60:	40000800 	.word	0x40000800
 8007e64:	40000c00 	.word	0x40000c00
 8007e68:	40010400 	.word	0x40010400
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	40001800 	.word	0x40001800

08007e74 <memset>:
 8007e74:	4402      	add	r2, r0
 8007e76:	4603      	mov	r3, r0
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d100      	bne.n	8007e7e <memset+0xa>
 8007e7c:	4770      	bx	lr
 8007e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e82:	e7f9      	b.n	8007e78 <memset+0x4>

08007e84 <__libc_init_array>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4d0d      	ldr	r5, [pc, #52]	@ (8007ebc <__libc_init_array+0x38>)
 8007e88:	4c0d      	ldr	r4, [pc, #52]	@ (8007ec0 <__libc_init_array+0x3c>)
 8007e8a:	1b64      	subs	r4, r4, r5
 8007e8c:	10a4      	asrs	r4, r4, #2
 8007e8e:	2600      	movs	r6, #0
 8007e90:	42a6      	cmp	r6, r4
 8007e92:	d109      	bne.n	8007ea8 <__libc_init_array+0x24>
 8007e94:	4d0b      	ldr	r5, [pc, #44]	@ (8007ec4 <__libc_init_array+0x40>)
 8007e96:	4c0c      	ldr	r4, [pc, #48]	@ (8007ec8 <__libc_init_array+0x44>)
 8007e98:	f000 f826 	bl	8007ee8 <_init>
 8007e9c:	1b64      	subs	r4, r4, r5
 8007e9e:	10a4      	asrs	r4, r4, #2
 8007ea0:	2600      	movs	r6, #0
 8007ea2:	42a6      	cmp	r6, r4
 8007ea4:	d105      	bne.n	8007eb2 <__libc_init_array+0x2e>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eac:	4798      	blx	r3
 8007eae:	3601      	adds	r6, #1
 8007eb0:	e7ee      	b.n	8007e90 <__libc_init_array+0xc>
 8007eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb6:	4798      	blx	r3
 8007eb8:	3601      	adds	r6, #1
 8007eba:	e7f2      	b.n	8007ea2 <__libc_init_array+0x1e>
 8007ebc:	080082c8 	.word	0x080082c8
 8007ec0:	080082c8 	.word	0x080082c8
 8007ec4:	080082c8 	.word	0x080082c8
 8007ec8:	080082cc 	.word	0x080082cc

08007ecc <memcpy>:
 8007ecc:	440a      	add	r2, r1
 8007ece:	4291      	cmp	r1, r2
 8007ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ed4:	d100      	bne.n	8007ed8 <memcpy+0xc>
 8007ed6:	4770      	bx	lr
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	d1f9      	bne.n	8007eda <memcpy+0xe>
 8007ee6:	bd10      	pop	{r4, pc}

08007ee8 <_init>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_fini>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr
