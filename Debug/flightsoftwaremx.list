
flightsoftwaremx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009080  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08009244  08009244  0000a244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009604  08009604  0000b00c  2**0
                  CONTENTS
  4 .ARM          00000008  08009604  08009604  0000a604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800960c  0800960c  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800960c  0800960c  0000a60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009610  08009610  0000a610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009614  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  2000000c  08009620  0000b00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08009620  0000b78c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dbcb  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004775  00000000  00000000  00028c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  0002d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c4  00000000  00000000  0002ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272ae  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254c0  00000000  00000000  00057582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e946d  00000000  00000000  0007ca42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165eaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000703c  00000000  00000000  00165ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800922c 	.word	0x0800922c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800922c 	.word	0x0800922c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ad7124_noCheckReadRegister>:
#include <stm32f4xx_hal.h>
#include "AD7124.h"

int8_t ad7124_noCheckReadRegister(struct ad7124_dev *dev, struct ad7124_registerData *p_reg)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b08b      	sub	sp, #44	@ 0x2c
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
    int8_t flag = 0, i = 0, check8 = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	77fb      	strb	r3, [r7, #31]
 8000502:	2300      	movs	r3, #0
 8000504:	77bb      	strb	r3, [r7, #30]
 8000506:	2300      	movs	r3, #0
 8000508:	777b      	strb	r3, [r7, #29]
    uint8_t txBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800050a:	4a65      	ldr	r2, [pc, #404]	@ (80006a0 <ad7124_noCheckReadRegister+0x1ac>)
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000514:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t rxBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000518:	4a61      	ldr	r2, [pc, #388]	@ (80006a0 <ad7124_noCheckReadRegister+0x1ac>)
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000522:	e883 0003 	stmia.w	r3, {r0, r1}

    // Build Command word
    txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg->addr);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	b25b      	sxtb	r3, r3
 800052c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000530:	b25b      	sxtb	r3, r3
 8000532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000536:	b25b      	sxtb	r3, r3
 8000538:	b2db      	uxtb	r3, r3
 800053a:	743b      	strb	r3, [r7, #16]

    /*
     * If this is an AD7124_DATA register read, and the DATA_STATUS bit is set
     * in ADC_CONTROL, need to read 4, not 3 bytes for DATA with flag
     */
    if ((p_reg->addr == AD7124_DATA_REG) &&
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d109      	bne.n	8000558 <ad7124_noCheckReadRegister+0x64>
        (dev->regs[AD7124_ADC_Control].value & AD7124_ADC_CTRL_REG_DATA_STATUS))
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	3310      	adds	r3, #16
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    if ((p_reg->addr == AD7124_DATA_REG) &&
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <ad7124_noCheckReadRegister+0x64>
        check8 = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	777b      	strb	r3, [r7, #29]

    uint16_t length = ((dev->useCRC != AD7124_DISABLE_CRC) ? p_reg->size + 1 : p_reg->size);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <ad7124_noCheckReadRegister+0x7a>
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	b29b      	uxth	r3, r3
 8000568:	3301      	adds	r3, #1
 800056a:	b29b      	uxth	r3, r3
 800056c:	e002      	b.n	8000574 <ad7124_noCheckReadRegister+0x80>
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	b29b      	uxth	r3, r3
 8000574:	837b      	strh	r3, [r7, #26]

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6858      	ldr	r0, [r3, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	891b      	ldrh	r3, [r3, #8]
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	f005 fb59 	bl	8005c38 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_TransmitReceive(dev->hspi, &txBuf[0], &rxBuf[0], length, HAL_MAX_DELAY) != HAL_OK);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	8b7b      	ldrh	r3, [r7, #26]
 800058c:	f107 0208 	add.w	r2, r7, #8
 8000590:	f107 0110 	add.w	r1, r7, #16
 8000594:	f04f 34ff 	mov.w	r4, #4294967295
 8000598:	9400      	str	r4, [sp, #0]
 800059a:	f007 fbdb 	bl	8007d54 <HAL_SPI_TransmitReceive>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	bf14      	ite	ne
 80005a4:	2301      	movne	r3, #1
 80005a6:	2300      	moveq	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	77fb      	strb	r3, [r7, #31]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6858      	ldr	r0, [r3, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	891b      	ldrh	r3, [r3, #8]
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	f005 fb3e 	bl	8005c38 <HAL_GPIO_WritePin>

    if (flag)
 80005bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <ad7124_noCheckReadRegister+0xd4>
        return 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	e066      	b.n	8000696 <ad7124_noCheckReadRegister+0x1a2>

    // Check the CRC
    if (dev->useCRC == AD7124_USE_CRC)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d131      	bne.n	8000636 <ad7124_noCheckReadRegister+0x142>
    {
        txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg->addr);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	743b      	strb	r3, [r7, #16]
        for (i = 1; i < p_reg->size + 2; ++i)
 80005e8:	2301      	movs	r3, #1
 80005ea:	77bb      	strb	r3, [r7, #30]
 80005ec:	e00f      	b.n	800060e <ad7124_noCheckReadRegister+0x11a>
            txBuf[i] = rxBuf[i];
 80005ee:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80005f2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80005f6:	3220      	adds	r2, #32
 80005f8:	443a      	add	r2, r7
 80005fa:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80005fe:	3320      	adds	r3, #32
 8000600:	443b      	add	r3, r7
 8000602:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (i = 1; i < p_reg->size + 2; ++i)
 8000606:	7fbb      	ldrb	r3, [r7, #30]
 8000608:	3301      	adds	r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	77bb      	strb	r3, [r7, #30]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000618:	429a      	cmp	r2, r3
 800061a:	dae8      	bge.n	80005ee <ad7124_noCheckReadRegister+0xfa>
        flag = ad7124_computeCrc8(txBuf, p_reg->size + 2);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	3302      	adds	r3, #2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f9fa 	bl	8000a26 <ad7124_computeCrc8>
 8000632:	4603      	mov	r3, r0
 8000634:	77fb      	strb	r3, [r7, #31]
    }

    if (check8 != 0)
 8000636:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d002      	beq.n	8000644 <ad7124_noCheckReadRegister+0x150>
    {
        /* readRegister checksum failed. */
        return -2;
 800063e:	f06f 0301 	mvn.w	r3, #1
 8000642:	e028      	b.n	8000696 <ad7124_noCheckReadRegister+0x1a2>
    }

    if (flag)
 8000644:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <ad7124_noCheckReadRegister+0x15c>
        return 1;
 800064c:	2301      	movs	r3, #1
 800064e:	e022      	b.n	8000696 <ad7124_noCheckReadRegister+0x1a2>

    // Build the result
    p_reg->value = 0;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
    for (i = 1; i < p_reg->size + 1; i++)
 8000656:	2301      	movs	r3, #1
 8000658:	77bb      	strb	r3, [r7, #30]
 800065a:	e015      	b.n	8000688 <ad7124_noCheckReadRegister+0x194>
    {
        p_reg->value <<= 8;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	021a      	lsls	r2, r3, #8
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	605a      	str	r2, [r3, #4]
        p_reg->value += rxBuf[i];
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800066e:	3220      	adds	r2, #32
 8000670:	443a      	add	r2, r7
 8000672:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8000676:	441a      	add	r2, r3
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	605a      	str	r2, [r3, #4]
    for (i = 1; i < p_reg->size + 1; i++)
 800067c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	3301      	adds	r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	77bb      	strb	r3, [r7, #30]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000690:	429a      	cmp	r2, r3
 8000692:	dae3      	bge.n	800065c <ad7124_noCheckReadRegister+0x168>
    }

    return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3724      	adds	r7, #36	@ 0x24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	08009244 	.word	0x08009244

080006a4 <ad7124_noCheckWriteRegister>:

int8_t ad7124_noCheckWriteRegister(struct ad7124_dev *dev, struct ad7124_registerData p_reg)
{
 80006a4:	b084      	sub	sp, #16
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b088      	sub	sp, #32
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80006b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t regValue = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
    int8_t flag = 0, i = 0, crc8 = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	76bb      	strb	r3, [r7, #26]
 80006be:	2300      	movs	r3, #0
 80006c0:	76fb      	strb	r3, [r7, #27]
 80006c2:	2300      	movs	r3, #0
 80006c4:	767b      	strb	r3, [r7, #25]
    uint8_t txBuf[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 80006c6:	4a3f      	ldr	r2, [pc, #252]	@ (80007c4 <ad7124_noCheckWriteRegister+0x120>)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Build Command word
    txBuf[0] = AD7124_COMM_REG_WEN | AD7124_COMM_REG_RD | AD7124_COMM_REG_RA(p_reg.addr);
 80006d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	733b      	strb	r3, [r7, #12]

    // Fill the write buffer
    regValue = p_reg.value;
 80006e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006ea:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < p_reg.size; i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	76fb      	strb	r3, [r7, #27]
 80006f0:	e012      	b.n	8000718 <ad7124_noCheckWriteRegister+0x74>
    {
        txBuf[p_reg.size - i] = regValue & 0xFF;
 80006f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80006f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	69fa      	ldr	r2, [r7, #28]
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	3320      	adds	r3, #32
 8000700:	443b      	add	r3, r7
 8000702:	f803 2c14 	strb.w	r2, [r3, #-20]
        regValue >>= 8;
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	121b      	asrs	r3, r3, #8
 800070a:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < p_reg.size; i++)
 800070c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	3301      	adds	r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	76fb      	strb	r3, [r7, #27]
 8000718:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800071c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800071e:	429a      	cmp	r2, r3
 8000720:	dbe7      	blt.n	80006f2 <ad7124_noCheckWriteRegister+0x4e>
    }

    // Compute the CRC
    if (dev->useCRC != AD7124_DISABLE_CRC)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d012      	beq.n	8000752 <ad7124_noCheckWriteRegister+0xae>
    {
        crc8 = ad7124_computeCrc8(txBuf, p_reg.size + 1);
 800072c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800072e:	b2db      	uxtb	r3, r3
 8000730:	3301      	adds	r3, #1
 8000732:	b2da      	uxtb	r2, r3
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f973 	bl	8000a26 <ad7124_computeCrc8>
 8000740:	4603      	mov	r3, r0
 8000742:	767b      	strb	r3, [r7, #25]
        txBuf[p_reg.size + 1] = crc8;
 8000744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000746:	3301      	adds	r3, #1
 8000748:	7e7a      	ldrb	r2, [r7, #25]
 800074a:	3320      	adds	r3, #32
 800074c:	443b      	add	r3, r7
 800074e:	f803 2c14 	strb.w	r2, [r3, #-20]
    }

    uint16_t length = (((dev->useCRC != AD7124_DISABLE_CRC) ? p_reg.size + 1 : p_reg.size) + 1);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d004      	beq.n	8000766 <ad7124_noCheckWriteRegister+0xc2>
 800075c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800075e:	b29b      	uxth	r3, r3
 8000760:	3302      	adds	r3, #2
 8000762:	b29b      	uxth	r3, r3
 8000764:	e003      	b.n	800076e <ad7124_noCheckWriteRegister+0xca>
 8000766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000768:	b29b      	uxth	r3, r3
 800076a:	3301      	adds	r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	82fb      	strh	r3, [r7, #22]

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6858      	ldr	r0, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	891b      	ldrh	r3, [r3, #8]
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	f005 fa5c 	bl	8005c38 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_Transmit(dev->hspi, txBuf, length, HAL_MAX_DELAY) != HAL_OK);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	8afa      	ldrh	r2, [r7, #22]
 8000786:	f107 010c 	add.w	r1, r7, #12
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	f007 f99e 	bl	8007ace <HAL_SPI_Transmit>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	bf14      	ite	ne
 8000798:	2301      	movne	r3, #1
 800079a:	2300      	moveq	r3, #0
 800079c:	b2db      	uxtb	r3, r3
 800079e:	76bb      	strb	r3, [r7, #26]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6858      	ldr	r0, [r3, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	891b      	ldrh	r3, [r3, #8]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	f005 fa44 	bl	8005c38 <HAL_GPIO_WritePin>

    return flag;
 80007b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007be:	b004      	add	sp, #16
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	08009244 	.word	0x08009244

080007c8 <ad7124_readRegister>:

int8_t ad7124_readRegister(struct ad7124_dev *dev, struct ad7124_registerData *p_reg)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
    int8_t flag = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]

    if (p_reg->addr != AD7124_ERR_REG && dev->isReady)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d012      	beq.n	8000804 <ad7124_readRegister+0x3c>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00d      	beq.n	8000804 <ad7124_readRegister+0x3c>
    {
        flag = ad7124_waitForSpiReady(dev,
                                      dev->responseTimeout);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	695b      	ldr	r3, [r3, #20]
        flag = ad7124_waitForSpiReady(dev,
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 f88c 	bl	800090c <ad7124_waitForSpiReady>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]
        if (flag)
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <ad7124_readRegister+0x3c>
            return 1;
 8000800:	2301      	movs	r3, #1
 8000802:	e004      	b.n	800080e <ad7124_readRegister+0x46>
    }

    return ad7124_noCheckReadRegister(dev, p_reg);
 8000804:	6839      	ldr	r1, [r7, #0]
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fe74 	bl	80004f4 <ad7124_noCheckReadRegister>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <ad7124_writeRegister>:

int8_t ad7124_writeRegister(struct ad7124_dev *dev,
                            struct ad7124_registerData p_reg)
{
 8000816:	b084      	sub	sp, #16
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af02      	add	r7, sp, #8
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	f107 001c 	add.w	r0, r7, #28
 8000824:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int8_t flag = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]

    if (dev->isReady)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00d      	beq.n	8000852 <ad7124_writeRegister+0x3c>
    {
        flag = ad7124_waitForSpiReady(dev,
                                      dev->responseTimeout);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	695b      	ldr	r3, [r3, #20]
        flag = ad7124_waitForSpiReady(dev,
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f865 	bl	800090c <ad7124_waitForSpiReady>
 8000842:	4603      	mov	r3, r0
 8000844:	73fb      	strb	r3, [r7, #15]
        if (flag)
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <ad7124_writeRegister+0x3c>
            return 1;
 800084e:	2301      	movs	r3, #1
 8000850:	e008      	b.n	8000864 <ad7124_writeRegister+0x4e>
    }

    return ad7124_noCheckWriteRegister(dev,
 8000852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff21 	bl	80006a4 <ad7124_noCheckWriteRegister>
 8000862:	4603      	mov	r3, r0
                                       p_reg);
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800086e:	b004      	add	sp, #16
 8000870:	4770      	bx	lr
	...

08000874 <ad7124_reset>:

int8_t ad7124_reset(struct ad7124_dev *dev)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    int8_t flag = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	75fb      	strb	r3, [r7, #23]
    uint8_t txBuf[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <ad7124_reset+0x94>)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088a:	e883 0003 	stmia.w	r3, {r0, r1}

    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_RESET);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6858      	ldr	r0, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	891b      	ldrh	r3, [r3, #8]
 8000896:	2200      	movs	r2, #0
 8000898:	4619      	mov	r1, r3
 800089a:	f005 f9cd 	bl	8005c38 <HAL_GPIO_WritePin>
    flag = (HAL_SPI_Transmit(dev->hspi, txBuf, 8, HAL_MAX_DELAY) != HAL_OK);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	f107 010c 	add.w	r1, r7, #12
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	2208      	movs	r2, #8
 80008ac:	f007 f90f 	bl	8007ace <HAL_SPI_Transmit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(dev->ncs_GPIOx, dev->ncs_GPIO_pin, GPIO_PIN_SET);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6858      	ldr	r0, [r3, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	891b      	ldrh	r3, [r3, #8]
 80008c6:	2201      	movs	r2, #1
 80008c8:	4619      	mov	r1, r3
 80008ca:	f005 f9b5 	bl	8005c38 <HAL_GPIO_WritePin>

    if (flag)
 80008ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <ad7124_reset+0x66>
        return 1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e011      	b.n	80008fe <ad7124_reset+0x8a>

    /* Read POR bit to clear */
    flag = ad7124_waitToPowerOn(dev, dev->responseTimeout);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4619      	mov	r1, r3
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 f84b 	bl	800097c <ad7124_waitToPowerOn>
 80008e6:	4603      	mov	r3, r0
 80008e8:	75fb      	strb	r3, [r7, #23]
    if (flag)
 80008ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <ad7124_reset+0x82>
        return 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e003      	b.n	80008fe <ad7124_reset+0x8a>

    // Recommened 4ms delay
    HAL_Delay(4);
 80008f6:	2004      	movs	r0, #4
 80008f8:	f002 fc78 	bl	80031ec <HAL_Delay>

    return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	0800924c 	.word	0x0800924c

0800090c <ad7124_waitForSpiReady>:

// Waits until the device can accept read and write user actions
int8_t ad7124_waitForSpiReady(struct ad7124_dev *dev, uint32_t timeout)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
    struct ad7124_registerData *regs;
    int8_t flag;
    int8_t ready = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	75fb      	strb	r3, [r7, #23]

    regs = dev->regs;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	613b      	str	r3, [r7, #16]

    while (!ready && --timeout)
 8000920:	e018      	b.n	8000954 <ad7124_waitForSpiReady+0x48>
    {
        // read the value of the error registers
        flag = ad7124_readRegister(dev, &regs[AD7124_Error]);
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3360      	adds	r3, #96	@ 0x60
 8000926:	4619      	mov	r1, r3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff4d 	bl	80007c8 <ad7124_readRegister>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]
        if (flag)
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <ad7124_waitForSpiReady+0x32>
            return 1;
 800093a:	2301      	movs	r3, #1
 800093c:	e01a      	b.n	8000974 <ad7124_waitForSpiReady+0x68>

        ready = (regs[AD7124_Error].value & AD7124_ERR_REG_SPI_IGNORE_ERR) == 0;
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3360      	adds	r3, #96	@ 0x60
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf0c      	ite	eq
 800094c:	2301      	moveq	r3, #1
 800094e:	2300      	movne	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	75fb      	strb	r3, [r7, #23]
    while (!ready && --timeout)
 8000954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d105      	bne.n	8000968 <ad7124_waitForSpiReady+0x5c>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1dc      	bne.n	8000922 <ad7124_waitForSpiReady+0x16>
    }

    if (!timeout)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <ad7124_waitForSpiReady+0x66>
        return 1;
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <ad7124_waitForSpiReady+0x68>

    return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <ad7124_waitToPowerOn>:

// Waits until the device finishes the power-on reset operations
int8_t ad7124_waitToPowerOn(struct ad7124_dev *dev, uint32_t timeout)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
    struct ad7124_registerData *regs;
    int32_t flag = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
    int8_t powered_on = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	75fb      	strb	r3, [r7, #23]

    regs = dev->regs;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	60fb      	str	r3, [r7, #12]

    while (!powered_on && --timeout)
 8000994:	e014      	b.n	80009c0 <ad7124_waitToPowerOn+0x44>
    {
        flag = ad7124_readRegister(dev, &regs[AD7124_Status]);
 8000996:	68f9      	ldr	r1, [r7, #12]
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff15 	bl	80007c8 <ad7124_readRegister>
 800099e:	4603      	mov	r3, r0
 80009a0:	613b      	str	r3, [r7, #16]

        if (flag)
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <ad7124_waitToPowerOn+0x30>
            return 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e01d      	b.n	80009e8 <ad7124_waitToPowerOn+0x6c>

        // Check the POR_FLAG bit in the flag Register
        powered_on = (regs[AD7124_Status].value & AD7124_STATUS_REG_POR_FLAG) == 0;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0310 	and.w	r3, r3, #16
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf0c      	ite	eq
 80009b8:	2301      	moveq	r3, #1
 80009ba:	2300      	movne	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	75fb      	strb	r3, [r7, #23]
    while (!powered_on && --timeout)
 80009c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d105      	bne.n	80009d4 <ad7124_waitToPowerOn+0x58>
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e0      	bne.n	8000996 <ad7124_waitToPowerOn+0x1a>
    }

    if (!(timeout || powered_on))
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d105      	bne.n	80009e6 <ad7124_waitToPowerOn+0x6a>
 80009da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <ad7124_waitToPowerOn+0x6a>
        return 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e000      	b.n	80009e8 <ad7124_waitToPowerOn+0x6c>
    return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <ad7124_readData>:
    return 0;
}

// Reads the conversion result from the device
int8_t ad7124_readData(struct ad7124_dev *dev, int32_t *p_data)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
    struct ad7124_registerData *regs;
    int8_t flag;

    regs = dev->regs;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	60fb      	str	r3, [r7, #12]

    // Read the value of the data register
    flag = ad7124_readRegister(dev, &regs[AD7124_Data]);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3320      	adds	r3, #32
 8000a04:	4619      	mov	r1, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fede 	bl	80007c8 <ad7124_readRegister>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	72fb      	strb	r3, [r7, #11]

    *p_data = regs[AD7124_Data].value;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3320      	adds	r3, #32
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	601a      	str	r2, [r3, #0]

    return flag;
 8000a1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <ad7124_computeCrc8>:

// Computes the CRC checksum for a data buffer
int8_t ad7124_computeCrc8(uint8_t *p_buf, uint8_t buf_size)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]
    uint8_t crc = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	73bb      	strb	r3, [r7, #14]

    while (buf_size)
 8000a3a:	e02e      	b.n	8000a9a <ad7124_computeCrc8+0x74>
    {
        for (i = 0x80; i != 0; i >>= 1)
 8000a3c:	2380      	movs	r3, #128	@ 0x80
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e022      	b.n	8000a88 <ad7124_computeCrc8+0x62>
        {
            uint8_t cmp1 = (crc & 0x80) != 0;
 8000a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	09db      	lsrs	r3, r3, #7
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	737b      	strb	r3, [r7, #13]
            uint8_t cmp2 = (*p_buf & i) != 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	4013      	ands	r3, r2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bf14      	ite	ne
 8000a5c:	2301      	movne	r3, #1
 8000a5e:	2300      	moveq	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	733b      	strb	r3, [r7, #12]
            if (cmp1 != cmp2)
 8000a64:	7b7a      	ldrb	r2, [r7, #13]
 8000a66:	7b3b      	ldrb	r3, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d007      	beq.n	8000a7c <ad7124_computeCrc8+0x56>
            {
                /* MSB of CRC register XOR input Bit from Data */
                crc <<= 1;
 8000a6c:	7bbb      	ldrb	r3, [r7, #14]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	73bb      	strb	r3, [r7, #14]
                crc ^= AD7124_CRC8_POLYNOMIAL_REPRESENTATION;
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	f083 0307 	eor.w	r3, r3, #7
 8000a78:	73bb      	strb	r3, [r7, #14]
 8000a7a:	e002      	b.n	8000a82 <ad7124_computeCrc8+0x5c>
            }
            else
            {
                crc <<= 1;
 8000a7c:	7bbb      	ldrb	r3, [r7, #14]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]
        for (i = 0x80; i != 0; i >>= 1)
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1d9      	bne.n	8000a42 <ad7124_computeCrc8+0x1c>
            }
        }
        p_buf++;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3301      	adds	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
        buf_size--;
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	70fb      	strb	r3, [r7, #3]
    while (buf_size)
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1cd      	bne.n	8000a3c <ad7124_computeCrc8+0x16>
    }

    return crc;
 8000aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <ad7124_setAdcControl>:
}

// ADC Fucntions

int8_t ad7124_setAdcControl(struct ad7124_dev *dev, enum ad7124_mode operating_mode, enum ad7124_powerMode power_mode, uint8_t ref_en, uint8_t clk_sel)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4603      	mov	r3, r0
 8000ac0:	70fb      	strb	r3, [r7, #3]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	70bb      	strb	r3, [r7, #2]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	707b      	strb	r3, [r7, #1]
    struct ad7124_registerData *r = &dev->regs[AD7124_ADC_Control];
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	3310      	adds	r3, #16
 8000ad0:	60fb      	str	r3, [r7, #12]

    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
               AD7124_ADC_CTRL_REG_POWER_MODE(power_mode) |
 8000ada:	78bb      	ldrb	r3, [r7, #2]
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	b2db      	uxtb	r3, r3
    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000ae0:	431a      	orrs	r2, r3
               AD7124_ADC_CTRL_REG_CLK_SEL(clk_sel) |
 8000ae2:	7e3b      	ldrb	r3, [r7, #24]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
               AD7124_ADC_CTRL_REG_POWER_MODE(power_mode) |
 8000ae8:	4313      	orrs	r3, r2
               (ref_en ? AD7124_ADC_CTRL_REG_REF_EN : 0) |
 8000aea:	787a      	ldrb	r2, [r7, #1]
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d002      	beq.n	8000af6 <ad7124_setAdcControl+0x46>
 8000af0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af4:	e000      	b.n	8000af8 <ad7124_setAdcControl+0x48>
 8000af6:	2200      	movs	r2, #0
               AD7124_ADC_CTRL_REG_CLK_SEL(clk_sel) |
 8000af8:	4313      	orrs	r3, r2
               (ref_en ? AD7124_ADC_CTRL_REG_REF_EN : 0) |
 8000afa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
    r->value = AD7124_ADC_CTRL_REG_MODE(operating_mode) |
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	605a      	str	r2, [r3, #4]
               AD7124_ADC_CTRL_REG_DOUT_RDY_DEL;

    return ad7124_writeRegister(dev, *r);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fe83 	bl	8000816 <ad7124_writeRegister>
 8000b10:	4603      	mov	r3, r0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <ad7124_setConfig>:

int8_t ad7124_setConfig(struct ad7124_dev *dev, uint8_t cfg, enum ad7124_reference_source ref, enum ad7124_PgaSel pga, int8_t bipolar, enum ad7124_BurnoutCurrent burnout)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af02      	add	r7, sp, #8
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	4608      	mov	r0, r1
 8000b24:	4611      	mov	r1, r2
 8000b26:	461a      	mov	r2, r3
 8000b28:	4603      	mov	r3, r0
 8000b2a:	70fb      	strb	r3, [r7, #3]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70bb      	strb	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
    if (cfg < 8)
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d82b      	bhi.n	8000b92 <ad7124_setConfig+0x78>
    {
        struct ad7124_registerData *r;

        cfg += AD7124_Config_0;
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	3319      	adds	r3, #25
 8000b3e:	70fb      	strb	r3, [r7, #3]
        r = &dev->regs[cfg];
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	4413      	add	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]

        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b4c:	78bb      	ldrb	r3, [r7, #2]
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	f003 0218 	and.w	r2, r3, #24
                   AD7124_CFG_REG_PGA(pga) |
 8000b54:	787b      	ldrb	r3, [r7, #1]
 8000b56:	f003 0307 	and.w	r3, r3, #7
        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b5a:	4313      	orrs	r3, r2
                   (bipolar ? AD7124_CFG_REG_BIPOLAR : 0) |
 8000b5c:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d002      	beq.n	8000b6a <ad7124_setConfig+0x50>
 8000b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b68:	e000      	b.n	8000b6c <ad7124_setConfig+0x52>
 8000b6a:	2200      	movs	r2, #0
                   AD7124_CFG_REG_PGA(pga) |
 8000b6c:	431a      	orrs	r2, r3
                   AD7124_CFG_REG_BURNOUT(burnout) |
 8000b6e:	7f3b      	ldrb	r3, [r7, #28]
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
                   (bipolar ? AD7124_CFG_REG_BIPOLAR : 0) |
 8000b76:	4313      	orrs	r3, r2
                   AD7124_CFG_REG_REF_BUFP | AD7124_CFG_REG_REF_BUFM |
                   AD7124_CFG_REG_AIN_BUFP | AD7124_CFG_REG_AINN_BUFM;
 8000b78:	f443 72f0 	orr.w	r2, r3, #480	@ 0x1e0
        r->value = AD7124_CFG_REG_REF_SEL(ref) |
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	605a      	str	r2, [r3, #4]
        return ad7124_writeRegister(dev, *r);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	9200      	str	r2, [sp, #0]
 8000b86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fe44 	bl	8000816 <ad7124_writeRegister>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	e001      	b.n	8000b96 <ad7124_setConfig+0x7c>
    }
    return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <ad7124_setChannel>:

int8_t ad7124_setChannel(struct ad7124_dev *dev, uint8_t ch, uint8_t cfg, enum ad7124_analog_input ainp, enum ad7124_analog_input ainm, uint8_t enable)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af02      	add	r7, sp, #8
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4611      	mov	r1, r2
 8000baa:	461a      	mov	r2, r3
 8000bac:	4603      	mov	r3, r0
 8000bae:	70fb      	strb	r3, [r7, #3]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	70bb      	strb	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
    if ((ch < 16) && (cfg < 8))
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	2b0f      	cmp	r3, #15
 8000bbc:	d82b      	bhi.n	8000c16 <ad7124_setChannel+0x78>
 8000bbe:	78bb      	ldrb	r3, [r7, #2]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	d828      	bhi.n	8000c16 <ad7124_setChannel+0x78>
    {
        struct ad7124_registerData *r;

        ch += AD7124_Channel_0;
 8000bc4:	78fb      	ldrb	r3, [r7, #3]
 8000bc6:	3309      	adds	r3, #9
 8000bc8:	70fb      	strb	r3, [r7, #3]
        r = &dev->regs[ch];
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]

        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 8000bd6:	78bb      	ldrb	r3, [r7, #2]
 8000bd8:	031b      	lsls	r3, r3, #12
 8000bda:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
                   AD7124_CH_MAP_REG_AINP(ainp) |
 8000bde:	787b      	ldrb	r3, [r7, #1]
 8000be0:	015b      	lsls	r3, r3, #5
 8000be2:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 8000be6:	431a      	orrs	r2, r3
                   AD7124_CH_MAP_REG_AINM(ainm) |
 8000be8:	7e3b      	ldrb	r3, [r7, #24]
 8000bea:	f003 031f 	and.w	r3, r3, #31
                   AD7124_CH_MAP_REG_AINP(ainp) |
 8000bee:	4313      	orrs	r3, r2
                   (enable ? AD7124_CH_MAP_REG_CH_ENABLE : 0);
 8000bf0:	7f3a      	ldrb	r2, [r7, #28]
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d002      	beq.n	8000bfc <ad7124_setChannel+0x5e>
 8000bf6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bfa:	e000      	b.n	8000bfe <ad7124_setChannel+0x60>
 8000bfc:	2200      	movs	r2, #0
                   AD7124_CH_MAP_REG_AINM(ainm) |
 8000bfe:	431a      	orrs	r2, r3
        r->value = AD7124_CH_MAP_REG_SETUP(cfg) |
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	605a      	str	r2, [r3, #4]

        return ad7124_writeRegister(dev, *r);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	9200      	str	r2, [sp, #0]
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe02 	bl	8000816 <ad7124_writeRegister>
 8000c12:	4603      	mov	r3, r0
 8000c14:	e001      	b.n	8000c1a <ad7124_setChannel+0x7c>
    }
    return -1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <ad7124_getRegister>:

int8_t ad7124_getRegister(struct ad7124_dev *dev, enum ad7124_registers id)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b084      	sub	sp, #16
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	70fb      	strb	r3, [r7, #3]
    int8_t flag = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
    if (id < AD7124_Status && id >= 57)
        return -1;

    flag = ad7124_readRegister(dev, &dev->regs[id]);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68da      	ldr	r2, [r3, #12]
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fdc2 	bl	80007c8 <ad7124_readRegister>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]
    if (flag != 0)
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <ad7124_getRegister+0x34>
    {
        return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e006      	b.n	8000c64 <ad7124_getRegister+0x42>
    }

    return dev->regs[id].value;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	4413      	add	r3, r2
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	b25b      	sxtb	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <ad7124_currentChannel>:

uint8_t ad7124_currentChannel(struct ad7124_dev *dev)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    int8_t flag = ad7124_getRegister(dev, AD7124_Status);
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffd3 	bl	8000c22 <ad7124_getRegister>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73fb      	strb	r3, [r7, #15]

    if (flag < 0)
 8000c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	da01      	bge.n	8000c8c <ad7124_currentChannel+0x20>
    {
        return 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e003      	b.n	8000c94 <ad7124_currentChannel+0x28>
    }
    return (uint8_t)(flag & AD7124_STATUS_REG_CH_ACTIVE(15));
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <ad7124_enableChannel>:

uint8_t ad7124_enableChannel(struct ad7124_dev *dev, uint8_t ch, uint8_t enable)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af02      	add	r7, sp, #8
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	70bb      	strb	r3, [r7, #2]
    if (ch > 16)
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b10      	cmp	r3, #16
 8000cb0:	d901      	bls.n	8000cb6 <ad7124_enableChannel+0x1a>
        return -1;
 8000cb2:	23ff      	movs	r3, #255	@ 0xff
 8000cb4:	e02a      	b.n	8000d0c <ad7124_enableChannel+0x70>

    struct ad7124_registerData *r;
    uint8_t flag, chan = AD7124_Channel_0;
 8000cb6:	2309      	movs	r3, #9
 8000cb8:	75fb      	strb	r3, [r7, #23]
    chan += ch;
 8000cba:	7dfa      	ldrb	r2, [r7, #23]
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	75fb      	strb	r3, [r7, #23]
    r = &dev->regs[chan];
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
    flag = ad7124_readRegister(dev, r);
 8000cce:	6939      	ldr	r1, [r7, #16]
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fd79 	bl	80007c8 <ad7124_readRegister>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]
    if (flag < 0)
    {
        return 7;
    }

    if (enable)
 8000cda:	78bb      	ldrb	r3, [r7, #2]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <ad7124_enableChannel+0x52>
    {

        r->value |= AD7124_CH_MAP_REG_CH_ENABLE;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	e005      	b.n	8000cfa <ad7124_enableChannel+0x5e>
    }
    else
    {

        r->value &= ~AD7124_CH_MAP_REG_CH_ENABLE;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]
    }

    return ad7124_writeRegister(dev, *r);
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	9200      	str	r2, [sp, #0]
 8000d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff fd87 	bl	8000816 <ad7124_writeRegister>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b2db      	uxtb	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <ad7124_getData>:


int32_t ad7124_getData(struct ad7124_dev *dev)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    int32_t value;
    int8_t ret;

    ret = ad7124_readData(dev, &value);
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fe64 	bl	80009f0 <ad7124_readData>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
    if (ret < 0)
 8000d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da02      	bge.n	8000d3a <ad7124_getData+0x26>
    {
        return ret;
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	e000      	b.n	8000d3c <ad7124_getData+0x28>
    }
    return (int32_t)value;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <ad7124_startSingleConversion>:

int8_t ad7124_startSingleConversion(struct ad7124_dev *dev, uint8_t ch)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
    if (ch < 16)
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d813      	bhi.n	8000d7e <ad7124_startSingleConversion+0x3a>
    {
        int ret;

        ret = ad7124_enableChannel(dev, ch, 1);
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff9d 	bl	8000c9c <ad7124_enableChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	60fb      	str	r3, [r7, #12]
        if (ret < 0)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da02      	bge.n	8000d72 <ad7124_startSingleConversion+0x2e>
        {
            return ret;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	e007      	b.n	8000d82 <ad7124_startSingleConversion+0x3e>
        }
        return ad7124_setMode(dev, AD7124_SINGLE);
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f8cd 	bl	8000f14 <ad7124_setMode>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	e001      	b.n	8000d82 <ad7124_startSingleConversion+0x3e>
    }
    return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <ad7124_adcRead>:

int32_t ad7124_adcRead(struct ad7124_dev *dev, uint8_t ch)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(50);
 8000d96:	2032      	movs	r0, #50	@ 0x32
 8000d98:	f002 fa28 	bl	80031ec <HAL_Delay>
	int8_t flag = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
    uint8_t cur_ch = ad7124_currentChannel(dev);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff63 	bl	8000c6c <ad7124_currentChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	73bb      	strb	r3, [r7, #14]

    if (ch != cur_ch)
 8000daa:	78fa      	ldrb	r2, [r7, #3]
 8000dac:	7bbb      	ldrb	r3, [r7, #14]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d00d      	beq.n	8000dce <ad7124_adcRead+0x44>
    {

        // disable previous channel if different
        flag = ad7124_enableChannel(dev, cur_ch, 0);
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff6f 	bl	8000c9c <ad7124_enableChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]
        if (flag != 0)
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <ad7124_adcRead+0x44>
            return 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e01d      	b.n	8000e0a <ad7124_adcRead+0x80>
    }

    flag = ad7124_startSingleConversion(dev, ch);
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb6 	bl	8000d44 <ad7124_startSingleConversion>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
    if (flag != 0)
 8000ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <ad7124_adcRead+0x60>
    {
        return flag;
 8000de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de8:	e00f      	b.n	8000e0a <ad7124_adcRead+0x80>
    }

    flag = ad7124_waitEndOfConversion(dev);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f811 	bl	8000e12 <ad7124_waitEndOfConversion>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]
    if (flag != 0)
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <ad7124_adcRead+0x78>
        return flag;
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	e003      	b.n	8000e0a <ad7124_adcRead+0x80>

    return ad7124_getData(dev);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff86 	bl	8000d14 <ad7124_getData>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <ad7124_waitEndOfConversion>:

int8_t ad7124_waitEndOfConversion(struct ad7124_dev *dev)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
    int8_t ret;
    uint8_t ready = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	72fb      	strb	r3, [r7, #11]
    uint32_t timeout = 4000;
 8000e1e:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000e22:	60fb      	str	r3, [r7, #12]

    do
    {

        /* Read the value of the Status Register */
        ret = ad7124_readRegister(dev, &dev->regs[AD7124_STATUS_REG]);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fccc 	bl	80007c8 <ad7124_readRegister>
 8000e30:	4603      	mov	r3, r0
 8000e32:	72bb      	strb	r3, [r7, #10]
        if (ret != 0)
 8000e34:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <ad7124_waitEndOfConversion+0x2e>
        {

            return 4;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	e01c      	b.n	8000e7a <ad7124_waitEndOfConversion+0x68>
        }

        /* Check the RDY bit in the Status Register */
        ready = (dev->regs[AD7124_STATUS_REG].value &
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                 AD7124_STATUS_REG_RDY) == 0;
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	bf0c      	ite	eq
 8000e4e:	2301      	moveq	r3, #1
 8000e50:	2300      	movne	r3, #0
 8000e52:	b2db      	uxtb	r3, r3
        ready = (dev->regs[AD7124_STATUS_REG].value &
 8000e54:	72fb      	strb	r3, [r7, #11]

        HAL_Delay(4);
 8000e56:	2004      	movs	r0, #4
 8000e58:	f002 f9c8 	bl	80031ec <HAL_Delay>
    } while (!ready && --timeout);
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d105      	bne.n	8000e6e <ad7124_waitEndOfConversion+0x5c>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1da      	bne.n	8000e24 <ad7124_waitEndOfConversion+0x12>

    return (timeout == 0) ? 5 : 0;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <ad7124_waitEndOfConversion+0x66>
 8000e74:	2305      	movs	r3, #5
 8000e76:	e000      	b.n	8000e7a <ad7124_waitEndOfConversion+0x68>
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <ad7124_toVoltage>:

float ad7124_toVoltage(int32_t value, int16_t gain, float vref, uint8_t bipolar)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e92:	817b      	strh	r3, [r7, #10]
 8000e94:	4613      	mov	r3, r2
 8000e96:	727b      	strb	r3, [r7, #9]
    float voltage = (float)value;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea2:	edc7 7a05 	vstr	s15, [r7, #20]

    if (bipolar)
 8000ea6:	7a7b      	ldrb	r3, [r7, #9]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00c      	beq.n	8000ec6 <ad7124_toVoltage+0x42>
    {
        voltage = voltage / (float)0x7FFFFFU - 1;
 8000eac:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eb0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000f0c <ad7124_toVoltage+0x88>
 8000eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ec0:	edc7 7a05 	vstr	s15, [r7, #20]
 8000ec4:	e007      	b.n	8000ed6 <ad7124_toVoltage+0x52>
    }
    else
    {
        voltage = voltage / (float)0xFFFFFFU;
 8000ec6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eca:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000f10 <ad7124_toVoltage+0x8c>
 8000ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed2:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    voltage = voltage * vref / (float)gain;
 8000ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ede:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ee2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef2:	edc7 7a05 	vstr	s15, [r7, #20]
    return voltage;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	ee07 3a90 	vmov	s15, r3
}
 8000efc:	eeb0 0a67 	vmov.f32	s0, s15
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	4afffffe 	.word	0x4afffffe
 8000f10:	4b7fffff 	.word	0x4b7fffff

08000f14 <ad7124_setMode>:

int8_t ad7124_setMode(struct ad7124_dev *dev, enum ad7124_mode operating_mode)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
	struct ad7124_registerData *r;
	r = &dev->regs[AD7124_ADC_Control];
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	3310      	adds	r3, #16
 8000f26:	60fb      	str	r3, [r7, #12]
    r->value &= ~AD7124_ADC_CTRL_REG_MODE(0x0F); // clear mode
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	605a      	str	r2, [r3, #4]
    r->value |= AD7124_ADC_CTRL_REG_MODE(operating_mode);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	605a      	str	r2, [r3, #4]
    return ad7124_writeRegister(dev, dev->regs[AD7124_ADC_Control]);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	9200      	str	r2, [sp, #0]
 8000f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fc5f 	bl	8000816 <ad7124_writeRegister>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <ad7124_init>:

// Initializes the AD7124.
int8_t ad7124_init(struct ad7124_dev *device, SPI_HandleTypeDef *hspi, GPIO_TypeDef *ncs_GPIOx, uint16_t ncs_GPIO_pin, enum ad7124_device_type device_type, struct ad7124_registerData *ad7124_init_regs_default)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b088      	sub	sp, #32
 8000f66:	af02      	add	r7, sp, #8
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	807b      	strh	r3, [r7, #2]
    int8_t flag = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	757b      	strb	r3, [r7, #21]
    uint8_t i = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]

    // Fill all registers with default values
    device->regs = ad7124_init_regs_default;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f7c:	60da      	str	r2, [r3, #12]
    device->responseTimeout = 1000;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f84:	615a      	str	r2, [r3, #20]
    device->isReady = 0;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	745a      	strb	r2, [r3, #17]
    device->useCRC = 0;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	741a      	strb	r2, [r3, #16]

    // SPI Communication Data
    device->hspi = hspi;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	601a      	str	r2, [r3, #0]
    device->ncs_GPIOx = ncs_GPIOx;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	605a      	str	r2, [r3, #4]
    device->ncs_GPIO_pin = ncs_GPIO_pin;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	887a      	ldrh	r2, [r7, #2]
 8000fa2:	811a      	strh	r2, [r3, #8]
    device->active_device = device_type;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000faa:	765a      	strb	r2, [r3, #25]

    // Reset the device
    flag = ad7124_reset(device);
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff fc61 	bl	8000874 <ad7124_reset>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	757b      	strb	r3, [r7, #21]

    // Initialize ADC
    ad7124_setAdcControl(device, AD7124_STANDBY, AD7124_LOW_POWER, 0, 0);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff fd75 	bl	8000ab0 <ad7124_setAdcControl>

    // Read the ID register
    flag = ad7124_readRegister(device, &device->regs[AD7124_ID_REG]);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	3350      	adds	r3, #80	@ 0x50
 8000fcc:	4619      	mov	r1, r3
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fbfa 	bl	80007c8 <ad7124_readRegister>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	757b      	strb	r3, [r7, #21]

    if (device->active_device == ID_AD7124_4)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	7e5b      	ldrb	r3, [r3, #25]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d107      	bne.n	8000ff0 <ad7124_init+0x8e>
    {
        if (!(device->regs[AD7124_ID_REG].value == AD7124_4_ID))
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	3350      	adds	r3, #80	@ 0x50
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b14      	cmp	r3, #20
 8000fea:	d00d      	beq.n	8001008 <ad7124_init+0xa6>
            return 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e066      	b.n	80010be <ad7124_init+0x15c>
    }
    else if (device->active_device == ID_AD7124_8)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	7e5b      	ldrb	r3, [r3, #25]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <ad7124_init+0xa6>
    {
        if (!(device->regs[AD7124_ID_REG].value == AD7124_8_ID))
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	3350      	adds	r3, #80	@ 0x50
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b16      	cmp	r3, #22
 8001002:	d001      	beq.n	8001008 <ad7124_init+0xa6>
            return 1;
 8001004:	2301      	movs	r3, #1
 8001006:	e05a      	b.n	80010be <ad7124_init+0x15c>
    }

    // Sets up the 8 channels
    for (i = 0; i < AD7124_MAX_SETUPS; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	75fb      	strb	r3, [r7, #23]
 800100c:	e026      	b.n	800105c <ad7124_init+0xfa>
    {
        flag = ad7124_setConfig(device, i, INTERNAL_REF, Pga1, 1, BurnoutOff);
 800100e:	7df9      	ldrb	r1, [r7, #23]
 8001010:	2300      	movs	r3, #0
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2301      	movs	r3, #1
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	2202      	movs	r2, #2
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f7ff fd7c 	bl	8000b1a <ad7124_setConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	757b      	strb	r3, [r7, #21]
        if (flag)
 8001026:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <ad7124_init+0xd0>
            return 1;
 800102e:	2301      	movs	r3, #1
 8001030:	e045      	b.n	80010be <ad7124_init+0x15c>

        flag = ad7124_setChannel(device, i, i, i, AD7124_AVSS, 0);
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	7dfa      	ldrb	r2, [r7, #23]
 8001036:	7df9      	ldrb	r1, [r7, #23]
 8001038:	2000      	movs	r0, #0
 800103a:	9001      	str	r0, [sp, #4]
 800103c:	2011      	movs	r0, #17
 800103e:	9000      	str	r0, [sp, #0]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff fdac 	bl	8000b9e <ad7124_setChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	757b      	strb	r3, [r7, #21]
        if (flag)
 800104a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <ad7124_init+0xf4>
            return 1;
 8001052:	2301      	movs	r3, #1
 8001054:	e033      	b.n	80010be <ad7124_init+0x15c>
    for (i = 0; i < AD7124_MAX_SETUPS; i++)
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	3301      	adds	r3, #1
 800105a:	75fb      	strb	r3, [r7, #23]
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	2b07      	cmp	r3, #7
 8001060:	d9d5      	bls.n	800100e <ad7124_init+0xac>
    }

    flag = ad7124_setAdcControl(device, AD7124_STANDBY, AD7124_HIGH_POWER, 1, 0);
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	2202      	movs	r2, #2
 800106a:	2102      	movs	r1, #2
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff fd1f 	bl	8000ab0 <ad7124_setAdcControl>
 8001072:	4603      	mov	r3, r0
 8001074:	757b      	strb	r3, [r7, #21]

    if (flag)
 8001076:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <ad7124_init+0x120>
        return 1;
 800107e:	2301      	movs	r3, #1
 8001080:	e01d      	b.n	80010be <ad7124_init+0x15c>

    // Reads Calbiration Data
    for (uint8_t i = 0; i < 8; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	75bb      	strb	r3, [r7, #22]
 8001086:	e016      	b.n	80010b6 <ad7124_init+0x154>
    {
        ad7124_readRegister(device, &device->regs[AD7124_Offset_0 + i]);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	7dbb      	ldrb	r3, [r7, #22]
 800108e:	3329      	adds	r3, #41	@ 0x29
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	4413      	add	r3, r2
 8001094:	4619      	mov	r1, r3
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fb96 	bl	80007c8 <ad7124_readRegister>
        ad7124_readRegister(device, &device->regs[AD7124_Gain_0 + i]);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	7dbb      	ldrb	r3, [r7, #22]
 80010a2:	3331      	adds	r3, #49	@ 0x31
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f7ff fb8c 	bl	80007c8 <ad7124_readRegister>
    for (uint8_t i = 0; i < 8; i++)
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	3301      	adds	r3, #1
 80010b4:	75bb      	strb	r3, [r7, #22]
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d9e5      	bls.n	8001088 <ad7124_init+0x126>
    }

    return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010e6:	4b3e      	ldr	r3, [pc, #248]	@ (80011e0 <MX_ADC1_Init+0x118>)
 80010e8:	4a3e      	ldr	r2, [pc, #248]	@ (80011e4 <MX_ADC1_Init+0x11c>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ec:	4b3c      	ldr	r3, [pc, #240]	@ (80011e0 <MX_ADC1_Init+0x118>)
 80010ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f4:	4b3a      	ldr	r3, [pc, #232]	@ (80011e0 <MX_ADC1_Init+0x118>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010fa:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <MX_ADC1_Init+0x118>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001100:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <MX_ADC1_Init+0x118>)
 8001102:	2200      	movs	r2, #0
 8001104:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b36      	ldr	r3, [pc, #216]	@ (80011e0 <MX_ADC1_Init+0x118>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800110e:	4b34      	ldr	r3, [pc, #208]	@ (80011e0 <MX_ADC1_Init+0x118>)
 8001110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001114:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001116:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <MX_ADC1_Init+0x118>)
 8001118:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800111c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111e:	4b30      	ldr	r3, [pc, #192]	@ (80011e0 <MX_ADC1_Init+0x118>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001124:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <MX_ADC1_Init+0x118>)
 8001126:	2204      	movs	r2, #4
 8001128:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800112a:	4b2d      	ldr	r3, [pc, #180]	@ (80011e0 <MX_ADC1_Init+0x118>)
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <MX_ADC1_Init+0x118>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001138:	4829      	ldr	r0, [pc, #164]	@ (80011e0 <MX_ADC1_Init+0x118>)
 800113a:	f002 f87b 	bl	8003234 <HAL_ADC_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001144:	f001 f992 	bl	800246c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8001148:	2307      	movs	r3, #7
 800114a:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 800114c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001150:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4820      	ldr	r0, [pc, #128]	@ (80011e0 <MX_ADC1_Init+0x118>)
 800115e:	f003 f82b 	bl	80041b8 <HAL_ADCEx_MultiModeConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001168:	f001 f980 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800116c:	2309      	movs	r3, #9
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4818      	ldr	r0, [pc, #96]	@ (80011e0 <MX_ADC1_Init+0x118>)
 800117e:	f002 fc95 	bl	8003aac <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001188:	f001 f970 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800118c:	2305      	movs	r3, #5
 800118e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <MX_ADC1_Init+0x118>)
 800119a:	f002 fc87 	bl	8003aac <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80011a4:	f001 f962 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80011a8:	2303      	movs	r3, #3
 80011aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <MX_ADC1_Init+0x118>)
 80011b2:	f002 fc7b 	bl	8003aac <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80011bc:	f001 f956 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80011c0:	2304      	movs	r3, #4
 80011c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_ADC1_Init+0x118>)
 80011ca:	f002 fc6f 	bl	8003aac <HAL_ADC_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80011d4:	f001 f94a 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000028 	.word	0x20000028
 80011e4:	40012000 	.word	0x40012000

080011e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011fa:	4b31      	ldr	r3, [pc, #196]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 80011fc:	4a31      	ldr	r2, [pc, #196]	@ (80012c4 <MX_ADC2_Init+0xdc>)
 80011fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001200:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 8001202:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001206:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001208:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 8001210:	2201      	movs	r2, #1
 8001212:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001214:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 8001216:	2200      	movs	r2, #0
 8001218:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800121a:	4b29      	ldr	r3, [pc, #164]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001222:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8001228:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 800122a:	2204      	movs	r2, #4
 800122c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800122e:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 8001238:	2201      	movs	r2, #1
 800123a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800123c:	4820      	ldr	r0, [pc, #128]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 800123e:	f001 fff9 	bl	8003234 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001248:	f001 f910 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800124c:	2308      	movs	r3, #8
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001254:	2301      	movs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4818      	ldr	r0, [pc, #96]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 800125e:	f002 fc25 	bl	8003aac <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001268:	f001 f900 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800126c:	2304      	movs	r3, #4
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4811      	ldr	r0, [pc, #68]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 800127a:	f002 fc17 	bl	8003aac <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 8001284:	f001 f8f2 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001288:	2303      	movs	r3, #3
 800128a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800128c:	463b      	mov	r3, r7
 800128e:	4619      	mov	r1, r3
 8001290:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 8001292:	f002 fc0b 	bl	8003aac <HAL_ADC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800129c:	f001 f8e6 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_ADC2_Init+0xd8>)
 80012aa:	f002 fbff 	bl	8003aac <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80012b4:	f001 f8da 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000070 	.word	0x20000070
 80012c4:	40012100 	.word	0x40012100

080012c8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80012da:	4b40      	ldr	r3, [pc, #256]	@ (80013dc <MX_ADC3_Init+0x114>)
 80012dc:	4a40      	ldr	r2, [pc, #256]	@ (80013e0 <MX_ADC3_Init+0x118>)
 80012de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012e0:	4b3e      	ldr	r3, [pc, #248]	@ (80013dc <MX_ADC3_Init+0x114>)
 80012e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012e8:	4b3c      	ldr	r3, [pc, #240]	@ (80013dc <MX_ADC3_Init+0x114>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80012ee:	4b3b      	ldr	r3, [pc, #236]	@ (80013dc <MX_ADC3_Init+0x114>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012f4:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <MX_ADC3_Init+0x114>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012fa:	4b38      	ldr	r3, [pc, #224]	@ (80013dc <MX_ADC3_Init+0x114>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001302:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <MX_ADC3_Init+0x114>)
 8001304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001308:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800130a:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <MX_ADC3_Init+0x114>)
 800130c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001312:	4b32      	ldr	r3, [pc, #200]	@ (80013dc <MX_ADC3_Init+0x114>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8001318:	4b30      	ldr	r3, [pc, #192]	@ (80013dc <MX_ADC3_Init+0x114>)
 800131a:	2206      	movs	r2, #6
 800131c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800131e:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <MX_ADC3_Init+0x114>)
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001326:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <MX_ADC3_Init+0x114>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800132c:	482b      	ldr	r0, [pc, #172]	@ (80013dc <MX_ADC3_Init+0x114>)
 800132e:	f001 ff81 	bl	8003234 <HAL_ADC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001338:	f001 f898 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001344:	2301      	movs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4823      	ldr	r0, [pc, #140]	@ (80013dc <MX_ADC3_Init+0x114>)
 800134e:	f002 fbad 	bl	8003aac <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001358:	f001 f888 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	481d      	ldr	r0, [pc, #116]	@ (80013dc <MX_ADC3_Init+0x114>)
 8001366:	f002 fba1 	bl	8003aac <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8001370:	f001 f87c 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001374:	2303      	movs	r3, #3
 8001376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4817      	ldr	r0, [pc, #92]	@ (80013dc <MX_ADC3_Init+0x114>)
 800137e:	f002 fb95 	bl	8003aac <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8001388:	f001 f870 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4811      	ldr	r0, [pc, #68]	@ (80013dc <MX_ADC3_Init+0x114>)
 8001396:	f002 fb89 	bl	8003aac <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80013a0:	f001 f864 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80013a4:	2305      	movs	r3, #5
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	480b      	ldr	r0, [pc, #44]	@ (80013dc <MX_ADC3_Init+0x114>)
 80013ae:	f002 fb7d 	bl	8003aac <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 80013b8:	f001 f858 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 80013bc:	2306      	movs	r3, #6
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_ADC3_Init+0x114>)
 80013c6:	f002 fb71 	bl	8003aac <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 80013d0:	f001 f84c 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000b8 	.word	0x200000b8
 80013e0:	40012200 	.word	0x40012200

080013e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b092      	sub	sp, #72	@ 0x48
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a81      	ldr	r2, [pc, #516]	@ (8001608 <HAL_ADC_MspInit+0x224>)
 8001402:	4293      	cmp	r3, r2
 8001404:	f040 8096 	bne.w	8001534 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	633b      	str	r3, [r7, #48]	@ 0x30
 800140c:	4b7f      	ldr	r3, [pc, #508]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001410:	4a7e      	ldr	r2, [pc, #504]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001416:	6453      	str	r3, [r2, #68]	@ 0x44
 8001418:	4b7c      	ldr	r3, [pc, #496]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001420:	633b      	str	r3, [r7, #48]	@ 0x30
 8001422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001428:	4b78      	ldr	r3, [pc, #480]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	4a77      	ldr	r2, [pc, #476]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6313      	str	r3, [r2, #48]	@ 0x30
 8001434:	4b75      	ldr	r3, [pc, #468]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800143e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001444:	4b71      	ldr	r3, [pc, #452]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	4a70      	ldr	r2, [pc, #448]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001450:	4b6e      	ldr	r3, [pc, #440]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800145a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001460:	4b6a      	ldr	r3, [pc, #424]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	4a69      	ldr	r2, [pc, #420]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	6313      	str	r3, [r2, #48]	@ 0x30
 800146c:	4b67      	ldr	r3, [pc, #412]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001478:	23a0      	movs	r3, #160	@ 0xa0
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2303      	movs	r3, #3
 800147e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001488:	4619      	mov	r1, r3
 800148a:	4861      	ldr	r0, [pc, #388]	@ (8001610 <HAL_ADC_MspInit+0x22c>)
 800148c:	f004 fa40 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001490:	2320      	movs	r3, #32
 8001492:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014a0:	4619      	mov	r1, r3
 80014a2:	485c      	ldr	r0, [pc, #368]	@ (8001614 <HAL_ADC_MspInit+0x230>)
 80014a4:	f004 fa34 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014a8:	2302      	movs	r3, #2
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	2303      	movs	r3, #3
 80014ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014b8:	4619      	mov	r1, r3
 80014ba:	4857      	ldr	r0, [pc, #348]	@ (8001618 <HAL_ADC_MspInit+0x234>)
 80014bc:	f004 fa28 	bl	8005910 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014c0:	4b56      	ldr	r3, [pc, #344]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014c2:	4a57      	ldr	r2, [pc, #348]	@ (8001620 <HAL_ADC_MspInit+0x23c>)
 80014c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014c6:	4b55      	ldr	r3, [pc, #340]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014cc:	4b53      	ldr	r3, [pc, #332]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d2:	4b52      	ldr	r3, [pc, #328]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014d8:	4b50      	ldr	r3, [pc, #320]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014e0:	4b4e      	ldr	r3, [pc, #312]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014e8:	4b4c      	ldr	r3, [pc, #304]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014f0:	4b4a      	ldr	r3, [pc, #296]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80014f8:	4b48      	ldr	r3, [pc, #288]	@ (800161c <HAL_ADC_MspInit+0x238>)
 80014fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001500:	4b46      	ldr	r3, [pc, #280]	@ (800161c <HAL_ADC_MspInit+0x238>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001506:	4845      	ldr	r0, [pc, #276]	@ (800161c <HAL_ADC_MspInit+0x238>)
 8001508:	f003 fdac 	bl	8005064 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8001512:	f000 ffab 	bl	800246c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a40      	ldr	r2, [pc, #256]	@ (800161c <HAL_ADC_MspInit+0x238>)
 800151a:	639a      	str	r2, [r3, #56]	@ 0x38
 800151c:	4a3f      	ldr	r2, [pc, #252]	@ (800161c <HAL_ADC_MspInit+0x238>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2012      	movs	r0, #18
 8001528:	f003 fd65 	bl	8004ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800152c:	2012      	movs	r0, #18
 800152e:	f003 fd7e 	bl	800502e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001532:	e0fa      	b.n	800172a <HAL_ADC_MspInit+0x346>
  else if(adcHandle->Instance==ADC2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a3a      	ldr	r2, [pc, #232]	@ (8001624 <HAL_ADC_MspInit+0x240>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d174      	bne.n	8001628 <HAL_ADC_MspInit+0x244>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	4b32      	ldr	r3, [pc, #200]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a31      	ldr	r2, [pc, #196]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001548:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a2a      	ldr	r2, [pc, #168]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b28      	ldr	r3, [pc, #160]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a23      	ldr	r2, [pc, #140]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_ADC_MspInit+0x228>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <HAL_ADC_MspInit+0x228>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_ADC_MspInit+0x228>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80015ae:	2350      	movs	r3, #80	@ 0x50
 80015b0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b2:	2303      	movs	r3, #3
 80015b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015be:	4619      	mov	r1, r3
 80015c0:	4813      	ldr	r0, [pc, #76]	@ (8001610 <HAL_ADC_MspInit+0x22c>)
 80015c2:	f004 f9a5 	bl	8005910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015c6:	2310      	movs	r3, #16
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015d6:	4619      	mov	r1, r3
 80015d8:	480e      	ldr	r0, [pc, #56]	@ (8001614 <HAL_ADC_MspInit+0x230>)
 80015da:	f004 f999 	bl	8005910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015de:	2301      	movs	r3, #1
 80015e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e2:	2303      	movs	r3, #3
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015ee:	4619      	mov	r1, r3
 80015f0:	4809      	ldr	r0, [pc, #36]	@ (8001618 <HAL_ADC_MspInit+0x234>)
 80015f2:	f004 f98d 	bl	8005910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2012      	movs	r0, #18
 80015fc:	f003 fcfb 	bl	8004ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001600:	2012      	movs	r0, #18
 8001602:	f003 fd14 	bl	800502e <HAL_NVIC_EnableIRQ>
}
 8001606:	e090      	b.n	800172a <HAL_ADC_MspInit+0x346>
 8001608:	40012000 	.word	0x40012000
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020800 	.word	0x40020800
 8001618:	40020400 	.word	0x40020400
 800161c:	20000100 	.word	0x20000100
 8001620:	40026410 	.word	0x40026410
 8001624:	40012100 	.word	0x40012100
  else if(adcHandle->Instance==ADC3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a41      	ldr	r2, [pc, #260]	@ (8001734 <HAL_ADC_MspInit+0x350>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d17b      	bne.n	800172a <HAL_ADC_MspInit+0x346>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b40      	ldr	r3, [pc, #256]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	4a3f      	ldr	r2, [pc, #252]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 800163c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001640:	6453      	str	r3, [r2, #68]	@ 0x44
 8001642:	4b3d      	ldr	r3, [pc, #244]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b39      	ldr	r3, [pc, #228]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a38      	ldr	r2, [pc, #224]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b36      	ldr	r3, [pc, #216]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a31      	ldr	r2, [pc, #196]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <HAL_ADC_MspInit+0x354>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001686:	2307      	movs	r3, #7
 8001688:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800168a:	2303      	movs	r3, #3
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001696:	4619      	mov	r1, r3
 8001698:	4828      	ldr	r0, [pc, #160]	@ (800173c <HAL_ADC_MspInit+0x358>)
 800169a:	f004 f939 	bl	8005910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800169e:	2307      	movs	r3, #7
 80016a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a2:	2303      	movs	r3, #3
 80016a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016ae:	4619      	mov	r1, r3
 80016b0:	4823      	ldr	r0, [pc, #140]	@ (8001740 <HAL_ADC_MspInit+0x35c>)
 80016b2:	f004 f92d 	bl	8005910 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80016b6:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016b8:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <HAL_ADC_MspInit+0x364>)
 80016ba:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016c2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016de:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016e6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ee:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016f6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80016fe:	4811      	ldr	r0, [pc, #68]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 8001700:	f003 fcb0 	bl	8005064 <HAL_DMA_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_ADC_MspInit+0x32a>
      Error_Handler();
 800170a:	f000 feaf 	bl	800246c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 8001712:	639a      	str	r2, [r3, #56]	@ 0x38
 8001714:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_ADC_MspInit+0x360>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2012      	movs	r0, #18
 8001720:	f003 fc69 	bl	8004ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001724:	2012      	movs	r0, #18
 8001726:	f003 fc82 	bl	800502e <HAL_NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3748      	adds	r7, #72	@ 0x48
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012200 	.word	0x40012200
 8001738:	40023800 	.word	0x40023800
 800173c:	40020800 	.word	0x40020800
 8001740:	40020000 	.word	0x40020000
 8001744:	20000160 	.word	0x20000160
 8001748:	40026428 	.word	0x40026428

0800174c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <MX_CAN1_Init+0x68>)
 8001752:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <MX_CAN1_Init+0x6c>)
 8001754:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_CAN1_Init+0x68>)
 8001758:	220e      	movs	r2, #14
 800175a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800175c:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <MX_CAN1_Init+0x68>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_CAN1_Init+0x68>)
 8001764:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001768:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <MX_CAN1_Init+0x68>)
 800176c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001770:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <MX_CAN1_Init+0x68>)
 8001774:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001778:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_CAN1_Init+0x68>)
 800177c:	2200      	movs	r2, #0
 800177e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_CAN1_Init+0x68>)
 8001782:	2200      	movs	r2, #0
 8001784:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_CAN1_Init+0x68>)
 8001788:	2200      	movs	r2, #0
 800178a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_CAN1_Init+0x68>)
 800178e:	2201      	movs	r2, #1
 8001790:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_CAN1_Init+0x68>)
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_CAN1_Init+0x68>)
 800179a:	2200      	movs	r2, #0
 800179c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_CAN1_Init+0x68>)
 80017a0:	f002 fdc8 	bl	8004334 <HAL_CAN_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80017aa:	f000 fe5f 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200001c0 	.word	0x200001c0
 80017b8:	40006400 	.word	0x40006400

080017bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a25      	ldr	r2, [pc, #148]	@ (8001870 <HAL_CAN_MspInit+0xb4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d143      	bne.n	8001866 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <HAL_CAN_MspInit+0xb8>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	4a23      	ldr	r2, [pc, #140]	@ (8001874 <HAL_CAN_MspInit+0xb8>)
 80017e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <HAL_CAN_MspInit+0xb8>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <HAL_CAN_MspInit+0xb8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a1c      	ldr	r2, [pc, #112]	@ (8001874 <HAL_CAN_MspInit+0xb8>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <HAL_CAN_MspInit+0xb8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181e:	2301      	movs	r3, #1
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001826:	2309      	movs	r3, #9
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4811      	ldr	r0, [pc, #68]	@ (8001878 <HAL_CAN_MspInit+0xbc>)
 8001832:	f004 f86d 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001836:	2302      	movs	r3, #2
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001846:	2309      	movs	r3, #9
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4809      	ldr	r0, [pc, #36]	@ (8001878 <HAL_CAN_MspInit+0xbc>)
 8001852:	f004 f85d 	bl	8005910 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2014      	movs	r0, #20
 800185c:	f003 fbcb 	bl	8004ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001860:	2014      	movs	r0, #20
 8001862:	f003 fbe4 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40006400 	.word	0x40006400
 8001874:	40023800 	.word	0x40023800
 8001878:	40020c00 	.word	0x40020c00

0800187c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b2f      	ldr	r3, [pc, #188]	@ (8001944 <MX_DMA_Init+0xc8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a2e      	ldr	r2, [pc, #184]	@ (8001944 <MX_DMA_Init+0xc8>)
 800188c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b2c      	ldr	r3, [pc, #176]	@ (8001944 <MX_DMA_Init+0xc8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4b28      	ldr	r3, [pc, #160]	@ (8001944 <MX_DMA_Init+0xc8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a27      	ldr	r2, [pc, #156]	@ (8001944 <MX_DMA_Init+0xc8>)
 80018a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <MX_DMA_Init+0xc8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	200e      	movs	r0, #14
 80018c0:	f003 fb99 	bl	8004ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018c4:	200e      	movs	r0, #14
 80018c6:	f003 fbb2 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	200f      	movs	r0, #15
 80018d0:	f003 fb91 	bl	8004ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018d4:	200f      	movs	r0, #15
 80018d6:	f003 fbaa 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2011      	movs	r0, #17
 80018e0:	f003 fb89 	bl	8004ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018e4:	2011      	movs	r0, #17
 80018e6:	f003 fba2 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	202f      	movs	r0, #47	@ 0x2f
 80018f0:	f003 fb81 	bl	8004ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80018f4:	202f      	movs	r0, #47	@ 0x2f
 80018f6:	f003 fb9a 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2038      	movs	r0, #56	@ 0x38
 8001900:	f003 fb79 	bl	8004ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001904:	2038      	movs	r0, #56	@ 0x38
 8001906:	f003 fb92 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2039      	movs	r0, #57	@ 0x39
 8001910:	f003 fb71 	bl	8004ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001914:	2039      	movs	r0, #57	@ 0x39
 8001916:	f003 fb8a 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	203a      	movs	r0, #58	@ 0x3a
 8001920:	f003 fb69 	bl	8004ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001924:	203a      	movs	r0, #58	@ 0x3a
 8001926:	f003 fb82 	bl	800502e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	2044      	movs	r0, #68	@ 0x44
 8001930:	f003 fb61 	bl	8004ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001934:	2044      	movs	r0, #68	@ 0x44
 8001936:	f003 fb7a 	bl	800502e <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <MX_FMPI2C1_Init>:

FMPI2C_HandleTypeDef hfmpi2c1;

/* FMPI2C1 init function */
void MX_FMPI2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 800194c:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 800194e:	4a17      	ldr	r2, [pc, #92]	@ (80019ac <MX_FMPI2C1_Init+0x64>)
 8001950:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00A0A3F7;
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 8001954:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <MX_FMPI2C1_Init+0x68>)
 8001956:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800195e:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 8001960:	2201      	movs	r2, #1
 8001962:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001964:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800196a:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001970:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 8001978:	2200      	movs	r2, #0
 800197a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 800197e:	2200      	movs	r2, #0
 8001980:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001982:	4809      	ldr	r0, [pc, #36]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 8001984:	f003 fede 	bl	8005744 <HAL_FMPI2C_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800198e:	f000 fd6d 	bl	800246c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001992:	2100      	movs	r1, #0
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <MX_FMPI2C1_Init+0x60>)
 8001996:	f003 ff70 	bl	800587a <HAL_FMPI2CEx_ConfigAnalogFilter>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80019a0:	f000 fd64 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200001e8 	.word	0x200001e8
 80019ac:	40006000 	.word	0x40006000
 80019b0:	00a0a3f7 	.word	0x00a0a3f7

080019b4 <HAL_FMPI2C_MspInit>:

void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* fmpi2cHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0a0      	sub	sp, #128	@ 0x80
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	225c      	movs	r2, #92	@ 0x5c
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f007 fbef 	bl	80091b8 <memset>
  if(fmpi2cHandle->Instance==FMPI2C1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a21      	ldr	r2, [pc, #132]	@ (8001a64 <HAL_FMPI2C_MspInit+0xb0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d13a      	bne.n	8001a5a <HAL_FMPI2C_MspInit+0xa6>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 80019e4:	2380      	movs	r3, #128	@ 0x80
 80019e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80019e8:	2300      	movs	r3, #0
 80019ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 fc61 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 80019fc:	f000 fd36 	bl	800246c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	4b18      	ldr	r3, [pc, #96]	@ (8001a68 <HAL_FMPI2C_MspInit+0xb4>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <HAL_FMPI2C_MspInit+0xb4>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a10:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_FMPI2C_MspInit+0xb4>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PD12     ------> FMPI2C1_SCL
    PD13     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a1c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a22:	2312      	movs	r3, #18
 8001a24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a32:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <HAL_FMPI2C_MspInit+0xb8>)
 8001a3a:	f003 ff69 	bl	8005910 <HAL_GPIO_Init>

    /* FMPI2C1 clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_FMPI2C_MspInit+0xb4>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_FMPI2C_MspInit+0xb4>)
 8001a48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_FMPI2C_MspInit+0xb4>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3780      	adds	r7, #128	@ 0x80
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40006000 	.word	0x40006000
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020c00 	.word	0x40020c00

08001a70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	4b65      	ldr	r3, [pc, #404]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a64      	ldr	r2, [pc, #400]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b62      	ldr	r3, [pc, #392]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a5d      	ldr	r2, [pc, #372]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b57      	ldr	r3, [pc, #348]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b54      	ldr	r3, [pc, #336]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b50      	ldr	r3, [pc, #320]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a4f      	ldr	r2, [pc, #316]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b4d      	ldr	r3, [pc, #308]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a48      	ldr	r2, [pc, #288]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b46      	ldr	r3, [pc, #280]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b42      	ldr	r3, [pc, #264]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a41      	ldr	r2, [pc, #260]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b3f      	ldr	r3, [pc, #252]	@ (8001c20 <MX_GPIO_Init+0x1b0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f248 013a 	movw	r1, #32826	@ 0x803a
 8001b34:	483b      	ldr	r0, [pc, #236]	@ (8001c24 <MX_GPIO_Init+0x1b4>)
 8001b36:	f004 f87f 	bl	8005c38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2108      	movs	r1, #8
 8001b3e:	483a      	ldr	r0, [pc, #232]	@ (8001c28 <MX_GPIO_Init+0x1b8>)
 8001b40:	f004 f87a 	bl	8005c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001b4a:	4838      	ldr	r0, [pc, #224]	@ (8001c2c <MX_GPIO_Init+0x1bc>)
 8001b4c:	f004 f874 	bl	8005c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_3
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8001b56:	4836      	ldr	r0, [pc, #216]	@ (8001c30 <MX_GPIO_Init+0x1c0>)
 8001b58:	f004 f86e 	bl	8005c38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	21c0      	movs	r1, #192	@ 0xc0
 8001b60:	4834      	ldr	r0, [pc, #208]	@ (8001c34 <MX_GPIO_Init+0x1c4>)
 8001b62:	f004 f869 	bl	8005c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE15
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15
 8001b66:	f248 033a 	movw	r3, #32826	@ 0x803a
 8001b6a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4829      	ldr	r0, [pc, #164]	@ (8001c24 <MX_GPIO_Init+0x1b4>)
 8001b80:	f003 fec6 	bl	8005910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b84:	2308      	movs	r3, #8
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4823      	ldr	r0, [pc, #140]	@ (8001c28 <MX_GPIO_Init+0x1b8>)
 8001b9c:	f003 feb8 	bl	8005910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001ba0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481c      	ldr	r0, [pc, #112]	@ (8001c2c <MX_GPIO_Init+0x1bc>)
 8001bba:	f003 fea9 	bl	8005910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_3|GPIO_PIN_4
 8001bbe:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8001bc2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4816      	ldr	r0, [pc, #88]	@ (8001c30 <MX_GPIO_Init+0x1c0>)
 8001bd8:	f003 fe9a 	bl	8005910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480e      	ldr	r0, [pc, #56]	@ (8001c30 <MX_GPIO_Init+0x1c0>)
 8001bf6:	f003 fe8b 	bl	8005910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bfa:	23c0      	movs	r3, #192	@ 0xc0
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <MX_GPIO_Init+0x1c4>)
 8001c12:	f003 fe7d 	bl	8005910 <HAL_GPIO_Init>

}
 8001c16:	bf00      	nop
 8001c18:	3730      	adds	r7, #48	@ 0x30
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40020800 	.word	0x40020800

08001c38 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c3e:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <MX_I2C3_Init+0x54>)
 8001c40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c44:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <MX_I2C3_Init+0x58>)
 8001c46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c5a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c74:	4804      	ldr	r0, [pc, #16]	@ (8001c88 <MX_I2C3_Init+0x50>)
 8001c76:	f004 f813 	bl	8005ca0 <HAL_I2C_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c80:	f000 fbf4 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000023c 	.word	0x2000023c
 8001c8c:	40005c00 	.word	0x40005c00
 8001c90:	000186a0 	.word	0x000186a0

08001c94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a29      	ldr	r2, [pc, #164]	@ (8001d58 <HAL_I2C_MspInit+0xc4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d14b      	bne.n	8001d4e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a20      	ldr	r2, [pc, #128]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf4:	2312      	movs	r3, #18
 8001cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d00:	2304      	movs	r3, #4
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4815      	ldr	r0, [pc, #84]	@ (8001d60 <HAL_I2C_MspInit+0xcc>)
 8001d0c:	f003 fe00 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d16:	2312      	movs	r3, #18
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d22:	2304      	movs	r3, #4
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <HAL_I2C_MspInit+0xd0>)
 8001d2e:	f003 fdef 	bl	8005910 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001d3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_I2C_MspInit+0xc8>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	@ 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40005c00 	.word	0x40005c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020000 	.word	0x40020000

08001d68 <enable_servo>:
static CAN_RxHeaderTypeDef RxHeader;
static uint8_t RxData[4];
static uint8_t count = 0;


void enable_servo(uint8_t servo_id, uint8_t is_enabled){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	460a      	mov	r2, r1
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	4613      	mov	r3, r2
 8001d76:	71bb      	strb	r3, [r7, #6]
	switch(servo_id){
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d015      	beq.n	8001daa <enable_servo+0x42>
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	dc1b      	bgt.n	8001dba <enable_servo+0x52>
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d002      	beq.n	8001d8c <enable_servo+0x24>
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d007      	beq.n	8001d9a <enable_servo+0x32>
			break;
		case 3:
			HAL_GPIO_WritePin((GPIO_TypeDef*) SERV_CTL_3_GPIO_Port,SERV_CTL_3_Pin,is_enabled);
			break;
	}
}
 8001d8a:	e016      	b.n	8001dba <enable_servo+0x52>
			HAL_GPIO_WritePin((GPIO_TypeDef*) SERV_CTL_1_GPIO_Port,SERV_CTL_1_Pin,is_enabled);
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2180      	movs	r1, #128	@ 0x80
 8001d92:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <enable_servo+0x5c>)
 8001d94:	f003 ff50 	bl	8005c38 <HAL_GPIO_WritePin>
			break;
 8001d98:	e00f      	b.n	8001dba <enable_servo+0x52>
			HAL_GPIO_WritePin((GPIO_TypeDef*) SERV_CTL_2_GPIO_Port,SERV_CTL_2_Pin,is_enabled);
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001da2:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <enable_servo+0x5c>)
 8001da4:	f003 ff48 	bl	8005c38 <HAL_GPIO_WritePin>
			break;
 8001da8:	e007      	b.n	8001dba <enable_servo+0x52>
			HAL_GPIO_WritePin((GPIO_TypeDef*) SERV_CTL_3_GPIO_Port,SERV_CTL_3_Pin,is_enabled);
 8001daa:	79bb      	ldrb	r3, [r7, #6]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001db2:	4804      	ldr	r0, [pc, #16]	@ (8001dc4 <enable_servo+0x5c>)
 8001db4:	f003 ff40 	bl	8005c38 <HAL_GPIO_WritePin>
			break;
 8001db8:	bf00      	nop
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020c00 	.word	0x40020c00

08001dc8 <set_servo_angle>:

void set_servo_angle(int8_t servo_id, uint16_t angle){
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	71fb      	strb	r3, [r7, #7]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80bb      	strh	r3, [r7, #4]
	switch(servo_id){
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d02e      	beq.n	8001e3e <set_servo_angle+0x76>
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	dc40      	bgt.n	8001e66 <set_servo_angle+0x9e>
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d002      	beq.n	8001dee <set_servo_angle+0x26>
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d014      	beq.n	8001e16 <set_servo_angle+0x4e>
			break;
		case 3:
			TIM2->CCR4 = ANGLE_TO_US(angle);
			break;
	}
}
 8001dec:	e03b      	b.n	8001e66 <set_servo_angle+0x9e>
			TIM2->CCR2 = ANGLE_TO_US(angle);
 8001dee:	88bb      	ldrh	r3, [r7, #4]
 8001df0:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <set_servo_angle+0xac>)
 8001dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8001dfe:	441a      	add	r2, r3
 8001e00:	11d2      	asrs	r2, r2, #7
 8001e02:	17db      	asrs	r3, r3, #31
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e12:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001e14:	e027      	b.n	8001e66 <set_servo_angle+0x9e>
			TIM2->CCR3 = ANGLE_TO_US(angle);
 8001e16:	88bb      	ldrh	r3, [r7, #4]
 8001e18:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <set_servo_angle+0xac>)
 8001e22:	fb82 1203 	smull	r1, r2, r2, r3
 8001e26:	441a      	add	r2, r3
 8001e28:	11d2      	asrs	r2, r2, #7
 8001e2a:	17db      	asrs	r3, r3, #31
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001e3c:	e013      	b.n	8001e66 <set_servo_angle+0x9e>
			TIM2->CCR4 = ANGLE_TO_US(angle);
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <set_servo_angle+0xac>)
 8001e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e4e:	441a      	add	r2, r3
 8001e50:	11d2      	asrs	r2, r2, #7
 8001e52:	17db      	asrs	r3, r3, #31
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e62:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001e64:	bf00      	nop
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	b60b60b7 	.word	0xb60b60b7

08001e78 <enable_solinoid>:

void enable_solinoid(uint8_t solinoid_id,uint8_t is_enabled){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
	switch(solinoid_id){
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d014      	beq.n	8001eb8 <enable_solinoid+0x40>
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	dc19      	bgt.n	8001ec6 <enable_solinoid+0x4e>
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <enable_solinoid+0x24>
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d007      	beq.n	8001eaa <enable_solinoid+0x32>
			break;
		case 2:
			HAL_GPIO_WritePin(SOL_2_GPIO_Port,SOL_2_Pin,is_enabled);
			break;
	}
}
 8001e9a:	e014      	b.n	8001ec6 <enable_solinoid+0x4e>
			HAL_GPIO_WritePin(SOL_0_GPIO_Port,SOL_0_Pin,is_enabled);
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <enable_solinoid+0x58>)
 8001ea4:	f003 fec8 	bl	8005c38 <HAL_GPIO_WritePin>
			break;
 8001ea8:	e00d      	b.n	8001ec6 <enable_solinoid+0x4e>
			HAL_GPIO_WritePin(SOL_1_GPIO_Port,SOL_1_Pin,is_enabled);
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	461a      	mov	r2, r3
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4807      	ldr	r0, [pc, #28]	@ (8001ed0 <enable_solinoid+0x58>)
 8001eb2:	f003 fec1 	bl	8005c38 <HAL_GPIO_WritePin>
			break;
 8001eb6:	e006      	b.n	8001ec6 <enable_solinoid+0x4e>
			HAL_GPIO_WritePin(SOL_2_GPIO_Port,SOL_2_Pin,is_enabled);
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <enable_solinoid+0x58>)
 8001ec0:	f003 feba 	bl	8005c38 <HAL_GPIO_WritePin>
			break;
 8001ec4:	bf00      	nop
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40020800 	.word	0x40020800

08001ed4 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8001edc:	4b40      	ldr	r3, [pc, #256]	@ (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001ede:	4a41      	ldr	r2, [pc, #260]	@ (8001fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f002 fc35 	bl	8004752 <HAL_CAN_GetRxMessage>
	if ((RxHeader.StdId = 0x1DA)){
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001eea:	f44f 72ed 	mov.w	r2, #474	@ 0x1da
 8001eee:	601a      	str	r2, [r3, #0]
		count = RxHeader.DLC;
 8001ef0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8001ef8:	701a      	strb	r2, [r3, #0]

		switch(RxData[0]){
 8001efa:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2beb      	cmp	r3, #235	@ 0xeb
 8001f00:	d038      	beq.n	8001f74 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8001f02:	2beb      	cmp	r3, #235	@ 0xeb
 8001f04:	dc68      	bgt.n	8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 8001f06:	2bda      	cmp	r3, #218	@ 0xda
 8001f08:	d042      	beq.n	8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 8001f0a:	2bda      	cmp	r3, #218	@ 0xda
 8001f0c:	dc64      	bgt.n	8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 8001f0e:	2baa      	cmp	r3, #170	@ 0xaa
 8001f10:	d002      	beq.n	8001f18 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
 8001f12:	2bb0      	cmp	r3, #176	@ 0xb0
 8001f14:	d018      	beq.n	8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8001f16:	e05f      	b.n	8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			// Set servo angle
			case 0xAA:
				int16_t packet = RxData[2] << 8 | RxData[3];
 8001f18:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001f1a:	789b      	ldrb	r3, [r3, #2]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001f22:	78db      	ldrb	r3, [r3, #3]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	817b      	strh	r3, [r7, #10]
				set_servo_angle(packet & 0b11, packet >> 2);
 8001f2a:	897b      	ldrh	r3, [r7, #10]
 8001f2c:	b25b      	sxtb	r3, r3
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	b25a      	sxtb	r2, r3
 8001f34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f38:	109b      	asrs	r3, r3, #2
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4610      	mov	r0, r2
 8001f42:	f7ff ff41 	bl	8001dc8 <set_servo_angle>
				break;
 8001f46:	e047      	b.n	8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			// Enable/Disable servo power
			case 0xB0:
				packet = RxData[3];
 8001f48:	4b25      	ldr	r3, [pc, #148]	@ (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001f4a:	78db      	ldrb	r3, [r3, #3]
 8001f4c:	817b      	strh	r3, [r7, #10]
				enable_servo(packet & 0b11, (packet >> 2) != 0);
 8001f4e:	897b      	ldrh	r3, [r7, #10]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f5c:	109b      	asrs	r3, r3, #2
 8001f5e:	b21b      	sxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	f7ff fefb 	bl	8001d68 <enable_servo>
				break;
 8001f72:	e031      	b.n	8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			// Power/Off Solenoid
			case 0xEB:
				enable_solinoid(RxData[2], RxData[3] != 0);
 8001f74:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001f76:	789a      	ldrb	r2, [r3, #2]
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001f7a:	78db      	ldrb	r3, [r3, #3]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	4610      	mov	r0, r2
 8001f8a:	f7ff ff75 	bl	8001e78 <enable_solinoid>
				break;
 8001f8e:	e023      	b.n	8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			// Send Data
			case 0xDA:
				for(int i = 0; i < 22; i++){
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e01b      	b.n	8001fce <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
					TxData[0] = i;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001f9c:	701a      	strb	r2, [r3, #0]
					TxData[1] = 0xBA;
 8001f9e:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001fa0:	22ba      	movs	r2, #186	@ 0xba
 8001fa2:	705a      	strb	r2, [r3, #1]
					TxData[2] = 0xDA;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001fa6:	22da      	movs	r2, #218	@ 0xda
 8001fa8:	709a      	strb	r2, [r3, #2]
					TxData[3] = 0x55;
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001fac:	2255      	movs	r2, #85	@ 0x55
 8001fae:	70da      	strb	r2, [r3, #3]
					TxData[4] = 0x69;
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001fb2:	2269      	movs	r2, #105	@ 0x69
 8001fb4:	711a      	strb	r2, [r3, #4]
					if ((HAL_CAN_AddTxMessage(hcan1, &TxHeader, TxData, &TxMailbox))!= HAL_OK)
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fec <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8001fba:	490e      	ldr	r1, [pc, #56]	@ (8001ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f002 faf8 	bl	80045b2 <HAL_CAN_AddTxMessage>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x102>
				for(int i = 0; i < 22; i++){
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b15      	cmp	r3, #21
 8001fd2:	dde0      	ble.n	8001f96 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
						return;
				}
				break;
 8001fd4:	e000      	b.n	8001fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
						return;
 8001fd6:	bf00      	nop
			// PCB^2 Error Signal
			case 0xDE:
		}

	}
}
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200002d0 	.word	0x200002d0
 8001fe4:	200002b4 	.word	0x200002b4
 8001fe8:	200002d4 	.word	0x200002d4
 8001fec:	200002ac 	.word	0x200002ac
 8001ff0:	200002a8 	.word	0x200002a8
 8001ff4:	20000290 	.word	0x20000290

08001ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	f5ad 6d8d 	sub.w	sp, sp, #1128	@ 0x468
 8001ffe:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002000:	f001 f882 	bl	8003108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002004:	f000 f9c6 	bl	8002394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002008:	f7ff fd32 	bl	8001a70 <MX_GPIO_Init>
  MX_DMA_Init();
 800200c:	f7ff fc36 	bl	800187c <MX_DMA_Init>
  MX_ADC1_Init();
 8002010:	f7ff f85a 	bl	80010c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002014:	f7ff f8e8 	bl	80011e8 <MX_ADC2_Init>
  MX_CAN1_Init();
 8002018:	f7ff fb98 	bl	800174c <MX_CAN1_Init>
  MX_FMPI2C1_Init();
 800201c:	f7ff fc94 	bl	8001948 <MX_FMPI2C1_Init>
  MX_I2C3_Init();
 8002020:	f7ff fe0a 	bl	8001c38 <MX_I2C3_Init>
  MX_QUADSPI_Init();
 8002024:	f000 fa28 	bl	8002478 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8002028:	f000 fb64 	bl	80026f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800202c:	f000 fb98 	bl	8002760 <MX_SPI2_Init>
  MX_TIM4_Init();
 8002030:	f000 fee4 	bl	8002dfc <MX_TIM4_Init>
  MX_SPI4_Init();
 8002034:	f000 fbca 	bl	80027cc <MX_SPI4_Init>
  MX_TIM3_Init();
 8002038:	f000 fe64 	bl	8002d04 <MX_TIM3_Init>
  MX_ADC3_Init();
 800203c:	f7ff f944 	bl	80012c8 <MX_ADC3_Init>
  MX_SAI2_Init();
 8002040:	f000 fad0 	bl	80025e4 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800204a:	48c5      	ldr	r0, [pc, #788]	@ (8002360 <main+0x368>)
 800204c:	f003 fdf4 	bl	8005c38 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002050:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002054:	f001 f8ca 	bl	80031ec <HAL_Delay>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8002058:	2104      	movs	r1, #4
 800205a:	48c2      	ldr	r0, [pc, #776]	@ (8002364 <main+0x36c>)
 800205c:	f006 fa66 	bl	800852c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002060:	2108      	movs	r1, #8
 8002062:	48c0      	ldr	r0, [pc, #768]	@ (8002364 <main+0x36c>)
 8002064:	f006 fa62 	bl	800852c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8002068:	210c      	movs	r1, #12
 800206a:	48be      	ldr	r0, [pc, #760]	@ (8002364 <main+0x36c>)
 800206c:	f006 fa5e 	bl	800852c <HAL_TIM_PWM_Start>


  HAL_CAN_Start(&hcan1);
 8002070:	48bd      	ldr	r0, [pc, #756]	@ (8002368 <main+0x370>)
 8002072:	f002 fa5a 	bl	800452a <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //activates rx interrupt
 8002076:	2102      	movs	r1, #2
 8002078:	48bb      	ldr	r0, [pc, #748]	@ (8002368 <main+0x370>)
 800207a:	f002 fc8c 	bl	8004996 <HAL_CAN_ActivateNotification>

  uint32_t pt_adc_buff = 0x12345678;
 800207e:	4bbb      	ldr	r3, [pc, #748]	@ (800236c <main+0x374>)
 8002080:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
  uint32_t ctrl_adc_buff = 0x12345678;
 8002084:	4bb9      	ldr	r3, [pc, #740]	@ (800236c <main+0x374>)
 8002086:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450

  HAL_ADC_Start(&hadc2);
 800208a:	48b9      	ldr	r0, [pc, #740]	@ (8002370 <main+0x378>)
 800208c:	f001 f916 	bl	80032bc <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, &pt_adc_buff, 4);
 8002090:	f207 4354 	addw	r3, r7, #1108	@ 0x454
 8002094:	2204      	movs	r2, #4
 8002096:	4619      	mov	r1, r3
 8002098:	48b6      	ldr	r0, [pc, #728]	@ (8002374 <main+0x37c>)
 800209a:	f001 ffb7 	bl	800400c <HAL_ADCEx_MultiModeStart_DMA>

  HAL_ADC_Start_IT(&hadc1);
 800209e:	48b5      	ldr	r0, [pc, #724]	@ (8002374 <main+0x37c>)
 80020a0:	f001 f9de 	bl	8003460 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 80020a4:	48b4      	ldr	r0, [pc, #720]	@ (8002378 <main+0x380>)
 80020a6:	f001 f9db 	bl	8003460 <HAL_ADC_Start_IT>
  HAL_ADC_Start_DMA(&hadc3, &ctrl_adc_buff, 6);
 80020aa:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80020ae:	2206      	movs	r2, #6
 80020b0:	4619      	mov	r1, r3
 80020b2:	48b1      	ldr	r0, [pc, #708]	@ (8002378 <main+0x380>)
 80020b4:	f001 fbc2 	bl	800383c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 80020b8:	48b0      	ldr	r0, [pc, #704]	@ (800237c <main+0x384>)
 80020ba:	f006 f927 	bl	800830c <HAL_TIM_Base_Start>

  TxHeader.IDE = CAN_ID_STD;
 80020be:	4bb0      	ldr	r3, [pc, #704]	@ (8002380 <main+0x388>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x2CB;
 80020c4:	4bae      	ldr	r3, [pc, #696]	@ (8002380 <main+0x388>)
 80020c6:	f240 22cb 	movw	r2, #715	@ 0x2cb
 80020ca:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80020cc:	4bac      	ldr	r3, [pc, #688]	@ (8002380 <main+0x388>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 5;
 80020d2:	4bab      	ldr	r3, [pc, #684]	@ (8002380 <main+0x388>)
 80020d4:	2205      	movs	r2, #5
 80020d6:	611a      	str	r2, [r3, #16]

  TxData[0] = 0xEF;
 80020d8:	4baa      	ldr	r3, [pc, #680]	@ (8002384 <main+0x38c>)
 80020da:	22ef      	movs	r2, #239	@ 0xef
 80020dc:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xBE;
 80020de:	4ba9      	ldr	r3, [pc, #676]	@ (8002384 <main+0x38c>)
 80020e0:	22be      	movs	r2, #190	@ 0xbe
 80020e2:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0xAD;
 80020e4:	4ba7      	ldr	r3, [pc, #668]	@ (8002384 <main+0x38c>)
 80020e6:	22ad      	movs	r2, #173	@ 0xad
 80020e8:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0xDE;
 80020ea:	4ba6      	ldr	r3, [pc, #664]	@ (8002384 <main+0x38c>)
 80020ec:	22de      	movs	r2, #222	@ 0xde
 80020ee:	70da      	strb	r2, [r3, #3]
  if ((HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox))
 80020f0:	4ba5      	ldr	r3, [pc, #660]	@ (8002388 <main+0x390>)
 80020f2:	4aa4      	ldr	r2, [pc, #656]	@ (8002384 <main+0x38c>)
 80020f4:	49a2      	ldr	r1, [pc, #648]	@ (8002380 <main+0x388>)
 80020f6:	489c      	ldr	r0, [pc, #624]	@ (8002368 <main+0x370>)
 80020f8:	f002 fa5b 	bl	80045b2 <HAL_CAN_AddTxMessage>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <main+0x10e>
  			!= HAL_OK) {
  		Error_Handler();
 8002102:	f000 f9b3 	bl	800246c <Error_Handler>
  int32_t value[8];
  float voltage[8];

  struct ad7124_dev ad7124_device;

  struct ad7124_registerData ad7124_init_regs_default[AD7124_REG_NO] = {
 8002106:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800210a:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800210e:	4a9f      	ldr	r2, [pc, #636]	@ (800238c <main+0x394>)
 8002110:	4618      	mov	r0, r3
 8002112:	4611      	mov	r1, r2
 8002114:	f44f 7364 	mov.w	r3, #912	@ 0x390
 8002118:	461a      	mov	r2, r3
 800211a:	f007 f879 	bl	8009210 <memcpy>
  	{0x38, 0x500000, 3, 1}, /* AD7124_Gain_7 */
  };



  flag = ad7124_init(&ad7124_device, &hspi2, GPIOD, GPIO_PIN_10, ID_AD7124_8, &ad7124_init_regs_default);
 800211e:	f507 7065 	add.w	r0, r7, #916	@ 0x394
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2301      	movs	r3, #1
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800212e:	4a8c      	ldr	r2, [pc, #560]	@ (8002360 <main+0x368>)
 8002130:	4997      	ldr	r1, [pc, #604]	@ (8002390 <main+0x398>)
 8002132:	f7fe ff16 	bl	8000f62 <ad7124_init>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 345b 	strb.w	r3, [r7, #1115]	@ 0x45b



  if (flag < 0)
 800213c:	f997 345b 	ldrsb.w	r3, [r7, #1115]	@ 0x45b
 8002140:	2b00      	cmp	r3, #0
 8002142:	da02      	bge.n	800214a <main+0x152>
  		return flag;
 8002144:	f997 345b 	ldrsb.w	r3, [r7, #1115]	@ 0x45b
 8002148:	e104      	b.n	8002354 <main+0x35c>


  HAL_Delay(100);
 800214a:	2064      	movs	r0, #100	@ 0x64
 800214c:	f001 f84e 	bl	80031ec <HAL_Delay>

  ad7124_noCheckReadRegister(&ad7124_device, &ad7124_device.regs[0x06]);
 8002150:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002154:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8002158:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9c8 	bl	80004f4 <ad7124_noCheckReadRegister>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	value[0] = ad7124_adcRead(&ad7124_device, 1);
 8002164:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8002168:	2101      	movs	r1, #1
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fe0d 	bl	8000d8a <ad7124_adcRead>
 8002170:	4603      	mov	r3, r0
 8002172:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
	value[1] = ad7124_adcRead(&ad7124_device, 3);
 8002176:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 800217a:	2103      	movs	r1, #3
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fe04 	bl	8000d8a <ad7124_adcRead>
 8002182:	4603      	mov	r3, r0
 8002184:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
	value[2] = ad7124_adcRead(&ad7124_device, 5);
 8002188:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 800218c:	2105      	movs	r1, #5
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fdfb 	bl	8000d8a <ad7124_adcRead>
 8002194:	4603      	mov	r3, r0
 8002196:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
	value[3] = ad7124_adcRead(&ad7124_device, 7);
 800219a:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 800219e:	2107      	movs	r1, #7
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fdf2 	bl	8000d8a <ad7124_adcRead>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
	value[4] = ad7124_adcRead(&ad7124_device, 9);
 80021ac:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80021b0:	2109      	movs	r1, #9
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fde9 	bl	8000d8a <ad7124_adcRead>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
	value[5] = ad7124_adcRead(&ad7124_device, 11);
 80021be:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80021c2:	210b      	movs	r1, #11
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fde0 	bl	8000d8a <ad7124_adcRead>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
	value[6] = ad7124_adcRead(&ad7124_device, 13);
 80021d0:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80021d4:	210d      	movs	r1, #13
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fdd7 	bl	8000d8a <ad7124_adcRead>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
	value[7] = ad7124_adcRead(&ad7124_device, 15);
 80021e2:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80021e6:	210f      	movs	r1, #15
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fdce 	bl	8000d8a <ad7124_adcRead>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
	HAL_Delay(50);
 80021f4:	2032      	movs	r0, #50	@ 0x32
 80021f6:	f000 fff9 	bl	80031ec <HAL_Delay>
	voltage[0] = ad7124_toVoltage(value[0], 1, 2.5, 1);
 80021fa:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80021fe:	2201      	movs	r2, #1
 8002200:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fe3c 	bl	8000e84 <ad7124_toVoltage>
 800220c:	eef0 7a40 	vmov.f32	s15, s0
 8002210:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002214:	edc3 7a00 	vstr	s15, [r3]
	voltage[1] = ad7124_toVoltage(value[1], 1, 2.5, 1);
 8002218:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800221c:	2201      	movs	r2, #1
 800221e:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8002222:	2101      	movs	r1, #1
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fe2d 	bl	8000e84 <ad7124_toVoltage>
 800222a:	eef0 7a40 	vmov.f32	s15, s0
 800222e:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8002232:	edc3 7a00 	vstr	s15, [r3]
	voltage[2] = ad7124_toVoltage(value[2], 1, 2.5, 1);
 8002236:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 800223a:	2201      	movs	r2, #1
 800223c:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8002240:	2101      	movs	r1, #1
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fe1e 	bl	8000e84 <ad7124_toVoltage>
 8002248:	eef0 7a40 	vmov.f32	s15, s0
 800224c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8002250:	edc3 7a00 	vstr	s15, [r3]
	voltage[3] = ad7124_toVoltage(value[3], 1, 2.5, 1);
 8002254:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8002258:	2201      	movs	r2, #1
 800225a:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 800225e:	2101      	movs	r1, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fe0f 	bl	8000e84 <ad7124_toVoltage>
 8002266:	eef0 7a40 	vmov.f32	s15, s0
 800226a:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 800226e:	edc3 7a00 	vstr	s15, [r3]
	voltage[4] = ad7124_toVoltage(value[4], 1, 2.5, 1);
 8002272:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8002276:	2201      	movs	r2, #1
 8002278:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fe00 	bl	8000e84 <ad7124_toVoltage>
 8002284:	eef0 7a40 	vmov.f32	s15, s0
 8002288:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800228c:	edc3 7a00 	vstr	s15, [r3]
	voltage[5] = ad7124_toVoltage(value[5], 1, 2.5, 1);
 8002290:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8002294:	2201      	movs	r2, #1
 8002296:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fdf1 	bl	8000e84 <ad7124_toVoltage>
 80022a2:	eef0 7a40 	vmov.f32	s15, s0
 80022a6:	f207 4324 	addw	r3, r7, #1060	@ 0x424
 80022aa:	edc3 7a00 	vstr	s15, [r3]
	voltage[6] = ad7124_toVoltage(value[6], 1, 2.5, 1);
 80022ae:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80022b2:	2201      	movs	r2, #1
 80022b4:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fde2 	bl	8000e84 <ad7124_toVoltage>
 80022c0:	eef0 7a40 	vmov.f32	s15, s0
 80022c4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80022c8:	edc3 7a00 	vstr	s15, [r3]
	voltage[7] = ad7124_toVoltage(value[7], 1, 2.5, 1);
 80022cc:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80022d0:	2201      	movs	r2, #1
 80022d2:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fdd3 	bl	8000e84 <ad7124_toVoltage>
 80022de:	eef0 7a40 	vmov.f32	s15, s0
 80022e2:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 80022e6:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(50);
 80022ea:	2032      	movs	r0, #50	@ 0x32
 80022ec:	f000 ff7e 	bl	80031ec <HAL_Delay>

	  for(i = 0; i < 22; i++){
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 80022f6:	e028      	b.n	800234a <main+0x352>
	  					TxData[0] = i;
 80022f8:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <main+0x38c>)
 8002300:	701a      	strb	r2, [r3, #0]
	  					TxData[1] = 0xBA;
 8002302:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <main+0x38c>)
 8002304:	22ba      	movs	r2, #186	@ 0xba
 8002306:	705a      	strb	r2, [r3, #1]
	  					TxData[2] = 0xDA;
 8002308:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <main+0x38c>)
 800230a:	22da      	movs	r2, #218	@ 0xda
 800230c:	709a      	strb	r2, [r3, #2]
	  					TxData[3] = 0x55;
 800230e:	4b1d      	ldr	r3, [pc, #116]	@ (8002384 <main+0x38c>)
 8002310:	2255      	movs	r2, #85	@ 0x55
 8002312:	70da      	strb	r2, [r3, #3]
	  					TxData[4] = 0x69;
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <main+0x38c>)
 8002316:	2269      	movs	r2, #105	@ 0x69
 8002318:	711a      	strb	r2, [r3, #4]
	  					if ((HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox))!= HAL_OK)
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <main+0x390>)
 800231c:	4a19      	ldr	r2, [pc, #100]	@ (8002384 <main+0x38c>)
 800231e:	4918      	ldr	r1, [pc, #96]	@ (8002380 <main+0x388>)
 8002320:	4811      	ldr	r0, [pc, #68]	@ (8002368 <main+0x370>)
 8002322:	f002 f946 	bl	80045b2 <HAL_CAN_AddTxMessage>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <main+0x338>
	  						return 0;
 800232c:	2300      	movs	r3, #0
 800232e:	e011      	b.n	8002354 <main+0x35c>
//	  				}
	  HAL_Delay(500);
 8002330:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002334:	f000 ff5a 	bl	80031ec <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 8002338:	2108      	movs	r1, #8
 800233a:	4809      	ldr	r0, [pc, #36]	@ (8002360 <main+0x368>)
 800233c:	f003 fc95 	bl	8005c6a <HAL_GPIO_TogglePin>
	  for(i = 0; i < 22; i++){
 8002340:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 8002344:	3301      	adds	r3, #1
 8002346:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 800234a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 800234e:	2b15      	cmp	r3, #21
 8002350:	d9d2      	bls.n	80022f8 <main+0x300>
	value[0] = ad7124_adcRead(&ad7124_device, 1);
 8002352:	e707      	b.n	8002164 <main+0x16c>

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
}
 8002354:	4618      	mov	r0, r3
 8002356:	f507 678c 	add.w	r7, r7, #1120	@ 0x460
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40020c00 	.word	0x40020c00
 8002364:	20000680 	.word	0x20000680
 8002368:	200001c0 	.word	0x200001c0
 800236c:	12345678 	.word	0x12345678
 8002370:	20000070 	.word	0x20000070
 8002374:	20000028 	.word	0x20000028
 8002378:	200000b8 	.word	0x200000b8
 800237c:	20000638 	.word	0x20000638
 8002380:	20000290 	.word	0x20000290
 8002384:	200002ac 	.word	0x200002ac
 8002388:	200002a8 	.word	0x200002a8
 800238c:	08009254 	.word	0x08009254
 8002390:	20000408 	.word	0x20000408

08002394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b094      	sub	sp, #80	@ 0x50
 8002398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	2234      	movs	r2, #52	@ 0x34
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f006 ff08 	bl	80091b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	4b29      	ldr	r3, [pc, #164]	@ (8002464 <SystemClock_Config+0xd0>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	4a28      	ldr	r2, [pc, #160]	@ (8002464 <SystemClock_Config+0xd0>)
 80023c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c8:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <SystemClock_Config+0xd0>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d4:	2300      	movs	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	4b23      	ldr	r3, [pc, #140]	@ (8002468 <SystemClock_Config+0xd4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a22      	ldr	r2, [pc, #136]	@ (8002468 <SystemClock_Config+0xd4>)
 80023de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <SystemClock_Config+0xd4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fa:	2302      	movs	r3, #2
 80023fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002402:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002404:	2310      	movs	r3, #16
 8002406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 224;
 8002408:	23e0      	movs	r3, #224	@ 0xe0
 800240a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800240c:	2302      	movs	r3, #2
 800240e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002410:	2307      	movs	r3, #7
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002414:	2302      	movs	r3, #2
 8002416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4618      	mov	r0, r3
 800241e:	f004 fe69 	bl	80070f4 <HAL_RCC_OscConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002428:	f000 f820 	bl	800246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800242c:	230f      	movs	r3, #15
 800242e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8002430:	2303      	movs	r3, #3
 8002432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002438:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800243c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800243e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002442:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	2105      	movs	r1, #5
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fe2e 	bl	80060ac <HAL_RCC_ClockConfig>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002456:	f000 f809 	bl	800246c <Error_Handler>
  }
}
 800245a:	bf00      	nop
 800245c:	3750      	adds	r7, #80	@ 0x50
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40007000 	.word	0x40007000

0800246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <Error_Handler+0x8>

08002478 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 800247e:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <MX_QUADSPI_Init+0x54>)
 8002480:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 8002484:	22ff      	movs	r2, #255	@ 0xff
 8002486:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002488:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 800248a:	2201      	movs	r2, #1
 800248c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800248e:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002494:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 8002496:	2201      	movs	r2, #1
 8002498:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800249a:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80024a6:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 80024a8:	2280      	movs	r2, #128	@ 0x80
 80024aa:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	@ (80024c8 <MX_QUADSPI_Init+0x50>)
 80024b4:	f003 fd38 	bl	8005f28 <HAL_QSPI_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80024be:	f7ff ffd5 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200002d8 	.word	0x200002d8
 80024cc:	a0001000 	.word	0xa0001000

080024d0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	@ 0x30
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a38      	ldr	r2, [pc, #224]	@ (80025d0 <HAL_QSPI_MspInit+0x100>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d169      	bne.n	80025c6 <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	4b37      	ldr	r3, [pc, #220]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 80024f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fa:	4a36      	ldr	r2, [pc, #216]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6393      	str	r3, [r2, #56]	@ 0x38
 8002502:	4b34      	ldr	r3, [pc, #208]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	4b30      	ldr	r3, [pc, #192]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a2f      	ldr	r2, [pc, #188]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b2d      	ldr	r3, [pc, #180]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b29      	ldr	r3, [pc, #164]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a28      	ldr	r2, [pc, #160]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 8002534:	f043 0310 	orr.w	r3, r3, #16
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b26      	ldr	r3, [pc, #152]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b22      	ldr	r3, [pc, #136]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a21      	ldr	r2, [pc, #132]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <HAL_QSPI_MspInit+0x104>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002562:	2304      	movs	r3, #4
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256e:	2303      	movs	r3, #3
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002572:	2309      	movs	r3, #9
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	4816      	ldr	r0, [pc, #88]	@ (80025d8 <HAL_QSPI_MspInit+0x108>)
 800257e:	f003 f9c7 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002582:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8002594:	230a      	movs	r3, #10
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	480f      	ldr	r0, [pc, #60]	@ (80025dc <HAL_QSPI_MspInit+0x10c>)
 80025a0:	f003 f9b6 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80025b6:	2309      	movs	r3, #9
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	4807      	ldr	r0, [pc, #28]	@ (80025e0 <HAL_QSPI_MspInit+0x110>)
 80025c2:	f003 f9a5 	bl	8005910 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80025c6:	bf00      	nop
 80025c8:	3730      	adds	r7, #48	@ 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	a0001000 	.word	0xa0001000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40020800 	.word	0x40020800

080025e4 <MX_SAI2_Init>:

SAI_HandleTypeDef hsai_BlockA2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <MX_SAI2_Init+0x50>)
 80025ea:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <MX_SAI2_Init+0x54>)
 80025ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <MX_SAI2_Init+0x50>)
 80025f0:	2204      	movs	r2, #4
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_SAI2_Init+0x50>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <MX_SAI2_Init+0x50>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <MX_SAI2_Init+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002606:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <MX_SAI2_Init+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800260c:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <MX_SAI2_Init+0x50>)
 800260e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002612:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002614:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <MX_SAI2_Init+0x50>)
 8002616:	2200      	movs	r2, #0
 8002618:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <MX_SAI2_Init+0x50>)
 800261c:	2200      	movs	r2, #0
 800261e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002620:	4804      	ldr	r0, [pc, #16]	@ (8002634 <MX_SAI2_Init+0x50>)
 8002622:	f005 f805 	bl	8007630 <HAL_SAI_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 800262c:	f7ff ff1e 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000324 	.word	0x20000324
 8002638:	40015c04 	.word	0x40015c04

0800263c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0a0      	sub	sp, #128	@ 0x80
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	225c      	movs	r2, #92	@ 0x5c
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f006 fdb3 	bl	80091b8 <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <HAL_SAI_MspInit+0xa8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d13f      	bne.n	80026dc <HAL_SAI_MspInit+0xa0>
    {
    /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800265c:	2308      	movs	r3, #8
 800265e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 8002660:	2310      	movs	r3, #16
 8002662:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002664:	23c0      	movs	r3, #192	@ 0xc0
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002668:	2302      	movs	r3, #2
 800266a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800266c:	2302      	movs	r3, #2
 800266e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002670:	2301      	movs	r3, #1
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8002674:	2300      	movs	r3, #0
 8002676:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fe1b 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_SAI_MspInit+0x50>
    {
      Error_Handler();
 8002688:	f7ff fef0 	bl	800246c <Error_Handler>
    }

    if (SAI2_client == 0)
 800268c:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <HAL_SAI_MspInit+0xac>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <HAL_SAI_MspInit+0x74>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	4b14      	ldr	r3, [pc, #80]	@ (80026ec <HAL_SAI_MspInit+0xb0>)
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	4a13      	ldr	r2, [pc, #76]	@ (80026ec <HAL_SAI_MspInit+0xb0>)
 800269e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_SAI_MspInit+0xb0>)
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80026b0:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <HAL_SAI_MspInit+0xac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a0c      	ldr	r2, [pc, #48]	@ (80026e8 <HAL_SAI_MspInit+0xac>)
 80026b8:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026cc:	230a      	movs	r3, #10
 80026ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	@ (80026f0 <HAL_SAI_MspInit+0xb4>)
 80026d8:	f003 f91a 	bl	8005910 <HAL_GPIO_Init>

    }
}
 80026dc:	bf00      	nop
 80026de:	3780      	adds	r7, #128	@ 0x80
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40015c04 	.word	0x40015c04
 80026e8:	200003ac 	.word	0x200003ac
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020c00 	.word	0x40020c00

080026f4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80026f8:	4b17      	ldr	r3, [pc, #92]	@ (8002758 <MX_SPI1_Init+0x64>)
 80026fa:	4a18      	ldr	r2, [pc, #96]	@ (800275c <MX_SPI1_Init+0x68>)
 80026fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026fe:	4b16      	ldr	r3, [pc, #88]	@ (8002758 <MX_SPI1_Init+0x64>)
 8002700:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002706:	4b14      	ldr	r3, [pc, #80]	@ (8002758 <MX_SPI1_Init+0x64>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <MX_SPI1_Init+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002712:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <MX_SPI1_Init+0x64>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <MX_SPI1_Init+0x64>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <MX_SPI1_Init+0x64>)
 8002720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002726:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <MX_SPI1_Init+0x64>)
 8002728:	2220      	movs	r2, #32
 800272a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800272c:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <MX_SPI1_Init+0x64>)
 800272e:	2200      	movs	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002732:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <MX_SPI1_Init+0x64>)
 8002734:	2200      	movs	r2, #0
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002738:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <MX_SPI1_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800273e:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <MX_SPI1_Init+0x64>)
 8002740:	220a      	movs	r2, #10
 8002742:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002744:	4804      	ldr	r0, [pc, #16]	@ (8002758 <MX_SPI1_Init+0x64>)
 8002746:	f005 f939 	bl	80079bc <HAL_SPI_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002750:	f7ff fe8c 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200003b0 	.word	0x200003b0
 800275c:	40013000 	.word	0x40013000

08002760 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002764:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <MX_SPI2_Init+0x64>)
 8002766:	4a18      	ldr	r2, [pc, #96]	@ (80027c8 <MX_SPI2_Init+0x68>)
 8002768:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <MX_SPI2_Init+0x64>)
 800276c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002770:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002772:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <MX_SPI2_Init+0x64>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <MX_SPI2_Init+0x64>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_SPI2_Init+0x64>)
 8002780:	2202      	movs	r2, #2
 8002782:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <MX_SPI2_Init+0x64>)
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <MX_SPI2_Init+0x64>)
 800278c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002790:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <MX_SPI2_Init+0x64>)
 8002794:	2220      	movs	r2, #32
 8002796:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <MX_SPI2_Init+0x64>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <MX_SPI2_Init+0x64>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	@ (80027c4 <MX_SPI2_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <MX_SPI2_Init+0x64>)
 80027ac:	220a      	movs	r2, #10
 80027ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	@ (80027c4 <MX_SPI2_Init+0x64>)
 80027b2:	f005 f903 	bl	80079bc <HAL_SPI_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80027bc:	f7ff fe56 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000408 	.word	0x20000408
 80027c8:	40003800 	.word	0x40003800

080027cc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <MX_SPI4_Init+0x64>)
 80027d2:	4a18      	ldr	r2, [pc, #96]	@ (8002834 <MX_SPI4_Init+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80027d6:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <MX_SPI4_Init+0x64>)
 80027d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027dc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80027de:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <MX_SPI4_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <MX_SPI4_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ea:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <MX_SPI4_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <MX_SPI4_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <MX_SPI4_Init+0x64>)
 80027f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027fc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <MX_SPI4_Init+0x64>)
 8002800:	2200      	movs	r2, #0
 8002802:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <MX_SPI4_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800280a:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <MX_SPI4_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <MX_SPI4_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <MX_SPI4_Init+0x64>)
 8002818:	220a      	movs	r2, #10
 800281a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	@ (8002830 <MX_SPI4_Init+0x64>)
 800281e:	f005 f8cd 	bl	80079bc <HAL_SPI_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002828:	f7ff fe20 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000460 	.word	0x20000460
 8002834:	40013400 	.word	0x40013400

08002838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08e      	sub	sp, #56	@ 0x38
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a95      	ldr	r2, [pc, #596]	@ (8002aac <HAL_SPI_MspInit+0x274>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f040 8089 	bne.w	800296e <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	623b      	str	r3, [r7, #32]
 8002860:	4b93      	ldr	r3, [pc, #588]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 8002862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002864:	4a92      	ldr	r2, [pc, #584]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 8002866:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800286a:	6453      	str	r3, [r2, #68]	@ 0x44
 800286c:	4b90      	ldr	r3, [pc, #576]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 800286e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002870:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002874:	623b      	str	r3, [r7, #32]
 8002876:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	4a8b      	ldr	r2, [pc, #556]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	6313      	str	r3, [r2, #48]	@ 0x30
 8002888:	4b89      	ldr	r3, [pc, #548]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002894:	2338      	movs	r3, #56	@ 0x38
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a0:	2303      	movs	r3, #3
 80028a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028a4:	2305      	movs	r3, #5
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ac:	4619      	mov	r1, r3
 80028ae:	4881      	ldr	r0, [pc, #516]	@ (8002ab4 <HAL_SPI_MspInit+0x27c>)
 80028b0:	f003 f82e 	bl	8005910 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80028b4:	4b80      	ldr	r3, [pc, #512]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028b6:	4a81      	ldr	r2, [pc, #516]	@ (8002abc <HAL_SPI_MspInit+0x284>)
 80028b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80028ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80028c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ce:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d6:	4b78      	ldr	r3, [pc, #480]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028dc:	4b76      	ldr	r3, [pc, #472]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80028e2:	4b75      	ldr	r3, [pc, #468]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b73      	ldr	r3, [pc, #460]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ee:	4b72      	ldr	r3, [pc, #456]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80028f4:	4870      	ldr	r0, [pc, #448]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 80028f6:	f002 fbb5 	bl	8005064 <HAL_DMA_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002900:	f7ff fdb4 	bl	800246c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a6c      	ldr	r2, [pc, #432]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 8002908:	64da      	str	r2, [r3, #76]	@ 0x4c
 800290a:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab8 <HAL_SPI_MspInit+0x280>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8002910:	4b6b      	ldr	r3, [pc, #428]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002912:	4a6c      	ldr	r2, [pc, #432]	@ (8002ac4 <HAL_SPI_MspInit+0x28c>)
 8002914:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002916:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002918:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800291c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800291e:	4b68      	ldr	r3, [pc, #416]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002920:	2240      	movs	r2, #64	@ 0x40
 8002922:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002924:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800292a:	4b65      	ldr	r3, [pc, #404]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 800292c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002930:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002932:	4b63      	ldr	r3, [pc, #396]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002938:	4b61      	ldr	r3, [pc, #388]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800293e:	4b60      	ldr	r3, [pc, #384]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002940:	2200      	movs	r2, #0
 8002942:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002944:	4b5e      	ldr	r3, [pc, #376]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800294a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002950:	485b      	ldr	r0, [pc, #364]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002952:	f002 fb87 	bl	8005064 <HAL_DMA_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800295c:	f7ff fd86 	bl	800246c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a57      	ldr	r2, [pc, #348]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002964:	649a      	str	r2, [r3, #72]	@ 0x48
 8002966:	4a56      	ldr	r2, [pc, #344]	@ (8002ac0 <HAL_SPI_MspInit+0x288>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800296c:	e0e8      	b.n	8002b40 <HAL_SPI_MspInit+0x308>
  else if(spiHandle->Instance==SPI2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a55      	ldr	r2, [pc, #340]	@ (8002ac8 <HAL_SPI_MspInit+0x290>)
 8002974:	4293      	cmp	r3, r2
 8002976:	f040 80b1 	bne.w	8002adc <HAL_SPI_MspInit+0x2a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	4a4b      	ldr	r2, [pc, #300]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002988:	6413      	str	r3, [r2, #64]	@ 0x40
 800298a:	4b49      	ldr	r3, [pc, #292]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	4b45      	ldr	r3, [pc, #276]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	4a44      	ldr	r2, [pc, #272]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a6:	4b42      	ldr	r3, [pc, #264]	@ (8002ab0 <HAL_SPI_MspInit+0x278>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80029b2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c4:	2305      	movs	r3, #5
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4839      	ldr	r0, [pc, #228]	@ (8002ab4 <HAL_SPI_MspInit+0x27c>)
 80029d0:	f002 ff9e 	bl	8005910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029de:	2301      	movs	r3, #1
 80029e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e2:	2303      	movs	r3, #3
 80029e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029e6:	2305      	movs	r3, #5
 80029e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ee:	4619      	mov	r1, r3
 80029f0:	4830      	ldr	r0, [pc, #192]	@ (8002ab4 <HAL_SPI_MspInit+0x27c>)
 80029f2:	f002 ff8d 	bl	8005910 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80029f6:	4b35      	ldr	r3, [pc, #212]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 80029f8:	4a35      	ldr	r2, [pc, #212]	@ (8002ad0 <HAL_SPI_MspInit+0x298>)
 80029fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80029fc:	4b33      	ldr	r3, [pc, #204]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a02:	4b32      	ldr	r3, [pc, #200]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a08:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a14:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a16:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a22:	4b2a      	ldr	r3, [pc, #168]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a28:	4b28      	ldr	r3, [pc, #160]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a2e:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a34:	4825      	ldr	r0, [pc, #148]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a36:	f002 fb15 	bl	8005064 <HAL_DMA_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_SPI_MspInit+0x20c>
      Error_Handler();
 8002a40:	f7ff fd14 	bl	800246c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a21      	ldr	r2, [pc, #132]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a48:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002a4a:	4a20      	ldr	r2, [pc, #128]	@ (8002acc <HAL_SPI_MspInit+0x294>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002a50:	4b20      	ldr	r3, [pc, #128]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a52:	4a21      	ldr	r2, [pc, #132]	@ (8002ad8 <HAL_SPI_MspInit+0x2a0>)
 8002a54:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002a56:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a5e:	2240      	movs	r2, #64	@ 0x40
 8002a60:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a68:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a6e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a70:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a76:	4b17      	ldr	r3, [pc, #92]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a82:	4b14      	ldr	r3, [pc, #80]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a88:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a8e:	4811      	ldr	r0, [pc, #68]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002a90:	f002 fae8 	bl	8005064 <HAL_DMA_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_SPI_MspInit+0x266>
      Error_Handler();
 8002a9a:	f7ff fce7 	bl	800246c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002aa2:	649a      	str	r2, [r3, #72]	@ 0x48
 8002aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad4 <HAL_SPI_MspInit+0x29c>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002aaa:	e049      	b.n	8002b40 <HAL_SPI_MspInit+0x308>
 8002aac:	40013000 	.word	0x40013000
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	200004b8 	.word	0x200004b8
 8002abc:	40026440 	.word	0x40026440
 8002ac0:	20000518 	.word	0x20000518
 8002ac4:	40026488 	.word	0x40026488
 8002ac8:	40003800 	.word	0x40003800
 8002acc:	20000578 	.word	0x20000578
 8002ad0:	40026058 	.word	0x40026058
 8002ad4:	200005d8 	.word	0x200005d8
 8002ad8:	40026070 	.word	0x40026070
  else if(spiHandle->Instance==SPI4)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <HAL_SPI_MspInit+0x310>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12c      	bne.n	8002b40 <HAL_SPI_MspInit+0x308>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_SPI_MspInit+0x314>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	4a17      	ldr	r2, [pc, #92]	@ (8002b4c <HAL_SPI_MspInit+0x314>)
 8002af0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af6:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <HAL_SPI_MspInit+0x314>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <HAL_SPI_MspInit+0x314>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a10      	ldr	r2, [pc, #64]	@ (8002b4c <HAL_SPI_MspInit+0x314>)
 8002b0c:	f043 0310 	orr.w	r3, r3, #16
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_SPI_MspInit+0x314>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 8002b1e:	f246 0304 	movw	r3, #24580	@ 0x6004
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002b30:	2305      	movs	r3, #5
 8002b32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4805      	ldr	r0, [pc, #20]	@ (8002b50 <HAL_SPI_MspInit+0x318>)
 8002b3c:	f002 fee8 	bl	8005910 <HAL_GPIO_Init>
}
 8002b40:	bf00      	nop
 8002b42:	3738      	adds	r7, #56	@ 0x38
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40013400 	.word	0x40013400
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40021000 	.word	0x40021000

08002b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_MspInit+0x4c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <NMI_Handler+0x4>

08002bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <HardFault_Handler+0x4>

08002bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <MemManage_Handler+0x4>

08002bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bfa:	f000 fad7 	bl	80031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002c08:	4802      	ldr	r0, [pc, #8]	@ (8002c14 <DMA1_Stream3_IRQHandler+0x10>)
 8002c0a:	f002 fb31 	bl	8005270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000578 	.word	0x20000578

08002c18 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002c1c:	4802      	ldr	r0, [pc, #8]	@ (8002c28 <DMA1_Stream4_IRQHandler+0x10>)
 8002c1e:	f002 fb27 	bl	8005270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200005d8 	.word	0x200005d8

08002c2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002c30:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <DMA1_Stream6_IRQHandler+0x10>)
 8002c32:	f002 fb1d 	bl	8005270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200006c8 	.word	0x200006c8

08002c40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c44:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <ADC_IRQHandler+0x1c>)
 8002c46:	f000 fce9 	bl	800361c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002c4a:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <ADC_IRQHandler+0x20>)
 8002c4c:	f000 fce6 	bl	800361c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002c50:	4804      	ldr	r0, [pc, #16]	@ (8002c64 <ADC_IRQHandler+0x24>)
 8002c52:	f000 fce3 	bl	800361c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000028 	.word	0x20000028
 8002c60:	20000070 	.word	0x20000070
 8002c64:	200000b8 	.word	0x200000b8

08002c68 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c6c:	4802      	ldr	r0, [pc, #8]	@ (8002c78 <CAN1_RX0_IRQHandler+0x10>)
 8002c6e:	f001 feb8 	bl	80049e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200001c0 	.word	0x200001c0

08002c7c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <DMA1_Stream7_IRQHandler+0x10>)
 8002c82:	f002 faf5 	bl	8005270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000728 	.word	0x20000728

08002c90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c94:	4802      	ldr	r0, [pc, #8]	@ (8002ca0 <DMA2_Stream0_IRQHandler+0x10>)
 8002c96:	f002 faeb 	bl	8005270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000100 	.word	0x20000100

08002ca4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002ca8:	4802      	ldr	r0, [pc, #8]	@ (8002cb4 <DMA2_Stream1_IRQHandler+0x10>)
 8002caa:	f002 fae1 	bl	8005270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000160 	.word	0x20000160

08002cb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002cbc:	4802      	ldr	r0, [pc, #8]	@ (8002cc8 <DMA2_Stream2_IRQHandler+0x10>)
 8002cbe:	f002 fad7 	bl	8005270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200004b8 	.word	0x200004b8

08002ccc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002cd0:	4802      	ldr	r0, [pc, #8]	@ (8002cdc <DMA2_Stream5_IRQHandler+0x10>)
 8002cd2:	f002 facd 	bl	8005270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000518 	.word	0x20000518

08002ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <SystemInit+0x20>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cea:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <SystemInit+0x20>)
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim4_up;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	@ 0x38
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d18:	f107 0320 	add.w	r3, r7, #32
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
 8002d30:	615a      	str	r2, [r3, #20]
 8002d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d34:	4b2f      	ldr	r3, [pc, #188]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d36:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <MX_TIM3_Init+0xf4>)
 8002d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1312;
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d3c:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8002d40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d42:	4b2c      	ldr	r3, [pc, #176]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002d48:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d4a:	22ff      	movs	r2, #255	@ 0xff
 8002d4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4e:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d54:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d5a:	4826      	ldr	r0, [pc, #152]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d5c:	f005 fa86 	bl	800826c <HAL_TIM_Base_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d66:	f7ff fb81 	bl	800246c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d74:	4619      	mov	r1, r3
 8002d76:	481f      	ldr	r0, [pc, #124]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d78:	f005 fdbe 	bl	80088f8 <HAL_TIM_ConfigClockSource>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d82:	f7ff fb73 	bl	800246c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002d86:	481b      	ldr	r0, [pc, #108]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002d88:	f005 fb28 	bl	80083dc <HAL_TIM_OC_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d92:	f7ff fb6b 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d96:	2320      	movs	r3, #32
 8002d98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d9e:	f107 0320 	add.w	r3, r7, #32
 8002da2:	4619      	mov	r1, r3
 8002da4:	4813      	ldr	r0, [pc, #76]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002da6:	f006 f98b 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002db0:	f7ff fb5c 	bl	800246c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4619      	mov	r1, r3
 8002dca:	480a      	ldr	r0, [pc, #40]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002dcc:	f005 fc76 	bl	80086bc <HAL_TIM_OC_ConfigChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002dd6:	f7ff fb49 	bl	800246c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <MX_TIM3_Init+0xf0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0208 	orr.w	r2, r2, #8
 8002de8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dea:	bf00      	nop
 8002dec:	3738      	adds	r7, #56	@ 0x38
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000638 	.word	0x20000638
 8002df8:	40000400 	.word	0x40000400

08002dfc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	@ 0x28
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e02:	f107 0320 	add.w	r3, r7, #32
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	611a      	str	r2, [r3, #16]
 8002e1a:	615a      	str	r2, [r3, #20]
 8002e1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e1e:	4b31      	ldr	r3, [pc, #196]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e20:	4a31      	ldr	r2, [pc, #196]	@ (8002ee8 <MX_TIM4_Init+0xec>)
 8002e22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 466-1;
 8002e24:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e26:	f240 12d1 	movw	r2, #465	@ 0x1d1
 8002e2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3600-1;
 8002e32:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e34:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8002e38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e42:	2280      	movs	r2, #128	@ 0x80
 8002e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e46:	4827      	ldr	r0, [pc, #156]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e48:	f005 fb21 	bl	800848e <HAL_TIM_PWM_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002e52:	f7ff fb0b 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e5e:	f107 0320 	add.w	r3, r7, #32
 8002e62:	4619      	mov	r1, r3
 8002e64:	481f      	ldr	r0, [pc, #124]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e66:	f006 f92b 	bl	80090c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002e70:	f7ff fafc 	bl	800246c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e74:	2360      	movs	r3, #96	@ 0x60
 8002e76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 290;
 8002e78:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8002e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2204      	movs	r2, #4
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4815      	ldr	r0, [pc, #84]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002e8e:	f005 fc71 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002e98:	f7ff fae8 	bl	800246c <Error_Handler>
  }
  sConfigOC.Pulse = 270;
 8002e9c:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	480e      	ldr	r0, [pc, #56]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002eaa:	f005 fc63 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM4_Init+0xbc>
  {
    Error_Handler();
 8002eb4:	f7ff fada 	bl	800246c <Error_Handler>
  }
  sConfigOC.Pulse = 280;
 8002eb8:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	220c      	movs	r2, #12
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4807      	ldr	r0, [pc, #28]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002ec6:	f005 fc55 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002ed0:	f7ff facc 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ed4:	4803      	ldr	r0, [pc, #12]	@ (8002ee4 <MX_TIM4_Init+0xe8>)
 8002ed6:	f000 f8b3 	bl	8003040 <HAL_TIM_MspPostInit>

}
 8002eda:	bf00      	nop
 8002edc:	3728      	adds	r7, #40	@ 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000680 	.word	0x20000680
 8002ee8:	40000800 	.word	0x40000800

08002eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f28 <HAL_TIM_Base_MspInit+0x3c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10d      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_TIM_Base_MspInit+0x40>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	4a09      	ldr	r2, [pc, #36]	@ (8002f2c <HAL_TIM_Base_MspInit+0x40>)
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <HAL_TIM_Base_MspInit+0x40>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003028 <HAL_TIM_PWM_MspInit+0xf8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d16d      	bne.n	800301e <HAL_TIM_PWM_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b39      	ldr	r3, [pc, #228]	@ (800302c <HAL_TIM_PWM_MspInit+0xfc>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	4a38      	ldr	r2, [pc, #224]	@ (800302c <HAL_TIM_PWM_MspInit+0xfc>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f52:	4b36      	ldr	r3, [pc, #216]	@ (800302c <HAL_TIM_PWM_MspInit+0xfc>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_UP Init */
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002f5e:	4b34      	ldr	r3, [pc, #208]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f60:	4a34      	ldr	r2, [pc, #208]	@ (8003034 <HAL_TIM_PWM_MspInit+0x104>)
 8002f62:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002f64:	4b32      	ldr	r3, [pc, #200]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f66:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f6a:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f6c:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f72:	4b2f      	ldr	r3, [pc, #188]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002f78:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f7e:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f80:	4b2b      	ldr	r3, [pc, #172]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f86:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f88:	4b29      	ldr	r3, [pc, #164]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f8e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002f96:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f9c:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002fa2:	4823      	ldr	r0, [pc, #140]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002fa4:	f002 f85e 	bl	8005064 <HAL_DMA_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8002fae:	f7ff fa5d 	bl	800246c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002fb6:	621a      	str	r2, [r3, #32]
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003030 <HAL_TIM_PWM_MspInit+0x100>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_TIM_PWM_MspInit+0x10c>)
 8002fc2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002fc6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fca:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002fda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fde:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fe0:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002fe2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fe6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002fea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fee:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003002:	480d      	ldr	r0, [pc, #52]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8003004:	f002 f82e 	bl	8005064 <HAL_DMA_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_TIM_PWM_MspInit+0xe2>
    {
      Error_Handler();
 800300e:	f7ff fa2d 	bl	800246c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 8003016:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003018:	4a07      	ldr	r2, [pc, #28]	@ (8003038 <HAL_TIM_PWM_MspInit+0x108>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40000800 	.word	0x40000800
 800302c:	40023800 	.word	0x40023800
 8003030:	200006c8 	.word	0x200006c8
 8003034:	400260a0 	.word	0x400260a0
 8003038:	20000728 	.word	0x20000728
 800303c:	400260b8 	.word	0x400260b8

08003040 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 030c 	add.w	r3, r7, #12
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <HAL_TIM_MspPostInit+0x68>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d11e      	bne.n	80030a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <HAL_TIM_MspPostInit+0x6c>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <HAL_TIM_MspPostInit+0x6c>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <HAL_TIM_MspPostInit+0x6c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800307e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003082:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003090:	2302      	movs	r3, #2
 8003092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	4619      	mov	r1, r3
 800309a:	4805      	ldr	r0, [pc, #20]	@ (80030b0 <HAL_TIM_MspPostInit+0x70>)
 800309c:	f002 fc38 	bl	8005910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020400 	.word	0x40020400

080030b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030b8:	f7ff fe12 	bl	8002ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030bc:	480c      	ldr	r0, [pc, #48]	@ (80030f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030be:	490d      	ldr	r1, [pc, #52]	@ (80030f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030c0:	4a0d      	ldr	r2, [pc, #52]	@ (80030f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030c4:	e002      	b.n	80030cc <LoopCopyDataInit>

080030c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ca:	3304      	adds	r3, #4

080030cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030d0:	d3f9      	bcc.n	80030c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030d2:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d8:	e001      	b.n	80030de <LoopFillZerobss>

080030da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030dc:	3204      	adds	r2, #4

080030de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030e0:	d3fb      	bcc.n	80030da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80030e2:	f006 f871 	bl	80091c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030e6:	f7fe ff87 	bl	8001ff8 <main>
  bx  lr    
 80030ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80030f8:	08009614 	.word	0x08009614
  ldr r2, =_sbss
 80030fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003100:	2000078c 	.word	0x2000078c

08003104 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003104:	e7fe      	b.n	8003104 <CAN1_RX1_IRQHandler>
	...

08003108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800310c:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <HAL_Init+0x40>)
 8003112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003118:	4b0b      	ldr	r3, [pc, #44]	@ (8003148 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	@ (8003148 <HAL_Init+0x40>)
 800311e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	@ (8003148 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a07      	ldr	r2, [pc, #28]	@ (8003148 <HAL_Init+0x40>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003130:	2003      	movs	r0, #3
 8003132:	f001 ff55 	bl	8004fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003136:	200f      	movs	r0, #15
 8003138:	f000 f808 	bl	800314c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800313c:	f7ff fd0a 	bl	8002b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003154:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <HAL_InitTick+0x54>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <HAL_InitTick+0x58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f001 ff6d 	bl	800504a <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00e      	b.n	8003198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d80a      	bhi.n	8003196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	2200      	movs	r2, #0
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f001 ff35 	bl	8004ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4a06      	ldr	r2, [pc, #24]	@ (80031a8 <HAL_InitTick+0x5c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000008 	.word	0x20000008
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_IncTick+0x20>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_IncTick+0x24>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <HAL_IncTick+0x24>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000008 	.word	0x20000008
 80031d0:	20000788 	.word	0x20000788

080031d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return uwTick;
 80031d8:	4b03      	ldr	r3, [pc, #12]	@ (80031e8 <HAL_GetTick+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000788 	.word	0x20000788

080031ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f4:	f7ff ffee 	bl	80031d4 <HAL_GetTick>
 80031f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d005      	beq.n	8003212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003206:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <HAL_Delay+0x44>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003212:	bf00      	nop
 8003214:	f7ff ffde 	bl	80031d4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	429a      	cmp	r2, r3
 8003222:	d8f7      	bhi.n	8003214 <HAL_Delay+0x28>
  {
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000008 	.word	0x20000008

08003234 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e033      	b.n	80032b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe f8c6 	bl	80013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800327a:	f023 0302 	bic.w	r3, r3, #2
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fd42 	bl	8003d10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80032a2:	e001      	b.n	80032a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Start+0x1a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0b2      	b.n	800343c <HAL_ADC_Start+0x180>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d018      	beq.n	800331e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032fc:	4b52      	ldr	r3, [pc, #328]	@ (8003448 <HAL_ADC_Start+0x18c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a52      	ldr	r2, [pc, #328]	@ (800344c <HAL_ADC_Start+0x190>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9a      	lsrs	r2, r3, #18
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003310:	e002      	b.n	8003318 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	3b01      	subs	r3, #1
 8003316:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f9      	bne.n	8003312 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d17a      	bne.n	8003422 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003356:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800336a:	d106      	bne.n	800337a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	f023 0206 	bic.w	r2, r3, #6
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	645a      	str	r2, [r3, #68]	@ 0x44
 8003378:	e002      	b.n	8003380 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003388:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_ADC_Start+0x194>)
 800338a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003394:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d12a      	bne.n	80033f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003454 <HAL_ADC_Start+0x198>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d015      	beq.n	80033d8 <HAL_ADC_Start+0x11c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a29      	ldr	r2, [pc, #164]	@ (8003458 <HAL_ADC_Start+0x19c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d105      	bne.n	80033c2 <HAL_ADC_Start+0x106>
 80033b6:	4b26      	ldr	r3, [pc, #152]	@ (8003450 <HAL_ADC_Start+0x194>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a25      	ldr	r2, [pc, #148]	@ (800345c <HAL_ADC_Start+0x1a0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d136      	bne.n	800343a <HAL_ADC_Start+0x17e>
 80033cc:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <HAL_ADC_Start+0x194>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d130      	bne.n	800343a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d129      	bne.n	800343a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	e020      	b.n	800343a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a15      	ldr	r2, [pc, #84]	@ (8003454 <HAL_ADC_Start+0x198>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d11b      	bne.n	800343a <HAL_ADC_Start+0x17e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d114      	bne.n	800343a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	e00b      	b.n	800343a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f043 0210 	orr.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	20000000 	.word	0x20000000
 800344c:	431bde83 	.word	0x431bde83
 8003450:	40012300 	.word	0x40012300
 8003454:	40012000 	.word	0x40012000
 8003458:	40012100 	.word	0x40012100
 800345c:	40012200 	.word	0x40012200

08003460 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_ADC_Start_IT+0x1a>
 8003476:	2302      	movs	r3, #2
 8003478:	e0bd      	b.n	80035f6 <HAL_ADC_Start_IT+0x196>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d018      	beq.n	80034c2 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034a0:	4b58      	ldr	r3, [pc, #352]	@ (8003604 <HAL_ADC_Start_IT+0x1a4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a58      	ldr	r2, [pc, #352]	@ (8003608 <HAL_ADC_Start_IT+0x1a8>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0c9a      	lsrs	r2, r3, #18
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034b4:	e002      	b.n	80034bc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f9      	bne.n	80034b6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	f040 8085 	bne.w	80035dc <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003510:	d106      	bne.n	8003520 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	f023 0206 	bic.w	r2, r3, #6
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
 800351e:	e002      	b.n	8003526 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800352e:	4b37      	ldr	r3, [pc, #220]	@ (800360c <HAL_ADC_Start_IT+0x1ac>)
 8003530:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800353a:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2b00      	cmp	r3, #0
 800355a:	d12a      	bne.n	80035b2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <HAL_ADC_Start_IT+0x1b0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d015      	beq.n	8003592 <HAL_ADC_Start_IT+0x132>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2a      	ldr	r2, [pc, #168]	@ (8003614 <HAL_ADC_Start_IT+0x1b4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d105      	bne.n	800357c <HAL_ADC_Start_IT+0x11c>
 8003570:	4b26      	ldr	r3, [pc, #152]	@ (800360c <HAL_ADC_Start_IT+0x1ac>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a25      	ldr	r2, [pc, #148]	@ (8003618 <HAL_ADC_Start_IT+0x1b8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d136      	bne.n	80035f4 <HAL_ADC_Start_IT+0x194>
 8003586:	4b21      	ldr	r3, [pc, #132]	@ (800360c <HAL_ADC_Start_IT+0x1ac>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d130      	bne.n	80035f4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d129      	bne.n	80035f4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	e020      	b.n	80035f4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a16      	ldr	r2, [pc, #88]	@ (8003610 <HAL_ADC_Start_IT+0x1b0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d11b      	bne.n	80035f4 <HAL_ADC_Start_IT+0x194>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d114      	bne.n	80035f4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	e00b      	b.n	80035f4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	f043 0210 	orr.w	r2, r3, #16
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ec:	f043 0201 	orr.w	r2, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000000 	.word	0x20000000
 8003608:	431bde83 	.word	0x431bde83
 800360c:	40012300 	.word	0x40012300
 8003610:	40012000 	.word	0x40012000
 8003614:	40012100 	.word	0x40012100
 8003618:	40012200 	.word	0x40012200

0800361c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d049      	beq.n	80036e6 <HAL_ADC_IRQHandler+0xca>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d046      	beq.n	80036e6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d12b      	bne.n	80036d6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003682:	2b00      	cmp	r3, #0
 8003684:	d127      	bne.n	80036d6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d119      	bne.n	80036d6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0220 	bic.w	r2, r2, #32
 80036b0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d105      	bne.n	80036d6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9c0 	bl	8003a5c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0212 	mvn.w	r2, #18
 80036e4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d057      	beq.n	80037ac <HAL_ADC_IRQHandler+0x190>
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d054      	beq.n	80037ac <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	d105      	bne.n	800371a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d139      	bne.n	800379c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003740:	2b00      	cmp	r3, #0
 8003742:	d12b      	bne.n	800379c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800374e:	2b00      	cmp	r3, #0
 8003750:	d124      	bne.n	800379c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11d      	bne.n	800379c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003764:	2b00      	cmp	r3, #0
 8003766:	d119      	bne.n	800379c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003776:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0201 	orr.w	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fd01 	bl	80041a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f06f 020c 	mvn.w	r2, #12
 80037aa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ba:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d017      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x1d6>
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d014      	beq.n	80037f2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10d      	bne.n	80037f2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f94e 	bl	8003a84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0201 	mvn.w	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003800:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <HAL_ADC_IRQHandler+0x218>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f043 0202 	orr.w	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f06f 0220 	mvn.w	r2, #32
 8003822:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f937 	bl	8003a98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f06f 0220 	mvn.w	r2, #32
 8003832:	601a      	str	r2, [r3, #0]
  }
}
 8003834:	bf00      	nop
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_ADC_Start_DMA+0x1e>
 8003856:	2302      	movs	r3, #2
 8003858:	e0e9      	b.n	8003a2e <HAL_ADC_Start_DMA+0x1f2>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d018      	beq.n	80038a2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003880:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <HAL_ADC_Start_DMA+0x1fc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6d      	ldr	r2, [pc, #436]	@ (8003a3c <HAL_ADC_Start_DMA+0x200>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0c9a      	lsrs	r2, r3, #18
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003894:	e002      	b.n	800389c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	3b01      	subs	r3, #1
 800389a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f9      	bne.n	8003896 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038b0:	d107      	bne.n	80038c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f040 80a1 	bne.w	8003a14 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80038fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800390c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003910:	d106      	bne.n	8003920 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	f023 0206 	bic.w	r2, r3, #6
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44
 800391e:	e002      	b.n	8003926 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800392e:	4b44      	ldr	r3, [pc, #272]	@ (8003a40 <HAL_ADC_Start_DMA+0x204>)
 8003930:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003936:	4a43      	ldr	r2, [pc, #268]	@ (8003a44 <HAL_ADC_Start_DMA+0x208>)
 8003938:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	4a42      	ldr	r2, [pc, #264]	@ (8003a48 <HAL_ADC_Start_DMA+0x20c>)
 8003940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003946:	4a41      	ldr	r2, [pc, #260]	@ (8003a4c <HAL_ADC_Start_DMA+0x210>)
 8003948:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003952:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003962:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003972:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	334c      	adds	r3, #76	@ 0x4c
 800397e:	4619      	mov	r1, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f001 fc1c 	bl	80051c0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	2b00      	cmp	r3, #0
 8003992:	d12a      	bne.n	80039ea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2d      	ldr	r2, [pc, #180]	@ (8003a50 <HAL_ADC_Start_DMA+0x214>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d015      	beq.n	80039ca <HAL_ADC_Start_DMA+0x18e>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a54 <HAL_ADC_Start_DMA+0x218>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d105      	bne.n	80039b4 <HAL_ADC_Start_DMA+0x178>
 80039a8:	4b25      	ldr	r3, [pc, #148]	@ (8003a40 <HAL_ADC_Start_DMA+0x204>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a27      	ldr	r2, [pc, #156]	@ (8003a58 <HAL_ADC_Start_DMA+0x21c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d136      	bne.n	8003a2c <HAL_ADC_Start_DMA+0x1f0>
 80039be:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <HAL_ADC_Start_DMA+0x204>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d130      	bne.n	8003a2c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d129      	bne.n	8003a2c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	e020      	b.n	8003a2c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <HAL_ADC_Start_DMA+0x214>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d11b      	bne.n	8003a2c <HAL_ADC_Start_DMA+0x1f0>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d114      	bne.n	8003a2c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	e00b      	b.n	8003a2c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	f043 0210 	orr.w	r2, r3, #16
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	40012300 	.word	0x40012300
 8003a44:	08003f09 	.word	0x08003f09
 8003a48:	08003fc3 	.word	0x08003fc3
 8003a4c:	08003fdf 	.word	0x08003fdf
 8003a50:	40012000 	.word	0x40012000
 8003a54:	40012100 	.word	0x40012100
 8003a58:	40012200 	.word	0x40012200

08003a5c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x1c>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e113      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x244>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b09      	cmp	r3, #9
 8003ad6:	d925      	bls.n	8003b24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68d9      	ldr	r1, [r3, #12]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4413      	add	r3, r2
 8003aec:	3b1e      	subs	r3, #30
 8003aee:	2207      	movs	r2, #7
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43da      	mvns	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	400a      	ands	r2, r1
 8003afc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68d9      	ldr	r1, [r3, #12]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	4603      	mov	r3, r0
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4403      	add	r3, r0
 8003b16:	3b1e      	subs	r3, #30
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	e022      	b.n	8003b6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6919      	ldr	r1, [r3, #16]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	4613      	mov	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4413      	add	r3, r2
 8003b38:	2207      	movs	r2, #7
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	400a      	ands	r2, r1
 8003b46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6919      	ldr	r1, [r3, #16]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4618      	mov	r0, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4403      	add	r3, r0
 8003b60:	409a      	lsls	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d824      	bhi.n	8003bbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	3b05      	subs	r3, #5
 8003b84:	221f      	movs	r2, #31
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	400a      	ands	r2, r1
 8003b92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	3b05      	subs	r3, #5
 8003bae:	fa00 f203 	lsl.w	r2, r0, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bba:	e04c      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d824      	bhi.n	8003c0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3b23      	subs	r3, #35	@ 0x23
 8003bd6:	221f      	movs	r2, #31
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	400a      	ands	r2, r1
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b23      	subs	r3, #35	@ 0x23
 8003c00:	fa00 f203 	lsl.w	r2, r0, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c0c:	e023      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3b41      	subs	r3, #65	@ 0x41
 8003c20:	221f      	movs	r2, #31
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	3b41      	subs	r3, #65	@ 0x41
 8003c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c56:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <HAL_ADC_ConfigChannel+0x250>)
 8003c58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a28      	ldr	r2, [pc, #160]	@ (8003d00 <HAL_ADC_ConfigChannel+0x254>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10f      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x1d8>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b12      	cmp	r3, #18
 8003c6a:	d10b      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1d      	ldr	r2, [pc, #116]	@ (8003d00 <HAL_ADC_ConfigChannel+0x254>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d12b      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x23a>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <HAL_ADC_ConfigChannel+0x1f4>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b11      	cmp	r3, #17
 8003c9e:	d122      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a11      	ldr	r2, [pc, #68]	@ (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d111      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cc2:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <HAL_ADC_ConfigChannel+0x25c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a11      	ldr	r2, [pc, #68]	@ (8003d0c <HAL_ADC_ConfigChannel+0x260>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	0c9a      	lsrs	r2, r3, #18
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003cd8:	e002      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f9      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40012300 	.word	0x40012300
 8003d00:	40012000 	.word	0x40012000
 8003d04:	10000012 	.word	0x10000012
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	431bde83 	.word	0x431bde83

08003d10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d18:	4b79      	ldr	r3, [pc, #484]	@ (8003f00 <ADC_Init+0x1f0>)
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	021a      	lsls	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6899      	ldr	r1, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	4a58      	ldr	r2, [pc, #352]	@ (8003f04 <ADC_Init+0x1f4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003db6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6899      	ldr	r1, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6899      	ldr	r1, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	e00f      	b.n	8003e0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0202 	bic.w	r2, r2, #2
 8003e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6899      	ldr	r1, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7e1b      	ldrb	r3, [r3, #24]
 8003e28:	005a      	lsls	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003e5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6859      	ldr	r1, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	3b01      	subs	r3, #1
 8003e68:	035a      	lsls	r2, r3, #13
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	e007      	b.n	8003e84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	051a      	lsls	r2, r3, #20
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ec6:	025a      	lsls	r2, r3, #9
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	029a      	lsls	r2, r3, #10
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40012300 	.word	0x40012300
 8003f04:	0f000001 	.word	0x0f000001

08003f08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d13c      	bne.n	8003f9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d12b      	bne.n	8003f94 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d127      	bne.n	8003f94 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d119      	bne.n	8003f94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0220 	bic.w	r2, r2, #32
 8003f6e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d105      	bne.n	8003f94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fd61 	bl	8003a5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f9a:	e00e      	b.n	8003fba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff fd75 	bl	8003a98 <HAL_ADC_ErrorCallback>
}
 8003fae:	e004      	b.n	8003fba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7ff fd4d 	bl	8003a70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2240      	movs	r2, #64	@ 0x40
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff fd4a 	bl	8003a98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData   Pointer to buffer in which transferred from ADC peripheral to memory will be stored.
  * @param  Length  The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  /* Process locked */
  __HAL_LOCK(hadc);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_ADCEx_MultiModeStart_DMA+0x1e>
 8004026:	2302      	movs	r3, #2
 8004028:	e0ab      	b.n	8004182 <HAL_ADCEx_MultiModeStart_DMA+0x176>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d018      	beq.n	8004072 <HAL_ADCEx_MultiModeStart_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	609a      	str	r2, [r3, #8]

    /* Delay for temperature sensor stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004050:	4b4e      	ldr	r3, [pc, #312]	@ (800418c <HAL_ADCEx_MultiModeStart_DMA+0x180>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a4e      	ldr	r2, [pc, #312]	@ (8004190 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	0c9a      	lsrs	r2, r3, #18
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004064:	e002      	b.n	800406c <HAL_ADCEx_MultiModeStart_DMA+0x60>
    {
      counter--;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3b01      	subs	r3, #1
 800406a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f9      	bne.n	8004066 <HAL_ADCEx_MultiModeStart_DMA+0x5a>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b01      	cmp	r3, #1
 800407e:	d173      	bne.n	8004168 <HAL_ADCEx_MultiModeStart_DMA+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_ADCEx_MultiModeStart_DMA+0xa6>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040be:	d106      	bne.n	80040ce <HAL_ADCEx_MultiModeStart_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c4:	f023 0206 	bic.w	r2, r3, #6
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80040cc:	e002      	b.n	80040d4 <HAL_ADCEx_MultiModeStart_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004194 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80040e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004198 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	4a2a      	ldr	r2, [pc, #168]	@ (800419c <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 80040f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0202 	mvn.w	r2, #2
 80040fc:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800410c:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800410e:	4b24      	ldr	r3, [pc, #144]	@ (80041a0 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8004110:	617b      	str	r3, [r7, #20]

    if (hadc->Init.DMAContinuousRequests != DISABLE)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    {
      /* Enable the selected ADC DMA request after last transfer */
      tmpADC_Common->CCR |= ADC_CCR_DDS;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	e005      	b.n	8004136 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    }
    else
    {
      /* Disable the selected ADC EOC rising on each regular channel conversion */
      tmpADC_Common->CCR &= ~ADC_CCR_DDS;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	605a      	str	r2, [r3, #4]
    }

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3308      	adds	r3, #8
 800413e:	4619      	mov	r1, r3
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f001 f83c 	bl	80051c0 <HAL_DMA_Start_IT>

    /* if no external trigger present enable software conversion of regular channels */
    if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d114      	bne.n	8004180 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	e00b      	b.n	8004180 <HAL_ADCEx_MultiModeStart_DMA+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000000 	.word	0x20000000
 8004190:	431bde83 	.word	0x431bde83
 8004194:	08004245 	.word	0x08004245
 8004198:	080042eb 	.word	0x080042eb
 800419c:	08004307 	.word	0x08004307
 80041a0:	40012300 	.word	0x40012300

080041a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e031      	b.n	8004234 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041d8:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80041da:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 021f 	bic.w	r2, r3, #31
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	431a      	orrs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40012300 	.word	0x40012300

08004244 <ADC_MultiModeDMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d13c      	bne.n	80042d8 <ADC_MultiModeDMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d12b      	bne.n	80042d0 <ADC_MultiModeDMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800427c:	2b00      	cmp	r3, #0
 800427e:	d127      	bne.n	80042d0 <ADC_MultiModeDMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <ADC_MultiModeDMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004298:	2b00      	cmp	r3, #0
 800429a:	d119      	bne.n	80042d0 <ADC_MultiModeDMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0220 	bic.w	r2, r2, #32
 80042aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <ADC_MultiModeDMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f043 0201 	orr.w	r2, r3, #1
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff fbc3 	bl	8003a5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80042d6:	e004      	b.n	80042e2 <ADC_MultiModeDMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
}
 80042e2:	bf00      	nop
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <ADC_MultiModeDMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fbb9 	bl	8003a70 <HAL_ADC_ConvHalfCpltCallback>
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <ADC_MultiModeDMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2240      	movs	r2, #64	@ 0x40
 8004318:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
  HAL_ADC_ErrorCallback(hadc);
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff fbb6 	bl	8003a98 <HAL_ADC_ErrorCallback>
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0ed      	b.n	8004522 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd fa32 	bl	80017bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004368:	f7fe ff34 	bl	80031d4 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800436e:	e012      	b.n	8004396 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004370:	f7fe ff30 	bl	80031d4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b0a      	cmp	r3, #10
 800437c:	d90b      	bls.n	8004396 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2205      	movs	r2, #5
 800438e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0c5      	b.n	8004522 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0e5      	beq.n	8004370 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0202 	bic.w	r2, r2, #2
 80043b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043b4:	f7fe ff0e 	bl	80031d4 <HAL_GetTick>
 80043b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043ba:	e012      	b.n	80043e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043bc:	f7fe ff0a 	bl	80031d4 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b0a      	cmp	r3, #10
 80043c8:	d90b      	bls.n	80043e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2205      	movs	r2, #5
 80043da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e09f      	b.n	8004522 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7e1b      	ldrb	r3, [r3, #24]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d108      	bne.n	800440a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e007      	b.n	800441a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004418:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7e5b      	ldrb	r3, [r3, #25]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d108      	bne.n	8004434 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e007      	b.n	8004444 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004442:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	7e9b      	ldrb	r3, [r3, #26]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d108      	bne.n	800445e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0220 	orr.w	r2, r2, #32
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e007      	b.n	800446e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0220 	bic.w	r2, r2, #32
 800446c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7edb      	ldrb	r3, [r3, #27]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d108      	bne.n	8004488 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0210 	bic.w	r2, r2, #16
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e007      	b.n	8004498 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0210 	orr.w	r2, r2, #16
 8004496:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	7f1b      	ldrb	r3, [r3, #28]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d108      	bne.n	80044b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0208 	orr.w	r2, r2, #8
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e007      	b.n	80044c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0208 	bic.w	r2, r2, #8
 80044c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7f5b      	ldrb	r3, [r3, #29]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d108      	bne.n	80044dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0204 	orr.w	r2, r2, #4
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e007      	b.n	80044ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0204 	bic.w	r2, r2, #4
 80044ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	ea42 0103 	orr.w	r1, r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	1e5a      	subs	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d12e      	bne.n	800459c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004556:	f7fe fe3d 	bl	80031d4 <HAL_GetTick>
 800455a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800455c:	e012      	b.n	8004584 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800455e:	f7fe fe39 	bl	80031d4 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b0a      	cmp	r3, #10
 800456a:	d90b      	bls.n	8004584 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2205      	movs	r2, #5
 800457c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e012      	b.n	80045aa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	e006      	b.n	80045aa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b089      	sub	sp, #36	@ 0x24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d003      	beq.n	80045de <HAL_CAN_AddTxMessage+0x2c>
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	f040 80ad 	bne.w	8004738 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8095 	beq.w	8004728 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	0e1b      	lsrs	r3, r3, #24
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004608:	2201      	movs	r2, #1
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	409a      	lsls	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10d      	bne.n	8004636 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	6809      	ldr	r1, [r1, #0]
 8004628:	431a      	orrs	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	3318      	adds	r3, #24
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	440b      	add	r3, r1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e00f      	b.n	8004656 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004640:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004646:	68f9      	ldr	r1, [r7, #12]
 8004648:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800464a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3318      	adds	r3, #24
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	440b      	add	r3, r1
 8004654:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	3318      	adds	r3, #24
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	440b      	add	r3, r1
 8004666:	3304      	adds	r3, #4
 8004668:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	7d1b      	ldrb	r3, [r3, #20]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d111      	bne.n	8004696 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	3318      	adds	r3, #24
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	4413      	add	r3, r2
 800467e:	3304      	adds	r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6811      	ldr	r1, [r2, #0]
 8004686:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	3318      	adds	r3, #24
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	440b      	add	r3, r1
 8004692:	3304      	adds	r3, #4
 8004694:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3307      	adds	r3, #7
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	061a      	lsls	r2, r3, #24
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3306      	adds	r3, #6
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	041b      	lsls	r3, r3, #16
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3305      	adds	r3, #5
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	4313      	orrs	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	3204      	adds	r2, #4
 80046b6:	7812      	ldrb	r2, [r2, #0]
 80046b8:	4610      	mov	r0, r2
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	6811      	ldr	r1, [r2, #0]
 80046be:	ea43 0200 	orr.w	r2, r3, r0
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	440b      	add	r3, r1
 80046c8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80046cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3303      	adds	r3, #3
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	061a      	lsls	r2, r3, #24
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3302      	adds	r3, #2
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3301      	adds	r3, #1
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	4313      	orrs	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	7812      	ldrb	r2, [r2, #0]
 80046ee:	4610      	mov	r0, r2
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	6811      	ldr	r1, [r2, #0]
 80046f4:	ea43 0200 	orr.w	r2, r3, r0
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	440b      	add	r3, r1
 80046fe:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004702:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3318      	adds	r3, #24
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	4413      	add	r3, r2
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	6811      	ldr	r1, [r2, #0]
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	3318      	adds	r3, #24
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	440b      	add	r3, r1
 8004722:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e00e      	b.n	8004746 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e006      	b.n	8004746 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	@ 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004752:	b480      	push	{r7}
 8004754:	b087      	sub	sp, #28
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004766:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d003      	beq.n	8004776 <HAL_CAN_GetRxMessage+0x24>
 800476e:	7dfb      	ldrb	r3, [r7, #23]
 8004770:	2b02      	cmp	r3, #2
 8004772:	f040 8103 	bne.w	800497c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10e      	bne.n	800479a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d116      	bne.n	80047b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0f7      	b.n	800498a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0e8      	b.n	800498a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	331b      	adds	r3, #27
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	4413      	add	r3, r2
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0204 	and.w	r2, r3, #4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	331b      	adds	r3, #27
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	4413      	add	r3, r2
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0d5b      	lsrs	r3, r3, #21
 80047e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	331b      	adds	r3, #27
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	4413      	add	r3, r2
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	331b      	adds	r3, #27
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	4413      	add	r3, r2
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0202 	and.w	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	331b      	adds	r3, #27
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	4413      	add	r3, r2
 800482a:	3304      	adds	r3, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2208      	movs	r2, #8
 800483a:	611a      	str	r2, [r3, #16]
 800483c:	e00b      	b.n	8004856 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	331b      	adds	r3, #27
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	4413      	add	r3, r2
 800484a:	3304      	adds	r3, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 020f 	and.w	r2, r3, #15
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	331b      	adds	r3, #27
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	4413      	add	r3, r2
 8004862:	3304      	adds	r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	b2da      	uxtb	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	331b      	adds	r3, #27
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	4413      	add	r3, r2
 800487a:	3304      	adds	r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	4413      	add	r3, r2
 8004890:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	0a1a      	lsrs	r2, r3, #8
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	4413      	add	r3, r2
 80048c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	0c1a      	lsrs	r2, r3, #16
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	3302      	adds	r3, #2
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0e1a      	lsrs	r2, r3, #24
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	3303      	adds	r3, #3
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	3304      	adds	r3, #4
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4413      	add	r3, r2
 800490c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	0a1a      	lsrs	r2, r3, #8
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	3305      	adds	r3, #5
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	4413      	add	r3, r2
 8004926:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0c1a      	lsrs	r2, r3, #16
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	3306      	adds	r3, #6
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	4413      	add	r3, r2
 8004940:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	0e1a      	lsrs	r2, r3, #24
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	3307      	adds	r3, #7
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d108      	bne.n	8004968 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0220 	orr.w	r2, r2, #32
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	e007      	b.n	8004978 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0220 	orr.w	r2, r2, #32
 8004976:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e006      	b.n	800498a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d002      	beq.n	80049b4 <HAL_CAN_ActivateNotification+0x1e>
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d109      	bne.n	80049c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6959      	ldr	r1, [r3, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e006      	b.n	80049d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b08a      	sub	sp, #40	@ 0x28
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d07c      	beq.n	8004b22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d023      	beq.n	8004a7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2201      	movs	r2, #1
 8004a38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f983 	bl	8004d50 <HAL_CAN_TxMailbox0CompleteCallback>
 8004a4a:	e016      	b.n	8004a7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5e:	e00c      	b.n	8004a7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d004      	beq.n	8004a74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a72:	e002      	b.n	8004a7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f989 	bl	8004d8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d024      	beq.n	8004ace <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f963 	bl	8004d64 <HAL_CAN_TxMailbox1CompleteCallback>
 8004a9e:	e016      	b.n	8004ace <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab2:	e00c      	b.n	8004ace <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac6:	e002      	b.n	8004ace <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f969 	bl	8004da0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d024      	beq.n	8004b22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ae0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f943 	bl	8004d78 <HAL_CAN_TxMailbox2CompleteCallback>
 8004af2:	e016      	b.n	8004b22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b06:	e00c      	b.n	8004b22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1a:	e002      	b.n	8004b22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f949 	bl	8004db4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00c      	beq.n	8004b46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2210      	movs	r2, #16
 8004b44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00b      	beq.n	8004b68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d006      	beq.n	8004b68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2208      	movs	r2, #8
 8004b60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f930 	bl	8004dc8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fd f9a7 	bl	8001ed4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00c      	beq.n	8004baa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f912 	bl	8004df0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8f9 	bl	8004ddc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2210      	movs	r2, #16
 8004c04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f8fc 	bl	8004e04 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00b      	beq.n	8004c2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d006      	beq.n	8004c2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2208      	movs	r2, #8
 8004c26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f8f5 	bl	8004e18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d07b      	beq.n	8004d30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d072      	beq.n	8004d28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d043      	beq.n	8004d28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d03e      	beq.n	8004d28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cb0:	2b60      	cmp	r3, #96	@ 0x60
 8004cb2:	d02b      	beq.n	8004d0c <HAL_CAN_IRQHandler+0x32a>
 8004cb4:	2b60      	cmp	r3, #96	@ 0x60
 8004cb6:	d82e      	bhi.n	8004d16 <HAL_CAN_IRQHandler+0x334>
 8004cb8:	2b50      	cmp	r3, #80	@ 0x50
 8004cba:	d022      	beq.n	8004d02 <HAL_CAN_IRQHandler+0x320>
 8004cbc:	2b50      	cmp	r3, #80	@ 0x50
 8004cbe:	d82a      	bhi.n	8004d16 <HAL_CAN_IRQHandler+0x334>
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d019      	beq.n	8004cf8 <HAL_CAN_IRQHandler+0x316>
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d826      	bhi.n	8004d16 <HAL_CAN_IRQHandler+0x334>
 8004cc8:	2b30      	cmp	r3, #48	@ 0x30
 8004cca:	d010      	beq.n	8004cee <HAL_CAN_IRQHandler+0x30c>
 8004ccc:	2b30      	cmp	r3, #48	@ 0x30
 8004cce:	d822      	bhi.n	8004d16 <HAL_CAN_IRQHandler+0x334>
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d002      	beq.n	8004cda <HAL_CAN_IRQHandler+0x2f8>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d005      	beq.n	8004ce4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004cd8:	e01d      	b.n	8004d16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	f043 0308 	orr.w	r3, r3, #8
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ce2:	e019      	b.n	8004d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	f043 0310 	orr.w	r3, r3, #16
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004cec:	e014      	b.n	8004d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	f043 0320 	orr.w	r3, r3, #32
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004cf6:	e00f      	b.n	8004d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d00:	e00a      	b.n	8004d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d0a:	e005      	b.n	8004d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d14:	e000      	b.n	8004d18 <HAL_CAN_IRQHandler+0x336>
            break;
 8004d16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f872 	bl	8004e2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3728      	adds	r7, #40	@ 0x28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e50:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <__NVIC_SetPriorityGrouping+0x44>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e72:	4a04      	ldr	r2, [pc, #16]	@ (8004e84 <__NVIC_SetPriorityGrouping+0x44>)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	60d3      	str	r3, [r2, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	f003 0307 	and.w	r3, r3, #7
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	db0b      	blt.n	8004ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	f003 021f 	and.w	r2, r3, #31
 8004ebc:	4907      	ldr	r1, [pc, #28]	@ (8004edc <__NVIC_EnableIRQ+0x38>)
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e100 	.word	0xe000e100

08004ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	db0a      	blt.n	8004f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	490c      	ldr	r1, [pc, #48]	@ (8004f2c <__NVIC_SetPriority+0x4c>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	0112      	lsls	r2, r2, #4
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	440b      	add	r3, r1
 8004f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f08:	e00a      	b.n	8004f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4908      	ldr	r1, [pc, #32]	@ (8004f30 <__NVIC_SetPriority+0x50>)
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	3b04      	subs	r3, #4
 8004f18:	0112      	lsls	r2, r2, #4
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	761a      	strb	r2, [r3, #24]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000e100 	.word	0xe000e100
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	@ 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f1c3 0307 	rsb	r3, r3, #7
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	bf28      	it	cs
 8004f52:	2304      	movcs	r3, #4
 8004f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	2b06      	cmp	r3, #6
 8004f5c:	d902      	bls.n	8004f64 <NVIC_EncodePriority+0x30>
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3b03      	subs	r3, #3
 8004f62:	e000      	b.n	8004f66 <NVIC_EncodePriority+0x32>
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f68:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43da      	mvns	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	401a      	ands	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	43d9      	mvns	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f8c:	4313      	orrs	r3, r2
         );
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3724      	adds	r7, #36	@ 0x24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fac:	d301      	bcc.n	8004fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e00f      	b.n	8004fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004fdc <SysTick_Config+0x40>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fba:	210f      	movs	r1, #15
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	f7ff ff8e 	bl	8004ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fc4:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <SysTick_Config+0x40>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fca:	4b04      	ldr	r3, [pc, #16]	@ (8004fdc <SysTick_Config+0x40>)
 8004fcc:	2207      	movs	r2, #7
 8004fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	e000e010 	.word	0xe000e010

08004fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ff29 	bl	8004e40 <__NVIC_SetPriorityGrouping>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005008:	f7ff ff3e 	bl	8004e88 <__NVIC_GetPriorityGrouping>
 800500c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	6978      	ldr	r0, [r7, #20]
 8005014:	f7ff ff8e 	bl	8004f34 <NVIC_EncodePriority>
 8005018:	4602      	mov	r2, r0
 800501a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff ff5d 	bl	8004ee0 <__NVIC_SetPriority>
}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	4603      	mov	r3, r0
 8005036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff ff31 	bl	8004ea4 <__NVIC_EnableIRQ>
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff ffa2 	bl	8004f9c <SysTick_Config>
 8005058:	4603      	mov	r3, r0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005070:	f7fe f8b0 	bl	80031d4 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e099      	b.n	80051b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050a0:	e00f      	b.n	80050c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050a2:	f7fe f897 	bl	80031d4 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d908      	bls.n	80050c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2203      	movs	r2, #3
 80050ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e078      	b.n	80051b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e8      	bne.n	80050a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4b38      	ldr	r3, [pc, #224]	@ (80051bc <HAL_DMA_Init+0x158>)
 80050dc:	4013      	ands	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005118:	2b04      	cmp	r3, #4
 800511a:	d107      	bne.n	800512c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005124:	4313      	orrs	r3, r2
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0307 	bic.w	r3, r3, #7
 8005142:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	2b04      	cmp	r3, #4
 8005154:	d117      	bne.n	8005186 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00e      	beq.n	8005186 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fa6f 	bl	800564c <DMA_CheckFifoParam>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2240      	movs	r2, #64	@ 0x40
 8005178:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005182:	2301      	movs	r3, #1
 8005184:	e016      	b.n	80051b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa26 	bl	80055e0 <DMA_CalcBaseAndBitshift>
 8005194:	4603      	mov	r3, r0
 8005196:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519c:	223f      	movs	r2, #63	@ 0x3f
 800519e:	409a      	lsls	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	f010803f 	.word	0xf010803f

080051c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_DMA_Start_IT+0x26>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e040      	b.n	8005268 <HAL_DMA_Start_IT+0xa8>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d12f      	bne.n	800525a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f9b8 	bl	8005584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005218:	223f      	movs	r2, #63	@ 0x3f
 800521a:	409a      	lsls	r2, r3
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0216 	orr.w	r2, r2, #22
 800522e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0208 	orr.w	r2, r2, #8
 8005246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e005      	b.n	8005266 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005262:	2302      	movs	r3, #2
 8005264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005266:	7dfb      	ldrb	r3, [r7, #23]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800527c:	4b8e      	ldr	r3, [pc, #568]	@ (80054b8 <HAL_DMA_IRQHandler+0x248>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a8e      	ldr	r2, [pc, #568]	@ (80054bc <HAL_DMA_IRQHandler+0x24c>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	0a9b      	lsrs	r3, r3, #10
 8005288:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529a:	2208      	movs	r2, #8
 800529c:	409a      	lsls	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01a      	beq.n	80052dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d013      	beq.n	80052dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0204 	bic.w	r2, r2, #4
 80052c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c8:	2208      	movs	r2, #8
 80052ca:	409a      	lsls	r2, r3
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d4:	f043 0201 	orr.w	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e0:	2201      	movs	r2, #1
 80052e2:	409a      	lsls	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d012      	beq.n	8005312 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fe:	2201      	movs	r2, #1
 8005300:	409a      	lsls	r2, r3
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530a:	f043 0202 	orr.w	r2, r3, #2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005316:	2204      	movs	r2, #4
 8005318:	409a      	lsls	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4013      	ands	r3, r2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d012      	beq.n	8005348 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00b      	beq.n	8005348 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005334:	2204      	movs	r2, #4
 8005336:	409a      	lsls	r2, r3
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005340:	f043 0204 	orr.w	r2, r3, #4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534c:	2210      	movs	r2, #16
 800534e:	409a      	lsls	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d043      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d03c      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536a:	2210      	movs	r2, #16
 800536c:	409a      	lsls	r2, r3
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d018      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d108      	bne.n	80053a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d024      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	4798      	blx	r3
 800539e:	e01f      	b.n	80053e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01b      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
 80053b0:	e016      	b.n	80053e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d107      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0208 	bic.w	r2, r2, #8
 80053ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e4:	2220      	movs	r2, #32
 80053e6:	409a      	lsls	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 808f 	beq.w	8005510 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8087 	beq.w	8005510 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005406:	2220      	movs	r2, #32
 8005408:	409a      	lsls	r2, r3
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b05      	cmp	r3, #5
 8005418:	d136      	bne.n	8005488 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0216 	bic.w	r2, r2, #22
 8005428:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005438:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <HAL_DMA_IRQHandler+0x1da>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0208 	bic.w	r2, r2, #8
 8005458:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545e:	223f      	movs	r2, #63	@ 0x3f
 8005460:	409a      	lsls	r2, r3
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547a:	2b00      	cmp	r3, #0
 800547c:	d07e      	beq.n	800557c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
        }
        return;
 8005486:	e079      	b.n	800557c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01d      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10d      	bne.n	80054c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d031      	beq.n	8005510 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
 80054b4:	e02c      	b.n	8005510 <HAL_DMA_IRQHandler+0x2a0>
 80054b6:	bf00      	nop
 80054b8:	20000000 	.word	0x20000000
 80054bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d023      	beq.n	8005510 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	4798      	blx	r3
 80054d0:	e01e      	b.n	8005510 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10f      	bne.n	8005500 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0210 	bic.w	r2, r2, #16
 80054ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005514:	2b00      	cmp	r3, #0
 8005516:	d032      	beq.n	800557e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d022      	beq.n	800556a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2205      	movs	r2, #5
 8005528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	3301      	adds	r3, #1
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	429a      	cmp	r2, r3
 8005546:	d307      	bcc.n	8005558 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f2      	bne.n	800553c <HAL_DMA_IRQHandler+0x2cc>
 8005556:	e000      	b.n	800555a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005558:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	4798      	blx	r3
 800557a:	e000      	b.n	800557e <HAL_DMA_IRQHandler+0x30e>
        return;
 800557c:	bf00      	nop
    }
  }
}
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b40      	cmp	r3, #64	@ 0x40
 80055b0:	d108      	bne.n	80055c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055c2:	e007      	b.n	80055d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	3b10      	subs	r3, #16
 80055f0:	4a14      	ldr	r2, [pc, #80]	@ (8005644 <DMA_CalcBaseAndBitshift+0x64>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055fa:	4a13      	ldr	r2, [pc, #76]	@ (8005648 <DMA_CalcBaseAndBitshift+0x68>)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b03      	cmp	r3, #3
 800560c:	d909      	bls.n	8005622 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	1d1a      	adds	r2, r3, #4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005620:	e007      	b.n	8005632 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	aaaaaaab 	.word	0xaaaaaaab
 8005648:	080095fc 	.word	0x080095fc

0800564c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11f      	bne.n	80056a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d856      	bhi.n	800571a <DMA_CheckFifoParam+0xce>
 800566c:	a201      	add	r2, pc, #4	@ (adr r2, 8005674 <DMA_CheckFifoParam+0x28>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	08005685 	.word	0x08005685
 8005678:	08005697 	.word	0x08005697
 800567c:	08005685 	.word	0x08005685
 8005680:	0800571b 	.word	0x0800571b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d046      	beq.n	800571e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005694:	e043      	b.n	800571e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800569e:	d140      	bne.n	8005722 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a4:	e03d      	b.n	8005722 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ae:	d121      	bne.n	80056f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d837      	bhi.n	8005726 <DMA_CheckFifoParam+0xda>
 80056b6:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <DMA_CheckFifoParam+0x70>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056cd 	.word	0x080056cd
 80056c0:	080056d3 	.word	0x080056d3
 80056c4:	080056cd 	.word	0x080056cd
 80056c8:	080056e5 	.word	0x080056e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	e030      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d025      	beq.n	800572a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e2:	e022      	b.n	800572a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056ec:	d11f      	bne.n	800572e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056f2:	e01c      	b.n	800572e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d903      	bls.n	8005702 <DMA_CheckFifoParam+0xb6>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d003      	beq.n	8005708 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005700:	e018      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
      break;
 8005706:	e015      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      break;
 8005718:	e00b      	b.n	8005732 <DMA_CheckFifoParam+0xe6>
      break;
 800571a:	bf00      	nop
 800571c:	e00a      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
      break;
 800571e:	bf00      	nop
 8005720:	e008      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
      break;
 8005722:	bf00      	nop
 8005724:	e006      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
      break;
 8005726:	bf00      	nop
 8005728:	e004      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
      break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
      break;   
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <DMA_CheckFifoParam+0xe8>
      break;
 8005732:	bf00      	nop
    }
  } 
  
  return status; 
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop

08005744 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e08d      	b.n	8005872 <HAL_FMPI2C_Init+0x12e>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc f922 	bl	80019b4 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2224      	movs	r2, #36	@ 0x24
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005794:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057a4:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d107      	bne.n	80057be <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057ba:	609a      	str	r2, [r3, #8]
 80057bc:	e006      	b.n	80057cc <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80057ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d108      	bne.n	80057e6 <HAL_FMPI2C_Init+0xa2>
  {
    SET_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e2:	605a      	str	r2, [r3, #4]
 80057e4:	e007      	b.n	80057f6 <HAL_FMPI2C_Init+0xb2>
  }
  else
  {
    /* Clear the FMPI2C ADD10 bit */
    CLEAR_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005808:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005818:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	645a      	str	r2, [r3, #68]	@ 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b20      	cmp	r3, #32
 800588e:	d138      	bne.n	8005902 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 800589a:	2302      	movs	r3, #2
 800589c:	e032      	b.n	8005904 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2224      	movs	r2, #36	@ 0x24
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0201 	bic.w	r2, r2, #1
 80058bc:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e000      	b.n	8005904 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005902:	2302      	movs	r3, #2
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	@ 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005922:	2300      	movs	r3, #0
 8005924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	e165      	b.n	8005bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800592c:	2201      	movs	r2, #1
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4013      	ands	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	429a      	cmp	r2, r3
 8005946:	f040 8154 	bne.w	8005bf2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b01      	cmp	r3, #1
 8005954:	d005      	beq.n	8005962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800595e:	2b02      	cmp	r3, #2
 8005960:	d130      	bne.n	80059c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	2203      	movs	r2, #3
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43db      	mvns	r3, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4013      	ands	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005998:	2201      	movs	r2, #1
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 0201 	and.w	r2, r3, #1
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d017      	beq.n	8005a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	2203      	movs	r2, #3
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d123      	bne.n	8005a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	08da      	lsrs	r2, r3, #3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3208      	adds	r2, #8
 8005a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	220f      	movs	r2, #15
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	08da      	lsrs	r2, r3, #3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3208      	adds	r2, #8
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	2203      	movs	r2, #3
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	43db      	mvns	r3, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 0203 	and.w	r2, r3, #3
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80ae 	beq.w	8005bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8005c10 <HAL_GPIO_Init+0x300>)
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8005c10 <HAL_GPIO_Init+0x300>)
 8005aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c10 <HAL_GPIO_Init+0x300>)
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ab2:	4a58      	ldr	r2, [pc, #352]	@ (8005c14 <HAL_GPIO_Init+0x304>)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	3302      	adds	r3, #2
 8005aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	220f      	movs	r2, #15
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a4f      	ldr	r2, [pc, #316]	@ (8005c18 <HAL_GPIO_Init+0x308>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d025      	beq.n	8005b2a <HAL_GPIO_Init+0x21a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a4e      	ldr	r2, [pc, #312]	@ (8005c1c <HAL_GPIO_Init+0x30c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01f      	beq.n	8005b26 <HAL_GPIO_Init+0x216>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a4d      	ldr	r2, [pc, #308]	@ (8005c20 <HAL_GPIO_Init+0x310>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d019      	beq.n	8005b22 <HAL_GPIO_Init+0x212>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a4c      	ldr	r2, [pc, #304]	@ (8005c24 <HAL_GPIO_Init+0x314>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <HAL_GPIO_Init+0x20e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a4b      	ldr	r2, [pc, #300]	@ (8005c28 <HAL_GPIO_Init+0x318>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00d      	beq.n	8005b1a <HAL_GPIO_Init+0x20a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a4a      	ldr	r2, [pc, #296]	@ (8005c2c <HAL_GPIO_Init+0x31c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <HAL_GPIO_Init+0x206>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a49      	ldr	r2, [pc, #292]	@ (8005c30 <HAL_GPIO_Init+0x320>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d101      	bne.n	8005b12 <HAL_GPIO_Init+0x202>
 8005b0e:	2306      	movs	r3, #6
 8005b10:	e00c      	b.n	8005b2c <HAL_GPIO_Init+0x21c>
 8005b12:	2307      	movs	r3, #7
 8005b14:	e00a      	b.n	8005b2c <HAL_GPIO_Init+0x21c>
 8005b16:	2305      	movs	r3, #5
 8005b18:	e008      	b.n	8005b2c <HAL_GPIO_Init+0x21c>
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	e006      	b.n	8005b2c <HAL_GPIO_Init+0x21c>
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e004      	b.n	8005b2c <HAL_GPIO_Init+0x21c>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e002      	b.n	8005b2c <HAL_GPIO_Init+0x21c>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <HAL_GPIO_Init+0x21c>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	f002 0203 	and.w	r2, r2, #3
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	4093      	lsls	r3, r2
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b3c:	4935      	ldr	r1, [pc, #212]	@ (8005c14 <HAL_GPIO_Init+0x304>)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	089b      	lsrs	r3, r3, #2
 8005b42:	3302      	adds	r3, #2
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c34 <HAL_GPIO_Init+0x324>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b6e:	4a31      	ldr	r2, [pc, #196]	@ (8005c34 <HAL_GPIO_Init+0x324>)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b74:	4b2f      	ldr	r3, [pc, #188]	@ (8005c34 <HAL_GPIO_Init+0x324>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	4013      	ands	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b98:	4a26      	ldr	r2, [pc, #152]	@ (8005c34 <HAL_GPIO_Init+0x324>)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b9e:	4b25      	ldr	r3, [pc, #148]	@ (8005c34 <HAL_GPIO_Init+0x324>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4013      	ands	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c34 <HAL_GPIO_Init+0x324>)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c34 <HAL_GPIO_Init+0x324>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bec:	4a11      	ldr	r2, [pc, #68]	@ (8005c34 <HAL_GPIO_Init+0x324>)
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	f67f ae96 	bls.w	800592c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	3724      	adds	r7, #36	@ 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40013800 	.word	0x40013800
 8005c18:	40020000 	.word	0x40020000
 8005c1c:	40020400 	.word	0x40020400
 8005c20:	40020800 	.word	0x40020800
 8005c24:	40020c00 	.word	0x40020c00
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	40021400 	.word	0x40021400
 8005c30:	40021800 	.word	0x40021800
 8005c34:	40013c00 	.word	0x40013c00

08005c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	807b      	strh	r3, [r7, #2]
 8005c44:	4613      	mov	r3, r2
 8005c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c48:	787b      	ldrb	r3, [r7, #1]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c4e:	887a      	ldrh	r2, [r7, #2]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c54:	e003      	b.n	8005c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c56:	887b      	ldrh	r3, [r7, #2]
 8005c58:	041a      	lsls	r2, r3, #16
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	619a      	str	r2, [r3, #24]
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c7c:	887a      	ldrh	r2, [r7, #2]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4013      	ands	r3, r2
 8005c82:	041a      	lsls	r2, r3, #16
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	43d9      	mvns	r1, r3
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	400b      	ands	r3, r1
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	619a      	str	r2, [r3, #24]
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e12b      	b.n	8005f0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fb ffe4 	bl	8001c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2224      	movs	r2, #36	@ 0x24
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d04:	f000 fac4 	bl	8006290 <HAL_RCC_GetPCLK1Freq>
 8005d08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4a81      	ldr	r2, [pc, #516]	@ (8005f14 <HAL_I2C_Init+0x274>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d807      	bhi.n	8005d24 <HAL_I2C_Init+0x84>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4a80      	ldr	r2, [pc, #512]	@ (8005f18 <HAL_I2C_Init+0x278>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bf94      	ite	ls
 8005d1c:	2301      	movls	r3, #1
 8005d1e:	2300      	movhi	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	e006      	b.n	8005d32 <HAL_I2C_Init+0x92>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4a7d      	ldr	r2, [pc, #500]	@ (8005f1c <HAL_I2C_Init+0x27c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	bf94      	ite	ls
 8005d2c:	2301      	movls	r3, #1
 8005d2e:	2300      	movhi	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e0e7      	b.n	8005f0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4a78      	ldr	r2, [pc, #480]	@ (8005f20 <HAL_I2C_Init+0x280>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	0c9b      	lsrs	r3, r3, #18
 8005d44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a6a      	ldr	r2, [pc, #424]	@ (8005f14 <HAL_I2C_Init+0x274>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d802      	bhi.n	8005d74 <HAL_I2C_Init+0xd4>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	3301      	adds	r3, #1
 8005d72:	e009      	b.n	8005d88 <HAL_I2C_Init+0xe8>
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	4a69      	ldr	r2, [pc, #420]	@ (8005f24 <HAL_I2C_Init+0x284>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	3301      	adds	r3, #1
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005d9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	495c      	ldr	r1, [pc, #368]	@ (8005f14 <HAL_I2C_Init+0x274>)
 8005da4:	428b      	cmp	r3, r1
 8005da6:	d819      	bhi.n	8005ddc <HAL_I2C_Init+0x13c>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1e59      	subs	r1, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005db6:	1c59      	adds	r1, r3, #1
 8005db8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005dbc:	400b      	ands	r3, r1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <HAL_I2C_Init+0x138>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1e59      	subs	r1, r3, #1
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd6:	e051      	b.n	8005e7c <HAL_I2C_Init+0x1dc>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	e04f      	b.n	8005e7c <HAL_I2C_Init+0x1dc>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d111      	bne.n	8005e08 <HAL_I2C_Init+0x168>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	1e58      	subs	r0, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6859      	ldr	r1, [r3, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	440b      	add	r3, r1
 8005df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005df6:	3301      	adds	r3, #1
 8005df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bf0c      	ite	eq
 8005e00:	2301      	moveq	r3, #1
 8005e02:	2300      	movne	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	e012      	b.n	8005e2e <HAL_I2C_Init+0x18e>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	1e58      	subs	r0, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6859      	ldr	r1, [r3, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	0099      	lsls	r1, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e1e:	3301      	adds	r3, #1
 8005e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bf0c      	ite	eq
 8005e28:	2301      	moveq	r3, #1
 8005e2a:	2300      	movne	r3, #0
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_I2C_Init+0x196>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e022      	b.n	8005e7c <HAL_I2C_Init+0x1dc>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10e      	bne.n	8005e5c <HAL_I2C_Init+0x1bc>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1e58      	subs	r0, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6859      	ldr	r1, [r3, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	440b      	add	r3, r1
 8005e4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e50:	3301      	adds	r3, #1
 8005e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5a:	e00f      	b.n	8005e7c <HAL_I2C_Init+0x1dc>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1e58      	subs	r0, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6859      	ldr	r1, [r3, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	0099      	lsls	r1, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e72:	3301      	adds	r3, #1
 8005e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	6809      	ldr	r1, [r1, #0]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005eaa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6911      	ldr	r1, [r2, #16]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68d2      	ldr	r2, [r2, #12]
 8005eb6:	4311      	orrs	r1, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	000186a0 	.word	0x000186a0
 8005f18:	001e847f 	.word	0x001e847f
 8005f1c:	003d08ff 	.word	0x003d08ff
 8005f20:	431bde83 	.word	0x431bde83
 8005f24:	10624dd3 	.word	0x10624dd3

08005f28 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f30:	f7fd f950 	bl	80031d4 <HAL_GetTick>
 8005f34:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e069      	b.n	8006014 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7fc fabb 	bl	80024d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005f5a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f85e 	bl	8006020 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	021a      	lsls	r2, r3, #8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	2120      	movs	r1, #32
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f856 	bl	800603c <QSPI_WaitFlagStateUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005f94:	7afb      	ldrb	r3, [r7, #11]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d137      	bne.n	800600a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005fa4:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6852      	ldr	r2, [r2, #4]
 8005fac:	0611      	lsls	r1, r2, #24
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68d2      	ldr	r2, [r2, #12]
 8005fb2:	4311      	orrs	r1, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	69d2      	ldr	r2, [r2, #28]
 8005fb8:	4311      	orrs	r1, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6a12      	ldr	r2, [r2, #32]
 8005fbe:	4311      	orrs	r1, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	4b13      	ldr	r3, [pc, #76]	@ (800601c <HAL_QSPI_Init+0xf4>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6912      	ldr	r2, [r2, #16]
 8005fd6:	0411      	lsls	r1, r2, #16
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6952      	ldr	r2, [r2, #20]
 8005fdc:	4311      	orrs	r1, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6992      	ldr	r2, [r2, #24]
 8005fe2:	4311      	orrs	r1, r2
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006012:	7afb      	ldrb	r3, [r7, #11]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	ffe0f8fe 	.word	0xffe0f8fe

08006020 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800604c:	e01a      	b.n	8006084 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d016      	beq.n	8006084 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006056:	f7fd f8bd 	bl	80031d4 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2204      	movs	r2, #4
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006078:	f043 0201 	orr.w	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e00e      	b.n	80060a2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	2b00      	cmp	r3, #0
 8006090:	bf14      	ite	ne
 8006092:	2301      	movne	r3, #1
 8006094:	2300      	moveq	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	429a      	cmp	r2, r3
 800609e:	d1d6      	bne.n	800604e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0cc      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060c0:	4b68      	ldr	r3, [pc, #416]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d90c      	bls.n	80060e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	4b65      	ldr	r3, [pc, #404]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d6:	4b63      	ldr	r3, [pc, #396]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d001      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0b8      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d020      	beq.n	8006136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006100:	4b59      	ldr	r3, [pc, #356]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	4a58      	ldr	r2, [pc, #352]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800610a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006118:	4b53      	ldr	r3, [pc, #332]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4a52      	ldr	r2, [pc, #328]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006124:	4b50      	ldr	r3, [pc, #320]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	494d      	ldr	r1, [pc, #308]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d044      	beq.n	80061cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d107      	bne.n	800615a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614a:	4b47      	ldr	r3, [pc, #284]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d119      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e07f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d003      	beq.n	800616a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006166:	2b03      	cmp	r3, #3
 8006168:	d107      	bne.n	800617a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616a:	4b3f      	ldr	r3, [pc, #252]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e06f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617a:	4b3b      	ldr	r3, [pc, #236]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e067      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800618a:	4b37      	ldr	r3, [pc, #220]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f023 0203 	bic.w	r2, r3, #3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4934      	ldr	r1, [pc, #208]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	4313      	orrs	r3, r2
 800619a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800619c:	f7fd f81a 	bl	80031d4 <HAL_GetTick>
 80061a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a2:	e00a      	b.n	80061ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a4:	f7fd f816 	bl	80031d4 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e04f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 020c 	and.w	r2, r3, #12
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d1eb      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061cc:	4b25      	ldr	r3, [pc, #148]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d20c      	bcs.n	80061f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061da:	4b22      	ldr	r3, [pc, #136]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e2:	4b20      	ldr	r3, [pc, #128]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e032      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006200:	4b19      	ldr	r3, [pc, #100]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4916      	ldr	r1, [pc, #88]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800621e:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	490e      	ldr	r1, [pc, #56]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006232:	f000 fdb5 	bl	8006da0 <HAL_RCC_GetSysClockFreq>
 8006236:	4602      	mov	r2, r0
 8006238:	4b0b      	ldr	r3, [pc, #44]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	490a      	ldr	r1, [pc, #40]	@ (800626c <HAL_RCC_ClockConfig+0x1c0>)
 8006244:	5ccb      	ldrb	r3, [r1, r3]
 8006246:	fa22 f303 	lsr.w	r3, r2, r3
 800624a:	4a09      	ldr	r2, [pc, #36]	@ (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 800624c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800624e:	4b09      	ldr	r3, [pc, #36]	@ (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7fc ff7a 	bl	800314c <HAL_InitTick>

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40023c00 	.word	0x40023c00
 8006268:	40023800 	.word	0x40023800
 800626c:	080095e4 	.word	0x080095e4
 8006270:	20000000 	.word	0x20000000
 8006274:	20000004 	.word	0x20000004

08006278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800627c:	4b03      	ldr	r3, [pc, #12]	@ (800628c <HAL_RCC_GetHCLKFreq+0x14>)
 800627e:	681b      	ldr	r3, [r3, #0]
}
 8006280:	4618      	mov	r0, r3
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	20000000 	.word	0x20000000

08006290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006294:	f7ff fff0 	bl	8006278 <HAL_RCC_GetHCLKFreq>
 8006298:	4602      	mov	r2, r0
 800629a:	4b05      	ldr	r3, [pc, #20]	@ (80062b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	0a9b      	lsrs	r3, r3, #10
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	4903      	ldr	r1, [pc, #12]	@ (80062b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062a6:	5ccb      	ldrb	r3, [r1, r3]
 80062a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40023800 	.word	0x40023800
 80062b4:	080095f4 	.word	0x080095f4

080062b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08c      	sub	sp, #48	@ 0x30
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d010      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80062f0:	4b6f      	ldr	r3, [pc, #444]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80062f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062f6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	496c      	ldr	r1, [pc, #432]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800630e:	2301      	movs	r3, #1
 8006310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d010      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800631e:	4b64      	ldr	r3, [pc, #400]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006324:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632c:	4960      	ldr	r1, [pc, #384]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800633c:	2301      	movs	r3, #1
 800633e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d017      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800634c:	4b58      	ldr	r3, [pc, #352]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800634e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006352:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635a:	4955      	ldr	r1, [pc, #340]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800636a:	d101      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800636c:	2301      	movs	r3, #1
 800636e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006378:	2301      	movs	r3, #1
 800637a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d017      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006388:	4b49      	ldr	r3, [pc, #292]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800638a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800638e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006396:	4946      	ldr	r1, [pc, #280]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063a6:	d101      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80063a8:	2301      	movs	r3, #1
 80063aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80063b4:	2301      	movs	r3, #1
 80063b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 808a 	beq.w	80064da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ce:	4a38      	ldr	r2, [pc, #224]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80063d6:	4b36      	ldr	r3, [pc, #216]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063de:	60bb      	str	r3, [r7, #8]
 80063e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063e2:	4b34      	ldr	r3, [pc, #208]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a33      	ldr	r2, [pc, #204]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80063e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063ee:	f7fc fef1 	bl	80031d4 <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063f6:	f7fc feed 	bl	80031d4 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e278      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006408:	4b2a      	ldr	r3, [pc, #168]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006414:	4b26      	ldr	r3, [pc, #152]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800641c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d02f      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006428:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	429a      	cmp	r2, r3
 8006430:	d028      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006432:	4b1f      	ldr	r3, [pc, #124]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800643c:	4b1e      	ldr	r3, [pc, #120]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006442:	4b1d      	ldr	r3, [pc, #116]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006448:	4a19      	ldr	r2, [pc, #100]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800644e:	4b18      	ldr	r3, [pc, #96]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b01      	cmp	r3, #1
 8006458:	d114      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800645a:	f7fc febb 	bl	80031d4 <HAL_GetTick>
 800645e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006460:	e00a      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006462:	f7fc feb7 	bl	80031d4 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006470:	4293      	cmp	r3, r2
 8006472:	d901      	bls.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e240      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006478:	4b0d      	ldr	r3, [pc, #52]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800647a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0ee      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006488:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800648c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006490:	d114      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006492:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80064a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064a6:	4902      	ldr	r1, [pc, #8]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	608b      	str	r3, [r1, #8]
 80064ac:	e00c      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80064ae:	bf00      	nop
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40007000 	.word	0x40007000
 80064b8:	42470e40 	.word	0x42470e40
 80064bc:	4b4a      	ldr	r3, [pc, #296]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a49      	ldr	r2, [pc, #292]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80064c6:	6093      	str	r3, [r2, #8]
 80064c8:	4b47      	ldr	r3, [pc, #284]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d4:	4944      	ldr	r1, [pc, #272]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80064ec:	4b3f      	ldr	r3, [pc, #252]	@ (80065ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80064ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80064fc:	4b3a      	ldr	r3, [pc, #232]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006502:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800650a:	4937      	ldr	r1, [pc, #220]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800651e:	4b32      	ldr	r3, [pc, #200]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006524:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800652c:	492e      	ldr	r1, [pc, #184]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006540:	4b29      	ldr	r3, [pc, #164]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006546:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800654e:	4926      	ldr	r1, [pc, #152]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800655e:	d101      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006560:	2301      	movs	r3, #1
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006570:	4b1d      	ldr	r3, [pc, #116]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006576:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657e:	491a      	ldr	r1, [pc, #104]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800658e:	2b00      	cmp	r3, #0
 8006590:	d011      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006592:	4b15      	ldr	r3, [pc, #84]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006598:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a0:	4911      	ldr	r1, [pc, #68]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065b0:	d101      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80065b2:	2301      	movs	r3, #1
 80065b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d005      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c4:	f040 80ff 	bne.w	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065c8:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065ce:	f7fc fe01 	bl	80031d4 <HAL_GetTick>
 80065d2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065d4:	e00e      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065d6:	f7fc fdfd 	bl	80031d4 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d907      	bls.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e188      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80065e8:	40023800 	.word	0x40023800
 80065ec:	424711e0 	.word	0x424711e0
 80065f0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065f4:	4b7e      	ldr	r3, [pc, #504]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ea      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006610:	2b00      	cmp	r3, #0
 8006612:	d009      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800661c:	2b00      	cmp	r3, #0
 800661e:	d028      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d124      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006628:	4b71      	ldr	r3, [pc, #452]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800662a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	3301      	adds	r3, #1
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800663a:	4b6d      	ldr	r3, [pc, #436]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800663c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006640:	0e1b      	lsrs	r3, r3, #24
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	019b      	lsls	r3, r3, #6
 8006652:	431a      	orrs	r2, r3
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	3b01      	subs	r3, #1
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	431a      	orrs	r2, r3
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	061b      	lsls	r3, r3, #24
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	071b      	lsls	r3, r3, #28
 800666a:	4961      	ldr	r1, [pc, #388]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006686:	d00a      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006690:	2b00      	cmp	r3, #0
 8006692:	d035      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800669c:	d130      	bne.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800669e:	4b54      	ldr	r3, [pc, #336]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	3301      	adds	r3, #1
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066b0:	4b4f      	ldr	r3, [pc, #316]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b6:	0f1b      	lsrs	r3, r3, #28
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	019b      	lsls	r3, r3, #6
 80066c8:	431a      	orrs	r2, r3
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	3b01      	subs	r3, #1
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	061b      	lsls	r3, r3, #24
 80066da:	431a      	orrs	r2, r3
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	071b      	lsls	r3, r3, #28
 80066e0:	4943      	ldr	r1, [pc, #268]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066e8:	4b41      	ldr	r3, [pc, #260]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ee:	f023 021f 	bic.w	r2, r3, #31
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	493d      	ldr	r1, [pc, #244]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006708:	2b00      	cmp	r3, #0
 800670a:	d029      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006714:	d124      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006716:	4b36      	ldr	r3, [pc, #216]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	3301      	adds	r3, #1
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006728:	4b31      	ldr	r3, [pc, #196]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800672a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800672e:	0f1b      	lsrs	r3, r3, #28
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	019b      	lsls	r3, r3, #6
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	085b      	lsrs	r3, r3, #1
 8006748:	3b01      	subs	r3, #1
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	431a      	orrs	r2, r3
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	431a      	orrs	r2, r3
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	071b      	lsls	r3, r3, #28
 8006758:	4925      	ldr	r1, [pc, #148]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006768:	2b00      	cmp	r3, #0
 800676a:	d016      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	019b      	lsls	r3, r3, #6
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	3b01      	subs	r3, #1
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	071b      	lsls	r3, r3, #28
 8006792:	4917      	ldr	r1, [pc, #92]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800679a:	4b16      	ldr	r3, [pc, #88]	@ (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800679c:	2201      	movs	r2, #1
 800679e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067a0:	f7fc fd18 	bl	80031d4 <HAL_GetTick>
 80067a4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067a6:	e008      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067a8:	f7fc fd14 	bl	80031d4 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e09f      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	f040 8095 	bne.w	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067ce:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067d4:	f7fc fcfe 	bl	80031d4 <HAL_GetTick>
 80067d8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067da:	e00f      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067dc:	f7fc fcfa 	bl	80031d4 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d908      	bls.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e085      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80067ee:	bf00      	nop
 80067f0:	40023800 	.word	0x40023800
 80067f4:	42470068 	.word	0x42470068
 80067f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067fc:	4b41      	ldr	r3, [pc, #260]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006808:	d0e8      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02b      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682e:	2b00      	cmp	r3, #0
 8006830:	d127      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006832:	4b34      	ldr	r3, [pc, #208]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	3301      	adds	r3, #1
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699a      	ldr	r2, [r3, #24]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	019b      	lsls	r3, r3, #6
 800684e:	431a      	orrs	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	3b01      	subs	r3, #1
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	4928      	ldr	r1, [pc, #160]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006868:	4b26      	ldr	r3, [pc, #152]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800686a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800686e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	3b01      	subs	r3, #1
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	4922      	ldr	r1, [pc, #136]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d01d      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x612>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006896:	d118      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006898:	4b1a      	ldr	r3, [pc, #104]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689e:	0e1b      	lsrs	r3, r3, #24
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	019b      	lsls	r3, r3, #6
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	3b01      	subs	r3, #1
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	061b      	lsls	r3, r3, #24
 80068c2:	4910      	ldr	r1, [pc, #64]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068d0:	f7fc fc80 	bl	80031d4 <HAL_GetTick>
 80068d4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068d8:	f7fc fc7c 	bl	80031d4 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e007      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068ea:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068f6:	d1ef      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3730      	adds	r7, #48	@ 0x30
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40023800 	.word	0x40023800
 8006908:	42470070 	.word	0x42470070

0800690c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800690c:	b480      	push	{r7}
 800690e:	b089      	sub	sp, #36	@ 0x24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3b01      	subs	r3, #1
 8006930:	2b07      	cmp	r3, #7
 8006932:	f200 8224 	bhi.w	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006936:	a201      	add	r2, pc, #4	@ (adr r2, 800693c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	08006b3f 	.word	0x08006b3f
 8006940:	08006c69 	.word	0x08006c69
 8006944:	08006d7f 	.word	0x08006d7f
 8006948:	0800695d 	.word	0x0800695d
 800694c:	08006d7f 	.word	0x08006d7f
 8006950:	08006d7f 	.word	0x08006d7f
 8006954:	08006d7f 	.word	0x08006d7f
 8006958:	0800695d 	.word	0x0800695d
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800695c:	4ba8      	ldr	r3, [pc, #672]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800695e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006962:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006972:	f000 80d6 	beq.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800697c:	f200 80dd 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006986:	f000 809f 	beq.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006990:	f200 80d3 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800699a:	d05b      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069a2:	f200 80ca 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069ac:	f000 80b6 	beq.w	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069b6:	f200 80c0 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069c0:	f000 8082 	beq.w	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ca:	f200 80b6 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069da:	d03b      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 80069dc:	e0ad      	b.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80069de:	4b88      	ldr	r3, [pc, #544]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 80069ea:	4b85      	ldr	r3, [pc, #532]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069f4:	4a83      	ldr	r2, [pc, #524]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80069f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	e008      	b.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 80069fe:	4b80      	ldr	r3, [pc, #512]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a08:	4a7f      	ldr	r2, [pc, #508]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8006a10:	4b7b      	ldr	r3, [pc, #492]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a16:	0e1b      	lsrs	r3, r3, #24
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8006a1e:	4b78      	ldr	r3, [pc, #480]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a24:	099b      	lsrs	r3, r3, #6
 8006a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	fb03 f202 	mul.w	r2, r3, r2
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8006a38:	4b71      	ldr	r3, [pc, #452]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	3301      	adds	r3, #1
 8006a46:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a50:	61fb      	str	r3, [r7, #28]
          break;
 8006a52:	e073      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006a54:	4b6a      	ldr	r3, [pc, #424]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006a60:	4b67      	ldr	r3, [pc, #412]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a6a:	4a66      	ldr	r2, [pc, #408]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e008      	b.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 8006a74:	4b62      	ldr	r3, [pc, #392]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a7e:	4a62      	ldr	r2, [pc, #392]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a84:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8006a86:	4b5e      	ldr	r3, [pc, #376]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a8c:	0e1b      	lsrs	r3, r3, #24
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8006a94:	4b5a      	ldr	r3, [pc, #360]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a9a:	099b      	lsrs	r3, r3, #6
 8006a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	fb03 f202 	mul.w	r2, r3, r2
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8006aae:	4b54      	ldr	r3, [pc, #336]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	3301      	adds	r3, #1
 8006aba:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	61fb      	str	r3, [r7, #28]
          break;
 8006ac6:	e039      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d108      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006adc:	4a49      	ldr	r2, [pc, #292]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	e007      	b.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006ae6:	4b46      	ldr	r3, [pc, #280]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aee:	4a46      	ldr	r2, [pc, #280]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8006af6:	4b42      	ldr	r3, [pc, #264]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	0f1b      	lsrs	r3, r3, #28
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8006b02:	4b3f      	ldr	r3, [pc, #252]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	fb03 f202 	mul.w	r2, r3, r2
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b18:	61fb      	str	r3, [r7, #28]
          break;
 8006b1a:	e00f      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006b1e:	61fb      	str	r3, [r7, #28]
          break;
 8006b20:	e00c      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006b22:	4b37      	ldr	r3, [pc, #220]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d102      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8006b2e:	4b35      	ldr	r3, [pc, #212]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006b30:	61fb      	str	r3, [r7, #28]
          break;
 8006b32:	e003      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8006b34:	4b34      	ldr	r3, [pc, #208]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006b36:	61fb      	str	r3, [r7, #28]
          break;
 8006b38:	e000      	b.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8006b3a:	bf00      	nop
        }
      }
      break;
 8006b3c:	e120      	b.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8006b3e:	4b30      	ldr	r3, [pc, #192]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b44:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8006b50:	d079      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8006b58:	f200 8082 	bhi.w	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b62:	d03c      	beq.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b6a:	d879      	bhi.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d006      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b78:	d172      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b7a:	4b24      	ldr	r3, [pc, #144]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8006b7c:	61fb      	str	r3, [r7, #28]
          break;
 8006b7e:	e072      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b80:	4b1f      	ldr	r3, [pc, #124]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b8c:	d109      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b98:	4a1b      	ldr	r2, [pc, #108]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006ba2:	4b17      	ldr	r3, [pc, #92]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bac:	4a15      	ldr	r2, [pc, #84]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006bb4:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bba:	099b      	lsrs	r3, r3, #6
 8006bbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bce:	0f1b      	lsrs	r3, r3, #28
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bda:	61fb      	str	r3, [r7, #28]
          break;
 8006bdc:	e043      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006bde:	4b08      	ldr	r3, [pc, #32]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bea:	d111      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006bec:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bf4:	4a04      	ldr	r2, [pc, #16]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfa:	61bb      	str	r3, [r7, #24]
 8006bfc:	e010      	b.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8006bfe:	bf00      	nop
 8006c00:	40023800 	.word	0x40023800
 8006c04:	00f42400 	.word	0x00f42400
 8006c08:	016e3600 	.word	0x016e3600
 8006c0c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c10:	4b5f      	ldr	r3, [pc, #380]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c18:	4a5e      	ldr	r2, [pc, #376]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006c20:	4b5b      	ldr	r3, [pc, #364]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	099b      	lsrs	r3, r3, #6
 8006c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8006c32:	4b57      	ldr	r3, [pc, #348]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	0f1b      	lsrs	r3, r3, #28
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	61fb      	str	r3, [r7, #28]
          break;
 8006c44:	e00f      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c46:	4b52      	ldr	r3, [pc, #328]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c52:	d102      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8006c54:	4b50      	ldr	r3, [pc, #320]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8006c56:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006c58:	e005      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8006c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006c5c:	61fb      	str	r3, [r7, #28]
          break;
 8006c5e:	e002      	b.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
          break;
 8006c64:	bf00      	nop
        }
      }
      break;
 8006c66:	e08b      	b.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8006c68:	4b49      	ldr	r3, [pc, #292]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c6e:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006c7a:	d06f      	beq.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006c82:	d878      	bhi.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c8a:	d03c      	beq.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c92:	d870      	bhi.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d006      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ca0:	d169      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x490>)
 8006ca4:	61fb      	str	r3, [r7, #28]
          break;
 8006ca6:	e069      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ca8:	4b39      	ldr	r3, [pc, #228]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cb4:	d109      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006cb6:	4b36      	ldr	r3, [pc, #216]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cc0:	4a35      	ldr	r2, [pc, #212]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8006cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	e008      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006cca:	4b31      	ldr	r3, [pc, #196]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cda:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce2:	099b      	lsrs	r3, r3, #6
 8006ce4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
 8006cee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006cf0:	4b27      	ldr	r3, [pc, #156]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cf6:	0f1b      	lsrs	r3, r3, #28
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	61fb      	str	r3, [r7, #28]
          break;
 8006d04:	e03a      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d06:	4b22      	ldr	r3, [pc, #136]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d12:	d108      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d14:	4b1e      	ldr	r3, [pc, #120]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8006d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d22:	61bb      	str	r3, [r7, #24]
 8006d24:	e007      	b.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d26:	4b1a      	ldr	r3, [pc, #104]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d2e:	4a19      	ldr	r2, [pc, #100]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006d36:	4b16      	ldr	r3, [pc, #88]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	099b      	lsrs	r3, r3, #6
 8006d3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
 8006d46:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8006d48:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	0f1b      	lsrs	r3, r3, #28
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	61fb      	str	r3, [r7, #28]
          break;
 8006d5a:	e00f      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d68:	d102      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 8006d6c:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8006d6e:	e005      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8006d70:	4b08      	ldr	r3, [pc, #32]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8006d72:	61fb      	str	r3, [r7, #28]
          break;
 8006d74:	e002      	b.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
          break;
 8006d7a:	bf00      	nop
        }
      }
      break;
 8006d7c:	e000      	b.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
    }
  default:
    {
       break;
 8006d7e:	bf00      	nop
    }
  }
  return frequency;
 8006d80:	69fb      	ldr	r3, [r7, #28]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3724      	adds	r7, #36	@ 0x24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40023800 	.word	0x40023800
 8006d94:	00f42400 	.word	0x00f42400
 8006d98:	016e3600 	.word	0x016e3600
 8006d9c:	00bb8000 	.word	0x00bb8000

08006da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da4:	b0a6      	sub	sp, #152	@ 0x98
 8006da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dc6:	4bc8      	ldr	r3, [pc, #800]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b0c      	cmp	r3, #12
 8006dd0:	f200 817e 	bhi.w	80070d0 <HAL_RCC_GetSysClockFreq+0x330>
 8006dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ddc <HAL_RCC_GetSysClockFreq+0x3c>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006e11 	.word	0x08006e11
 8006de0:	080070d1 	.word	0x080070d1
 8006de4:	080070d1 	.word	0x080070d1
 8006de8:	080070d1 	.word	0x080070d1
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	080070d1 	.word	0x080070d1
 8006df4:	080070d1 	.word	0x080070d1
 8006df8:	080070d1 	.word	0x080070d1
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	080070d1 	.word	0x080070d1
 8006e04:	080070d1 	.word	0x080070d1
 8006e08:	080070d1 	.word	0x080070d1
 8006e0c:	08006f8b 	.word	0x08006f8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e10:	4bb6      	ldr	r3, [pc, #728]	@ (80070ec <HAL_RCC_GetSysClockFreq+0x34c>)
 8006e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8006e16:	e15f      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e18:	4bb5      	ldr	r3, [pc, #724]	@ (80070f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006e1e:	e15b      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e20:	4bb1      	ldr	r3, [pc, #708]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e2c:	4bae      	ldr	r3, [pc, #696]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d031      	beq.n	8006e9c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e38:	4bab      	ldr	r3, [pc, #684]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	099b      	lsrs	r3, r3, #6
 8006e3e:	2200      	movs	r2, #0
 8006e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e50:	4ba7      	ldr	r3, [pc, #668]	@ (80070f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006e52:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006e56:	462a      	mov	r2, r5
 8006e58:	fb03 f202 	mul.w	r2, r3, r2
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	4621      	mov	r1, r4
 8006e60:	fb01 f303 	mul.w	r3, r1, r3
 8006e64:	4413      	add	r3, r2
 8006e66:	4aa2      	ldr	r2, [pc, #648]	@ (80070f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006e68:	4621      	mov	r1, r4
 8006e6a:	fba1 1202 	umull	r1, r2, r1, r2
 8006e6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006e70:	460a      	mov	r2, r1
 8006e72:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006e74:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e76:	4413      	add	r3, r2
 8006e78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e7e:	2200      	movs	r2, #0
 8006e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e82:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006e84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006e8c:	f7f9 f9ba 	bl	8000204 <__aeabi_uldivmod>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4613      	mov	r3, r2
 8006e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e9a:	e064      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e9c:	4b92      	ldr	r3, [pc, #584]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	099b      	lsrs	r3, r3, #6
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ea6:	657a      	str	r2, [r7, #84]	@ 0x54
 8006ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006eb8:	4622      	mov	r2, r4
 8006eba:	462b      	mov	r3, r5
 8006ebc:	f04f 0000 	mov.w	r0, #0
 8006ec0:	f04f 0100 	mov.w	r1, #0
 8006ec4:	0159      	lsls	r1, r3, #5
 8006ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eca:	0150      	lsls	r0, r2, #5
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	1a51      	subs	r1, r2, r1
 8006ed4:	6139      	str	r1, [r7, #16]
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	eb63 0301 	sbc.w	r3, r3, r1
 8006edc:	617b      	str	r3, [r7, #20]
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eea:	4659      	mov	r1, fp
 8006eec:	018b      	lsls	r3, r1, #6
 8006eee:	4651      	mov	r1, sl
 8006ef0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ef4:	4651      	mov	r1, sl
 8006ef6:	018a      	lsls	r2, r1, #6
 8006ef8:	4651      	mov	r1, sl
 8006efa:	ebb2 0801 	subs.w	r8, r2, r1
 8006efe:	4659      	mov	r1, fp
 8006f00:	eb63 0901 	sbc.w	r9, r3, r1
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f18:	4690      	mov	r8, r2
 8006f1a:	4699      	mov	r9, r3
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	eb18 0303 	adds.w	r3, r8, r3
 8006f22:	60bb      	str	r3, [r7, #8]
 8006f24:	462b      	mov	r3, r5
 8006f26:	eb49 0303 	adc.w	r3, r9, r3
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f38:	4629      	mov	r1, r5
 8006f3a:	028b      	lsls	r3, r1, #10
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f42:	4621      	mov	r1, r4
 8006f44:	028a      	lsls	r2, r1, #10
 8006f46:	4610      	mov	r0, r2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f4e:	2200      	movs	r2, #0
 8006f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f52:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f58:	f7f9 f954 	bl	8000204 <__aeabi_uldivmod>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4613      	mov	r3, r2
 8006f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f66:	4b60      	ldr	r3, [pc, #384]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	0c1b      	lsrs	r3, r3, #16
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	3301      	adds	r3, #1
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8006f78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006f88:	e0a6      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f8a:	4b57      	ldr	r3, [pc, #348]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f96:	4b54      	ldr	r3, [pc, #336]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d02a      	beq.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fa2:	4b51      	ldr	r3, [pc, #324]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	099b      	lsrs	r3, r3, #6
 8006fa8:	2200      	movs	r2, #0
 8006faa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80070f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006fb8:	fb03 f201 	mul.w	r2, r3, r1
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	fb00 f303 	mul.w	r3, r0, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80070f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8006fc6:	fba0 1202 	umull	r1, r2, r0, r2
 8006fca:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fcc:	460a      	mov	r2, r1
 8006fce:	673a      	str	r2, [r7, #112]	@ 0x70
 8006fd0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006fd2:	4413      	add	r3, r2
 8006fd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fda:	2200      	movs	r2, #0
 8006fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fde:	637a      	str	r2, [r7, #52]	@ 0x34
 8006fe0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006fe4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006fe8:	f7f9 f90c 	bl	8000204 <__aeabi_uldivmod>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ff6:	e05b      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	099b      	lsrs	r3, r3, #6
 8006ffe:	2200      	movs	r2, #0
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700a:	623b      	str	r3, [r7, #32]
 800700c:	2300      	movs	r3, #0
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	f04f 0000 	mov.w	r0, #0
 800701c:	f04f 0100 	mov.w	r1, #0
 8007020:	0159      	lsls	r1, r3, #5
 8007022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007026:	0150      	lsls	r0, r2, #5
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4641      	mov	r1, r8
 800702e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007032:	4649      	mov	r1, r9
 8007034:	eb63 0b01 	sbc.w	fp, r3, r1
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800704c:	ebb2 040a 	subs.w	r4, r2, sl
 8007050:	eb63 050b 	sbc.w	r5, r3, fp
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	00eb      	lsls	r3, r5, #3
 800705e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007062:	00e2      	lsls	r2, r4, #3
 8007064:	4614      	mov	r4, r2
 8007066:	461d      	mov	r5, r3
 8007068:	4643      	mov	r3, r8
 800706a:	18e3      	adds	r3, r4, r3
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	464b      	mov	r3, r9
 8007070:	eb45 0303 	adc.w	r3, r5, r3
 8007074:	607b      	str	r3, [r7, #4]
 8007076:	f04f 0200 	mov.w	r2, #0
 800707a:	f04f 0300 	mov.w	r3, #0
 800707e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007082:	4629      	mov	r1, r5
 8007084:	028b      	lsls	r3, r1, #10
 8007086:	4621      	mov	r1, r4
 8007088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800708c:	4621      	mov	r1, r4
 800708e:	028a      	lsls	r2, r1, #10
 8007090:	4610      	mov	r0, r2
 8007092:	4619      	mov	r1, r3
 8007094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007098:	2200      	movs	r2, #0
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	61fa      	str	r2, [r7, #28]
 800709e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070a2:	f7f9 f8af 	bl	8000204 <__aeabi_uldivmod>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4613      	mov	r3, r2
 80070ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80070b0:	4b0d      	ldr	r3, [pc, #52]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	0f1b      	lsrs	r3, r3, #28
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80070be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80070ce:	e003      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070d0:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <HAL_RCC_GetSysClockFreq+0x34c>)
 80070d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80070d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3798      	adds	r7, #152	@ 0x98
 80070e0:	46bd      	mov	sp, r7
 80070e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800
 80070ec:	00f42400 	.word	0x00f42400
 80070f0:	016e3600 	.word	0x016e3600

080070f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e28d      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 8083 	beq.w	800721a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007114:	4b94      	ldr	r3, [pc, #592]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 030c 	and.w	r3, r3, #12
 800711c:	2b04      	cmp	r3, #4
 800711e:	d019      	beq.n	8007154 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007120:	4b91      	ldr	r3, [pc, #580]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007128:	2b08      	cmp	r3, #8
 800712a:	d106      	bne.n	800713a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800712c:	4b8e      	ldr	r3, [pc, #568]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007138:	d00c      	beq.n	8007154 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800713a:	4b8b      	ldr	r3, [pc, #556]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007142:	2b0c      	cmp	r3, #12
 8007144:	d112      	bne.n	800716c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007146:	4b88      	ldr	r3, [pc, #544]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800714e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007152:	d10b      	bne.n	800716c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007154:	4b84      	ldr	r3, [pc, #528]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d05b      	beq.n	8007218 <HAL_RCC_OscConfig+0x124>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d157      	bne.n	8007218 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e25a      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007174:	d106      	bne.n	8007184 <HAL_RCC_OscConfig+0x90>
 8007176:	4b7c      	ldr	r3, [pc, #496]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a7b      	ldr	r2, [pc, #492]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800717c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	e01d      	b.n	80071c0 <HAL_RCC_OscConfig+0xcc>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800718c:	d10c      	bne.n	80071a8 <HAL_RCC_OscConfig+0xb4>
 800718e:	4b76      	ldr	r3, [pc, #472]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a75      	ldr	r2, [pc, #468]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	4b73      	ldr	r3, [pc, #460]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a72      	ldr	r2, [pc, #456]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80071a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e00b      	b.n	80071c0 <HAL_RCC_OscConfig+0xcc>
 80071a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a6e      	ldr	r2, [pc, #440]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80071ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80071ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d013      	beq.n	80071f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fc f804 	bl	80031d4 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071d0:	f7fc f800 	bl	80031d4 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b64      	cmp	r3, #100	@ 0x64
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e21f      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e2:	4b61      	ldr	r3, [pc, #388]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0f0      	beq.n	80071d0 <HAL_RCC_OscConfig+0xdc>
 80071ee:	e014      	b.n	800721a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f0:	f7fb fff0 	bl	80031d4 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f8:	f7fb ffec 	bl	80031d4 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b64      	cmp	r3, #100	@ 0x64
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e20b      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800720a:	4b57      	ldr	r3, [pc, #348]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f0      	bne.n	80071f8 <HAL_RCC_OscConfig+0x104>
 8007216:	e000      	b.n	800721a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d06f      	beq.n	8007306 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007226:	4b50      	ldr	r3, [pc, #320]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 030c 	and.w	r3, r3, #12
 800722e:	2b00      	cmp	r3, #0
 8007230:	d017      	beq.n	8007262 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007232:	4b4d      	ldr	r3, [pc, #308]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800723a:	2b08      	cmp	r3, #8
 800723c:	d105      	bne.n	800724a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800723e:	4b4a      	ldr	r3, [pc, #296]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800724a:	4b47      	ldr	r3, [pc, #284]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007252:	2b0c      	cmp	r3, #12
 8007254:	d11c      	bne.n	8007290 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007256:	4b44      	ldr	r3, [pc, #272]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d116      	bne.n	8007290 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007262:	4b41      	ldr	r3, [pc, #260]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_RCC_OscConfig+0x186>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d001      	beq.n	800727a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e1d3      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800727a:	4b3b      	ldr	r3, [pc, #236]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4937      	ldr	r1, [pc, #220]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800728e:	e03a      	b.n	8007306 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d020      	beq.n	80072da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007298:	4b34      	ldr	r3, [pc, #208]	@ (800736c <HAL_RCC_OscConfig+0x278>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729e:	f7fb ff99 	bl	80031d4 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072a6:	f7fb ff95 	bl	80031d4 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e1b4      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c4:	4b28      	ldr	r3, [pc, #160]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4925      	ldr	r1, [pc, #148]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	600b      	str	r3, [r1, #0]
 80072d8:	e015      	b.n	8007306 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072da:	4b24      	ldr	r3, [pc, #144]	@ (800736c <HAL_RCC_OscConfig+0x278>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fb ff78 	bl	80031d4 <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072e8:	f7fb ff74 	bl	80031d4 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e193      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d036      	beq.n	8007380 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d016      	beq.n	8007348 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800731a:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HAL_RCC_OscConfig+0x27c>)
 800731c:	2201      	movs	r2, #1
 800731e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007320:	f7fb ff58 	bl	80031d4 <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007328:	f7fb ff54 	bl	80031d4 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e173      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800733a:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <HAL_RCC_OscConfig+0x274>)
 800733c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f0      	beq.n	8007328 <HAL_RCC_OscConfig+0x234>
 8007346:	e01b      	b.n	8007380 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007348:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <HAL_RCC_OscConfig+0x27c>)
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734e:	f7fb ff41 	bl	80031d4 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007354:	e00e      	b.n	8007374 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007356:	f7fb ff3d 	bl	80031d4 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d907      	bls.n	8007374 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e15c      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
 8007368:	40023800 	.word	0x40023800
 800736c:	42470000 	.word	0x42470000
 8007370:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007374:	4b8a      	ldr	r3, [pc, #552]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1ea      	bne.n	8007356 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8097 	beq.w	80074bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007392:	4b83      	ldr	r3, [pc, #524]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10f      	bne.n	80073be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	4b7f      	ldr	r3, [pc, #508]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	4a7e      	ldr	r2, [pc, #504]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 80073a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80073ae:	4b7c      	ldr	r3, [pc, #496]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ba:	2301      	movs	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073be:	4b79      	ldr	r3, [pc, #484]	@ (80075a4 <HAL_RCC_OscConfig+0x4b0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d118      	bne.n	80073fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ca:	4b76      	ldr	r3, [pc, #472]	@ (80075a4 <HAL_RCC_OscConfig+0x4b0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a75      	ldr	r2, [pc, #468]	@ (80075a4 <HAL_RCC_OscConfig+0x4b0>)
 80073d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073d6:	f7fb fefd 	bl	80031d4 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073dc:	e008      	b.n	80073f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073de:	f7fb fef9 	bl	80031d4 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e118      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f0:	4b6c      	ldr	r3, [pc, #432]	@ (80075a4 <HAL_RCC_OscConfig+0x4b0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0f0      	beq.n	80073de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d106      	bne.n	8007412 <HAL_RCC_OscConfig+0x31e>
 8007404:	4b66      	ldr	r3, [pc, #408]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007408:	4a65      	ldr	r2, [pc, #404]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007410:	e01c      	b.n	800744c <HAL_RCC_OscConfig+0x358>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b05      	cmp	r3, #5
 8007418:	d10c      	bne.n	8007434 <HAL_RCC_OscConfig+0x340>
 800741a:	4b61      	ldr	r3, [pc, #388]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	4a60      	ldr	r2, [pc, #384]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007420:	f043 0304 	orr.w	r3, r3, #4
 8007424:	6713      	str	r3, [r2, #112]	@ 0x70
 8007426:	4b5e      	ldr	r3, [pc, #376]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742a:	4a5d      	ldr	r2, [pc, #372]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	6713      	str	r3, [r2, #112]	@ 0x70
 8007432:	e00b      	b.n	800744c <HAL_RCC_OscConfig+0x358>
 8007434:	4b5a      	ldr	r3, [pc, #360]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007438:	4a59      	ldr	r2, [pc, #356]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007440:	4b57      	ldr	r3, [pc, #348]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007444:	4a56      	ldr	r2, [pc, #344]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007446:	f023 0304 	bic.w	r3, r3, #4
 800744a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d015      	beq.n	8007480 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007454:	f7fb febe 	bl	80031d4 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800745a:	e00a      	b.n	8007472 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800745c:	f7fb feba 	bl	80031d4 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e0d7      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007472:	4b4b      	ldr	r3, [pc, #300]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0ee      	beq.n	800745c <HAL_RCC_OscConfig+0x368>
 800747e:	e014      	b.n	80074aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007480:	f7fb fea8 	bl	80031d4 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007486:	e00a      	b.n	800749e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007488:	f7fb fea4 	bl	80031d4 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007496:	4293      	cmp	r3, r2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e0c1      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800749e:	4b40      	ldr	r3, [pc, #256]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1ee      	bne.n	8007488 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d105      	bne.n	80074bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b0:	4b3b      	ldr	r3, [pc, #236]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	4a3a      	ldr	r2, [pc, #232]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 80074b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80ad 	beq.w	8007620 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074c6:	4b36      	ldr	r3, [pc, #216]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 030c 	and.w	r3, r3, #12
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d060      	beq.n	8007594 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d145      	bne.n	8007566 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074da:	4b33      	ldr	r3, [pc, #204]	@ (80075a8 <HAL_RCC_OscConfig+0x4b4>)
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e0:	f7fb fe78 	bl	80031d4 <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e8:	f7fb fe74 	bl	80031d4 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e093      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fa:	4b29      	ldr	r3, [pc, #164]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f0      	bne.n	80074e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	019b      	lsls	r3, r3, #6
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	3b01      	subs	r3, #1
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	061b      	lsls	r3, r3, #24
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007530:	071b      	lsls	r3, r3, #28
 8007532:	491b      	ldr	r1, [pc, #108]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007534:	4313      	orrs	r3, r2
 8007536:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007538:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <HAL_RCC_OscConfig+0x4b4>)
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753e:	f7fb fe49 	bl	80031d4 <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007546:	f7fb fe45 	bl	80031d4 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e064      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007558:	4b11      	ldr	r3, [pc, #68]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0f0      	beq.n	8007546 <HAL_RCC_OscConfig+0x452>
 8007564:	e05c      	b.n	8007620 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007566:	4b10      	ldr	r3, [pc, #64]	@ (80075a8 <HAL_RCC_OscConfig+0x4b4>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800756c:	f7fb fe32 	bl	80031d4 <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007574:	f7fb fe2e 	bl	80031d4 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e04d      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007586:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <HAL_RCC_OscConfig+0x4ac>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f0      	bne.n	8007574 <HAL_RCC_OscConfig+0x480>
 8007592:	e045      	b.n	8007620 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d107      	bne.n	80075ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e040      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
 80075a0:	40023800 	.word	0x40023800
 80075a4:	40007000 	.word	0x40007000
 80075a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075ac:	4b1f      	ldr	r3, [pc, #124]	@ (800762c <HAL_RCC_OscConfig+0x538>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d030      	beq.n	800761c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d129      	bne.n	800761c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d122      	bne.n	800761c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80075dc:	4013      	ands	r3, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d119      	bne.n	800761c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f2:	085b      	lsrs	r3, r3, #1
 80075f4:	3b01      	subs	r3, #1
 80075f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d10f      	bne.n	800761c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007608:	429a      	cmp	r2, r3
 800760a:	d107      	bne.n	800761c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e000      	b.n	8007622 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40023800 	.word	0x40023800

08007630 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e10c      	b.n	800786c <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fa ffe8 	bl	800263c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f903 	bl	8007880 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f938 	bl	80078f0 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d030      	beq.n	80076ea <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f975 	bl	8007978 <SAI_GetInputClock>
 800768e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	025b      	lsls	r3, r3, #9
 80076a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a6:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4a72      	ldr	r2, [pc, #456]	@ (8007874 <HAL_SAI_Init+0x244>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	08da      	lsrs	r2, r3, #3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80076b6:	68f9      	ldr	r1, [r7, #12]
 80076b8:	4b6e      	ldr	r3, [pc, #440]	@ (8007874 <HAL_SAI_Init+0x244>)
 80076ba:	fba3 2301 	umull	r2, r3, r3, r1
 80076be:	08da      	lsrs	r2, r3, #3
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	1aca      	subs	r2, r1, r3
 80076ca:	2a08      	cmp	r2, #8
 80076cc:	d904      	bls.n	80076d8 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d104      	bne.n	80076ea <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	085a      	lsrs	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_SAI_Init+0xca>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d109      	bne.n	800770e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_SAI_Init+0xd6>
 8007702:	2300      	movs	r3, #0
 8007704:	e001      	b.n	800770a <HAL_SAI_Init+0xda>
 8007706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e008      	b.n	8007720 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	2b01      	cmp	r3, #1
 8007714:	d102      	bne.n	800771c <HAL_SAI_Init+0xec>
 8007716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800771a:	e000      	b.n	800771e <HAL_SAI_Init+0xee>
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	2b03      	cmp	r3, #3
 8007726:	d811      	bhi.n	800774c <HAL_SAI_Init+0x11c>
 8007728:	2b02      	cmp	r3, #2
 800772a:	d20b      	bcs.n	8007744 <HAL_SAI_Init+0x114>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_SAI_Init+0x106>
 8007730:	2b01      	cmp	r3, #1
 8007732:	d003      	beq.n	800773c <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007734:	e00a      	b.n	800774c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
    break;
 800773a:	e008      	b.n	800774e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800773c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007740:	613b      	str	r3, [r7, #16]
    break;
 8007742:	e004      	b.n	800774e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007744:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007748:	613b      	str	r3, [r7, #16]
    break;
 800774a:	e000      	b.n	800774e <HAL_SAI_Init+0x11e>
      break;
 800774c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4b47      	ldr	r3, [pc, #284]	@ (8007878 <HAL_SAI_Init+0x248>)
 800775a:	400b      	ands	r3, r1
 800775c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800776c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007772:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007778:	431a      	orrs	r2, r3
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007786:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007792:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007798:	051b      	lsls	r3, r3, #20
 800779a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80077b2:	f023 030f 	bic.w	r3, r3, #15
 80077b6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6859      	ldr	r1, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6899      	ldr	r1, [r3, #8]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4b26      	ldr	r3, [pc, #152]	@ (800787c <HAL_SAI_Init+0x24c>)
 80077e2:	400b      	ands	r3, r1
 80077e4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6899      	ldr	r1, [r3, #8]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80077f6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80077fc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007802:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007808:	3b01      	subs	r3, #1
 800780a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800780c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68d9      	ldr	r1, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007824:	400b      	ands	r3, r1
 8007826:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68d9      	ldr	r1, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007836:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800783c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800783e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007844:	3b01      	subs	r3, #1
 8007846:	021b      	lsls	r3, r3, #8
 8007848:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	cccccccd 	.word	0xcccccccd
 8007878:	ff05c010 	.word	0xff05c010
 800787c:	fff88000 	.word	0xfff88000

08007880 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007888:	4b17      	ldr	r3, [pc, #92]	@ (80078e8 <SAI_Disable+0x68>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a17      	ldr	r2, [pc, #92]	@ (80078ec <SAI_Disable+0x6c>)
 800788e:	fba2 2303 	umull	r2, r3, r2, r3
 8007892:	0b1b      	lsrs	r3, r3, #12
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80078aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	1e5a      	subs	r2, r3, #1
 80078b0:	60fa      	str	r2, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	72fb      	strb	r3, [r7, #11]
      break;
 80078ca:	e006      	b.n	80078da <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e8      	bne.n	80078ac <SAI_Disable+0x2c>

  return status;
 80078da:	7afb      	ldrb	r3, [r7, #11]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	20000000 	.word	0x20000000
 80078ec:	95cbec1b 	.word	0x95cbec1b

080078f0 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d00c      	beq.n	800791a <SAI_BlockSynchroConfig+0x2a>
 8007900:	2b02      	cmp	r3, #2
 8007902:	d80d      	bhi.n	8007920 <SAI_BlockSynchroConfig+0x30>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <SAI_BlockSynchroConfig+0x1e>
 8007908:	2b01      	cmp	r3, #1
 800790a:	d003      	beq.n	8007914 <SAI_BlockSynchroConfig+0x24>
 800790c:	e008      	b.n	8007920 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
      break;
 8007912:	e008      	b.n	8007926 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007914:	2310      	movs	r3, #16
 8007916:	60fb      	str	r3, [r7, #12]
      break;
 8007918:	e005      	b.n	8007926 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800791a:	2320      	movs	r3, #32
 800791c:	60fb      	str	r3, [r7, #12]
      break;
 800791e:	e002      	b.n	8007926 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]
      break;
 8007924:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b03      	cmp	r3, #3
 800792c:	d103      	bne.n	8007936 <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f043 0301 	orr.w	r3, r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a0b      	ldr	r2, [pc, #44]	@ (8007968 <SAI_BlockSynchroConfig+0x78>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d004      	beq.n	800794a <SAI_BlockSynchroConfig+0x5a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a09      	ldr	r2, [pc, #36]	@ (800796c <SAI_BlockSynchroConfig+0x7c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d103      	bne.n	8007952 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 800794a:	4a09      	ldr	r2, [pc, #36]	@ (8007970 <SAI_BlockSynchroConfig+0x80>)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e003      	b.n	800795a <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007952:	4a08      	ldr	r2, [pc, #32]	@ (8007974 <SAI_BlockSynchroConfig+0x84>)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007958:	bf00      	nop
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40015804 	.word	0x40015804
 800796c:	40015824 	.word	0x40015824
 8007970:	40015800 	.word	0x40015800
 8007974:	40015c00 	.word	0x40015c00

08007978 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a0a      	ldr	r2, [pc, #40]	@ (80079b4 <SAI_GetInputClock+0x3c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d004      	beq.n	8007998 <SAI_GetInputClock+0x20>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a09      	ldr	r2, [pc, #36]	@ (80079b8 <SAI_GetInputClock+0x40>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d104      	bne.n	80079a2 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007998:	2004      	movs	r0, #4
 800799a:	f7fe ffb7 	bl	800690c <HAL_RCCEx_GetPeriphCLKFreq>
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	e003      	b.n	80079aa <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80079a2:	2008      	movs	r0, #8
 80079a4:	f7fe ffb2 	bl	800690c <HAL_RCCEx_GetPeriphCLKFreq>
 80079a8:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 80079aa:	68fb      	ldr	r3, [r7, #12]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40015804 	.word	0x40015804
 80079b8:	40015824 	.word	0x40015824

080079bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e07b      	b.n	8007ac6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d108      	bne.n	80079e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079de:	d009      	beq.n	80079f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	61da      	str	r2, [r3, #28]
 80079e6:	e005      	b.n	80079f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fa ff12 	bl	8002838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a78:	ea42 0103 	orr.w	r1, r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	0c1b      	lsrs	r3, r3, #16
 8007a92:	f003 0104 	and.w	r1, r3, #4
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9a:	f003 0210 	and.w	r2, r3, #16
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b088      	sub	sp, #32
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	603b      	str	r3, [r7, #0]
 8007ada:	4613      	mov	r3, r2
 8007adc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_SPI_Transmit+0x22>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e12d      	b.n	8007d4c <HAL_SPI_Transmit+0x27e>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007af8:	f7fb fb6c 	bl	80031d4 <HAL_GetTick>
 8007afc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d002      	beq.n	8007b14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b12:	e116      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <HAL_SPI_Transmit+0x52>
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b24:	e10d      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2203      	movs	r2, #3
 8007b2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	88fa      	ldrh	r2, [r7, #6]
 8007b3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b6c:	d10f      	bne.n	8007b8e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b98:	2b40      	cmp	r3, #64	@ 0x40
 8007b9a:	d007      	beq.n	8007bac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bb4:	d14f      	bne.n	8007c56 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <HAL_SPI_Transmit+0xf6>
 8007bbe:	8afb      	ldrh	r3, [r7, #22]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d142      	bne.n	8007c4a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc8:	881a      	ldrh	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007be8:	e02f      	b.n	8007c4a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d112      	bne.n	8007c1e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfc:	881a      	ldrh	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c08:	1c9a      	adds	r2, r3, #2
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007c1c:	e015      	b.n	8007c4a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c1e:	f7fb fad9 	bl	80031d4 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d803      	bhi.n	8007c36 <HAL_SPI_Transmit+0x168>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d102      	bne.n	8007c3c <HAL_SPI_Transmit+0x16e>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007c48:	e07b      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1ca      	bne.n	8007bea <HAL_SPI_Transmit+0x11c>
 8007c54:	e050      	b.n	8007cf8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_SPI_Transmit+0x196>
 8007c5e:	8afb      	ldrh	r3, [r7, #22]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d144      	bne.n	8007cee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c8a:	e030      	b.n	8007cee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d113      	bne.n	8007cc2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	7812      	ldrb	r2, [r2, #0]
 8007ca6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007cc0:	e015      	b.n	8007cee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cc2:	f7fb fa87 	bl	80031d4 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d803      	bhi.n	8007cda <HAL_SPI_Transmit+0x20c>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd8:	d102      	bne.n	8007ce0 <HAL_SPI_Transmit+0x212>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007cec:	e029      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1c9      	bne.n	8007c8c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fa61 	bl	80081c4 <SPI_EndRxTxTransaction>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d16:	2300      	movs	r3, #0
 8007d18:	613b      	str	r3, [r7, #16]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e003      	b.n	8007d42 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08c      	sub	sp, #48	@ 0x30
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
 8007d60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d62:	2301      	movs	r3, #1
 8007d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_SPI_TransmitReceive+0x26>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e198      	b.n	80080ac <HAL_SPI_TransmitReceive+0x358>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d82:	f7fb fa27 	bl	80031d4 <HAL_GetTick>
 8007d86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d98:	887b      	ldrh	r3, [r7, #2]
 8007d9a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d00f      	beq.n	8007dc4 <HAL_SPI_TransmitReceive+0x70>
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007daa:	d107      	bne.n	8007dbc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <HAL_SPI_TransmitReceive+0x68>
 8007db4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d003      	beq.n	8007dc4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007dc2:	e16d      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <HAL_SPI_TransmitReceive+0x82>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <HAL_SPI_TransmitReceive+0x82>
 8007dd0:	887b      	ldrh	r3, [r7, #2]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d103      	bne.n	8007dde <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007ddc:	e160      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d003      	beq.n	8007df2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2205      	movs	r2, #5
 8007dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	887a      	ldrh	r2, [r7, #2]
 8007e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	887a      	ldrh	r2, [r7, #2]
 8007e08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	887a      	ldrh	r2, [r7, #2]
 8007e14:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	887a      	ldrh	r2, [r7, #2]
 8007e1a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e32:	2b40      	cmp	r3, #64	@ 0x40
 8007e34:	d007      	beq.n	8007e46 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e4e:	d17c      	bne.n	8007f4a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <HAL_SPI_TransmitReceive+0x10a>
 8007e58:	8b7b      	ldrh	r3, [r7, #26]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d16a      	bne.n	8007f34 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e62:	881a      	ldrh	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e6e:	1c9a      	adds	r2, r3, #2
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e82:	e057      	b.n	8007f34 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d11b      	bne.n	8007eca <HAL_SPI_TransmitReceive+0x176>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d016      	beq.n	8007eca <HAL_SPI_TransmitReceive+0x176>
 8007e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d113      	bne.n	8007eca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea6:	881a      	ldrh	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb2:	1c9a      	adds	r2, r3, #2
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d119      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x1b8>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d014      	beq.n	8007f0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	b292      	uxth	r2, r2
 8007eee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef4:	1c9a      	adds	r2, r3, #2
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f0c:	f7fb f962 	bl	80031d4 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d80b      	bhi.n	8007f34 <HAL_SPI_TransmitReceive+0x1e0>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f22:	d007      	beq.n	8007f34 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007f32:	e0b5      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1a2      	bne.n	8007e84 <HAL_SPI_TransmitReceive+0x130>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d19d      	bne.n	8007e84 <HAL_SPI_TransmitReceive+0x130>
 8007f48:	e080      	b.n	800804c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <HAL_SPI_TransmitReceive+0x204>
 8007f52:	8b7b      	ldrh	r3, [r7, #26]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d16f      	bne.n	8008038 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	330c      	adds	r3, #12
 8007f62:	7812      	ldrb	r2, [r2, #0]
 8007f64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f7e:	e05b      	b.n	8008038 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d11c      	bne.n	8007fc8 <HAL_SPI_TransmitReceive+0x274>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d017      	beq.n	8007fc8 <HAL_SPI_TransmitReceive+0x274>
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d114      	bne.n	8007fc8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	7812      	ldrb	r2, [r2, #0]
 8007faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d119      	bne.n	800800a <HAL_SPI_TransmitReceive+0x2b6>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d014      	beq.n	800800a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008006:	2301      	movs	r3, #1
 8008008:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800800a:	f7fb f8e3 	bl	80031d4 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008016:	429a      	cmp	r2, r3
 8008018:	d803      	bhi.n	8008022 <HAL_SPI_TransmitReceive+0x2ce>
 800801a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	d102      	bne.n	8008028 <HAL_SPI_TransmitReceive+0x2d4>
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d107      	bne.n	8008038 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008036:	e033      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d19e      	bne.n	8007f80 <HAL_SPI_TransmitReceive+0x22c>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008046:	b29b      	uxth	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d199      	bne.n	8007f80 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800804c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800804e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f8b7 	bl	80081c4 <SPI_EndRxTxTransaction>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d006      	beq.n	800806a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2220      	movs	r2, #32
 8008066:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008068:	e01a      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10a      	bne.n	8008088 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008096:	e003      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80080a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3730      	adds	r7, #48	@ 0x30
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080c4:	f7fb f886 	bl	80031d4 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	4413      	add	r3, r2
 80080d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080d4:	f7fb f87e 	bl	80031d4 <HAL_GetTick>
 80080d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080da:	4b39      	ldr	r3, [pc, #228]	@ (80081c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	015b      	lsls	r3, r3, #5
 80080e0:	0d1b      	lsrs	r3, r3, #20
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	fb02 f303 	mul.w	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ea:	e054      	b.n	8008196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d050      	beq.n	8008196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080f4:	f7fb f86e 	bl	80031d4 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	429a      	cmp	r2, r3
 8008102:	d902      	bls.n	800810a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d13d      	bne.n	8008186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008122:	d111      	bne.n	8008148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800812c:	d004      	beq.n	8008138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008136:	d107      	bne.n	8008148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008150:	d10f      	bne.n	8008172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e017      	b.n	80081b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3b01      	subs	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4013      	ands	r3, r2
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	bf0c      	ite	eq
 80081a6:	2301      	moveq	r3, #1
 80081a8:	2300      	movne	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d19b      	bne.n	80080ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3720      	adds	r7, #32
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000000 	.word	0x20000000

080081c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2201      	movs	r2, #1
 80081d8:	2102      	movs	r1, #2
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7ff ff6a 	bl	80080b4 <SPI_WaitFlagStateUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ea:	f043 0220 	orr.w	r2, r3, #32
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e032      	b.n	800825c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008264 <SPI_EndRxTxTransaction+0xa0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008268 <SPI_EndRxTxTransaction+0xa4>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	0d5b      	lsrs	r3, r3, #21
 8008202:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008214:	d112      	bne.n	800823c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	2180      	movs	r1, #128	@ 0x80
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7ff ff47 	bl	80080b4 <SPI_WaitFlagStateUntilTimeout>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d016      	beq.n	800825a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008230:	f043 0220 	orr.w	r2, r3, #32
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e00f      	b.n	800825c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	3b01      	subs	r3, #1
 8008246:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008252:	2b80      	cmp	r3, #128	@ 0x80
 8008254:	d0f2      	beq.n	800823c <SPI_EndRxTxTransaction+0x78>
 8008256:	e000      	b.n	800825a <SPI_EndRxTxTransaction+0x96>
        break;
 8008258:	bf00      	nop
  }

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000000 	.word	0x20000000
 8008268:	165e9f81 	.word	0x165e9f81

0800826c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e041      	b.n	8008302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fa fe2a 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f000 fbec 	bl	8008a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b01      	cmp	r3, #1
 800831e:	d001      	beq.n	8008324 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e046      	b.n	80083b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a23      	ldr	r2, [pc, #140]	@ (80083c0 <HAL_TIM_Base_Start+0xb4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d022      	beq.n	800837c <HAL_TIM_Base_Start+0x70>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800833e:	d01d      	beq.n	800837c <HAL_TIM_Base_Start+0x70>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a1f      	ldr	r2, [pc, #124]	@ (80083c4 <HAL_TIM_Base_Start+0xb8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <HAL_TIM_Base_Start+0x70>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a1e      	ldr	r2, [pc, #120]	@ (80083c8 <HAL_TIM_Base_Start+0xbc>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d013      	beq.n	800837c <HAL_TIM_Base_Start+0x70>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a1c      	ldr	r2, [pc, #112]	@ (80083cc <HAL_TIM_Base_Start+0xc0>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00e      	beq.n	800837c <HAL_TIM_Base_Start+0x70>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a1b      	ldr	r2, [pc, #108]	@ (80083d0 <HAL_TIM_Base_Start+0xc4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d009      	beq.n	800837c <HAL_TIM_Base_Start+0x70>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a19      	ldr	r2, [pc, #100]	@ (80083d4 <HAL_TIM_Base_Start+0xc8>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d004      	beq.n	800837c <HAL_TIM_Base_Start+0x70>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a18      	ldr	r2, [pc, #96]	@ (80083d8 <HAL_TIM_Base_Start+0xcc>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d111      	bne.n	80083a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b06      	cmp	r3, #6
 800838c:	d010      	beq.n	80083b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f042 0201 	orr.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839e:	e007      	b.n	80083b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40010000 	.word	0x40010000
 80083c4:	40000400 	.word	0x40000400
 80083c8:	40000800 	.word	0x40000800
 80083cc:	40000c00 	.word	0x40000c00
 80083d0:	40010400 	.word	0x40010400
 80083d4:	40014000 	.word	0x40014000
 80083d8:	40001800 	.word	0x40001800

080083dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e041      	b.n	8008472 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f839 	bl	800847a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f000 fb34 	bl	8008a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e041      	b.n	8008524 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fa fd3b 	bl	8002f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4610      	mov	r0, r2
 80084ce:	f000 fadb 	bl	8008a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d109      	bne.n	8008550 <HAL_TIM_PWM_Start+0x24>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	e022      	b.n	8008596 <HAL_TIM_PWM_Start+0x6a>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b04      	cmp	r3, #4
 8008554:	d109      	bne.n	800856a <HAL_TIM_PWM_Start+0x3e>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b01      	cmp	r3, #1
 8008560:	bf14      	ite	ne
 8008562:	2301      	movne	r3, #1
 8008564:	2300      	moveq	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	e015      	b.n	8008596 <HAL_TIM_PWM_Start+0x6a>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b08      	cmp	r3, #8
 800856e:	d109      	bne.n	8008584 <HAL_TIM_PWM_Start+0x58>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b01      	cmp	r3, #1
 800857a:	bf14      	ite	ne
 800857c:	2301      	movne	r3, #1
 800857e:	2300      	moveq	r3, #0
 8008580:	b2db      	uxtb	r3, r3
 8008582:	e008      	b.n	8008596 <HAL_TIM_PWM_Start+0x6a>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	bf14      	ite	ne
 8008590:	2301      	movne	r3, #1
 8008592:	2300      	moveq	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e07c      	b.n	8008698 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <HAL_TIM_PWM_Start+0x82>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085ac:	e013      	b.n	80085d6 <HAL_TIM_PWM_Start+0xaa>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d104      	bne.n	80085be <HAL_TIM_PWM_Start+0x92>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085bc:	e00b      	b.n	80085d6 <HAL_TIM_PWM_Start+0xaa>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d104      	bne.n	80085ce <HAL_TIM_PWM_Start+0xa2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085cc:	e003      	b.n	80085d6 <HAL_TIM_PWM_Start+0xaa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2202      	movs	r2, #2
 80085d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2201      	movs	r2, #1
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fd48 	bl	8009074 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a2d      	ldr	r2, [pc, #180]	@ (80086a0 <HAL_TIM_PWM_Start+0x174>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <HAL_TIM_PWM_Start+0xcc>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a2c      	ldr	r2, [pc, #176]	@ (80086a4 <HAL_TIM_PWM_Start+0x178>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d101      	bne.n	80085fc <HAL_TIM_PWM_Start+0xd0>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <HAL_TIM_PWM_Start+0xd2>
 80085fc:	2300      	movs	r3, #0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008610:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a22      	ldr	r2, [pc, #136]	@ (80086a0 <HAL_TIM_PWM_Start+0x174>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d022      	beq.n	8008662 <HAL_TIM_PWM_Start+0x136>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008624:	d01d      	beq.n	8008662 <HAL_TIM_PWM_Start+0x136>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a1f      	ldr	r2, [pc, #124]	@ (80086a8 <HAL_TIM_PWM_Start+0x17c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d018      	beq.n	8008662 <HAL_TIM_PWM_Start+0x136>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1d      	ldr	r2, [pc, #116]	@ (80086ac <HAL_TIM_PWM_Start+0x180>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_TIM_PWM_Start+0x136>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1c      	ldr	r2, [pc, #112]	@ (80086b0 <HAL_TIM_PWM_Start+0x184>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_TIM_PWM_Start+0x136>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a16      	ldr	r2, [pc, #88]	@ (80086a4 <HAL_TIM_PWM_Start+0x178>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_TIM_PWM_Start+0x136>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a18      	ldr	r2, [pc, #96]	@ (80086b4 <HAL_TIM_PWM_Start+0x188>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_TIM_PWM_Start+0x136>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a16      	ldr	r2, [pc, #88]	@ (80086b8 <HAL_TIM_PWM_Start+0x18c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d111      	bne.n	8008686 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b06      	cmp	r3, #6
 8008672:	d010      	beq.n	8008696 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0201 	orr.w	r2, r2, #1
 8008682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008684:	e007      	b.n	8008696 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0201 	orr.w	r2, r2, #1
 8008694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40010400 	.word	0x40010400
 80086a8:	40000400 	.word	0x40000400
 80086ac:	40000800 	.word	0x40000800
 80086b0:	40000c00 	.word	0x40000c00
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40001800 	.word	0x40001800

080086bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d101      	bne.n	80086da <HAL_TIM_OC_ConfigChannel+0x1e>
 80086d6:	2302      	movs	r3, #2
 80086d8:	e048      	b.n	800876c <HAL_TIM_OC_ConfigChannel+0xb0>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b0c      	cmp	r3, #12
 80086e6:	d839      	bhi.n	800875c <HAL_TIM_OC_ConfigChannel+0xa0>
 80086e8:	a201      	add	r2, pc, #4	@ (adr r2, 80086f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80086ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ee:	bf00      	nop
 80086f0:	08008725 	.word	0x08008725
 80086f4:	0800875d 	.word	0x0800875d
 80086f8:	0800875d 	.word	0x0800875d
 80086fc:	0800875d 	.word	0x0800875d
 8008700:	08008733 	.word	0x08008733
 8008704:	0800875d 	.word	0x0800875d
 8008708:	0800875d 	.word	0x0800875d
 800870c:	0800875d 	.word	0x0800875d
 8008710:	08008741 	.word	0x08008741
 8008714:	0800875d 	.word	0x0800875d
 8008718:	0800875d 	.word	0x0800875d
 800871c:	0800875d 	.word	0x0800875d
 8008720:	0800874f 	.word	0x0800874f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 fa58 	bl	8008be0 <TIM_OC1_SetConfig>
      break;
 8008730:	e017      	b.n	8008762 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fac1 	bl	8008cc0 <TIM_OC2_SetConfig>
      break;
 800873e:	e010      	b.n	8008762 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68b9      	ldr	r1, [r7, #8]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fb30 	bl	8008dac <TIM_OC3_SetConfig>
      break;
 800874c:	e009      	b.n	8008762 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	4618      	mov	r0, r3
 8008756:	f000 fb9d 	bl	8008e94 <TIM_OC4_SetConfig>
      break;
 800875a:	e002      	b.n	8008762 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	75fb      	strb	r3, [r7, #23]
      break;
 8008760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800878e:	2302      	movs	r3, #2
 8008790:	e0ae      	b.n	80088f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b0c      	cmp	r3, #12
 800879e:	f200 809f 	bhi.w	80088e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087a2:	a201      	add	r2, pc, #4	@ (adr r2, 80087a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087dd 	.word	0x080087dd
 80087ac:	080088e1 	.word	0x080088e1
 80087b0:	080088e1 	.word	0x080088e1
 80087b4:	080088e1 	.word	0x080088e1
 80087b8:	0800881d 	.word	0x0800881d
 80087bc:	080088e1 	.word	0x080088e1
 80087c0:	080088e1 	.word	0x080088e1
 80087c4:	080088e1 	.word	0x080088e1
 80087c8:	0800885f 	.word	0x0800885f
 80087cc:	080088e1 	.word	0x080088e1
 80087d0:	080088e1 	.word	0x080088e1
 80087d4:	080088e1 	.word	0x080088e1
 80087d8:	0800889f 	.word	0x0800889f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 f9fc 	bl	8008be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0208 	orr.w	r2, r2, #8
 80087f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0204 	bic.w	r2, r2, #4
 8008806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6999      	ldr	r1, [r3, #24]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	619a      	str	r2, [r3, #24]
      break;
 800881a:	e064      	b.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fa4c 	bl	8008cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699a      	ldr	r2, [r3, #24]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699a      	ldr	r2, [r3, #24]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6999      	ldr	r1, [r3, #24]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	021a      	lsls	r2, r3, #8
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	619a      	str	r2, [r3, #24]
      break;
 800885c:	e043      	b.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 faa1 	bl	8008dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0208 	orr.w	r2, r2, #8
 8008878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69da      	ldr	r2, [r3, #28]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0204 	bic.w	r2, r2, #4
 8008888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69d9      	ldr	r1, [r3, #28]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	691a      	ldr	r2, [r3, #16]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	61da      	str	r2, [r3, #28]
      break;
 800889c:	e023      	b.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 faf5 	bl	8008e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69da      	ldr	r2, [r3, #28]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	69da      	ldr	r2, [r3, #28]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69d9      	ldr	r1, [r3, #28]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	021a      	lsls	r2, r3, #8
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	61da      	str	r2, [r3, #28]
      break;
 80088de:	e002      	b.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	75fb      	strb	r3, [r7, #23]
      break;
 80088e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_TIM_ConfigClockSource+0x1c>
 8008910:	2302      	movs	r3, #2
 8008912:	e0b4      	b.n	8008a7e <HAL_TIM_ConfigClockSource+0x186>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800893a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800894c:	d03e      	beq.n	80089cc <HAL_TIM_ConfigClockSource+0xd4>
 800894e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008952:	f200 8087 	bhi.w	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
 8008956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800895a:	f000 8086 	beq.w	8008a6a <HAL_TIM_ConfigClockSource+0x172>
 800895e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008962:	d87f      	bhi.n	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
 8008964:	2b70      	cmp	r3, #112	@ 0x70
 8008966:	d01a      	beq.n	800899e <HAL_TIM_ConfigClockSource+0xa6>
 8008968:	2b70      	cmp	r3, #112	@ 0x70
 800896a:	d87b      	bhi.n	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
 800896c:	2b60      	cmp	r3, #96	@ 0x60
 800896e:	d050      	beq.n	8008a12 <HAL_TIM_ConfigClockSource+0x11a>
 8008970:	2b60      	cmp	r3, #96	@ 0x60
 8008972:	d877      	bhi.n	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
 8008974:	2b50      	cmp	r3, #80	@ 0x50
 8008976:	d03c      	beq.n	80089f2 <HAL_TIM_ConfigClockSource+0xfa>
 8008978:	2b50      	cmp	r3, #80	@ 0x50
 800897a:	d873      	bhi.n	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
 800897c:	2b40      	cmp	r3, #64	@ 0x40
 800897e:	d058      	beq.n	8008a32 <HAL_TIM_ConfigClockSource+0x13a>
 8008980:	2b40      	cmp	r3, #64	@ 0x40
 8008982:	d86f      	bhi.n	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
 8008984:	2b30      	cmp	r3, #48	@ 0x30
 8008986:	d064      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x15a>
 8008988:	2b30      	cmp	r3, #48	@ 0x30
 800898a:	d86b      	bhi.n	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
 800898c:	2b20      	cmp	r3, #32
 800898e:	d060      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x15a>
 8008990:	2b20      	cmp	r3, #32
 8008992:	d867      	bhi.n	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
 8008994:	2b00      	cmp	r3, #0
 8008996:	d05c      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x15a>
 8008998:	2b10      	cmp	r3, #16
 800899a:	d05a      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x15a>
 800899c:	e062      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089ae:	f000 fb41 	bl	8009034 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	609a      	str	r2, [r3, #8]
      break;
 80089ca:	e04f      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089dc:	f000 fb2a 	bl	8009034 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089ee:	609a      	str	r2, [r3, #8]
      break;
 80089f0:	e03c      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089fe:	461a      	mov	r2, r3
 8008a00:	f000 fa9e 	bl	8008f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2150      	movs	r1, #80	@ 0x50
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 faf7 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008a10:	e02c      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f000 fabd 	bl	8008f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2160      	movs	r1, #96	@ 0x60
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fae7 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008a30:	e01c      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f000 fa7e 	bl	8008f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2140      	movs	r1, #64	@ 0x40
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 fad7 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008a50:	e00c      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f000 face 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008a62:	e003      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	73fb      	strb	r3, [r7, #15]
      break;
 8008a68:	e000      	b.n	8008a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a46      	ldr	r2, [pc, #280]	@ (8008bb4 <TIM_Base_SetConfig+0x12c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d013      	beq.n	8008ac8 <TIM_Base_SetConfig+0x40>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aa6:	d00f      	beq.n	8008ac8 <TIM_Base_SetConfig+0x40>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a43      	ldr	r2, [pc, #268]	@ (8008bb8 <TIM_Base_SetConfig+0x130>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d00b      	beq.n	8008ac8 <TIM_Base_SetConfig+0x40>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a42      	ldr	r2, [pc, #264]	@ (8008bbc <TIM_Base_SetConfig+0x134>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d007      	beq.n	8008ac8 <TIM_Base_SetConfig+0x40>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a41      	ldr	r2, [pc, #260]	@ (8008bc0 <TIM_Base_SetConfig+0x138>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d003      	beq.n	8008ac8 <TIM_Base_SetConfig+0x40>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a40      	ldr	r2, [pc, #256]	@ (8008bc4 <TIM_Base_SetConfig+0x13c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d108      	bne.n	8008ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a35      	ldr	r2, [pc, #212]	@ (8008bb4 <TIM_Base_SetConfig+0x12c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d02b      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae8:	d027      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a32      	ldr	r2, [pc, #200]	@ (8008bb8 <TIM_Base_SetConfig+0x130>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d023      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a31      	ldr	r2, [pc, #196]	@ (8008bbc <TIM_Base_SetConfig+0x134>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d01f      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a30      	ldr	r2, [pc, #192]	@ (8008bc0 <TIM_Base_SetConfig+0x138>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d01b      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a2f      	ldr	r2, [pc, #188]	@ (8008bc4 <TIM_Base_SetConfig+0x13c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d017      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8008bc8 <TIM_Base_SetConfig+0x140>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d013      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a2d      	ldr	r2, [pc, #180]	@ (8008bcc <TIM_Base_SetConfig+0x144>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00f      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8008bd0 <TIM_Base_SetConfig+0x148>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00b      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a2b      	ldr	r2, [pc, #172]	@ (8008bd4 <TIM_Base_SetConfig+0x14c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d007      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8008bd8 <TIM_Base_SetConfig+0x150>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d003      	beq.n	8008b3a <TIM_Base_SetConfig+0xb2>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a29      	ldr	r2, [pc, #164]	@ (8008bdc <TIM_Base_SetConfig+0x154>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d108      	bne.n	8008b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689a      	ldr	r2, [r3, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a10      	ldr	r2, [pc, #64]	@ (8008bb4 <TIM_Base_SetConfig+0x12c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d003      	beq.n	8008b80 <TIM_Base_SetConfig+0xf8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a12      	ldr	r2, [pc, #72]	@ (8008bc4 <TIM_Base_SetConfig+0x13c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d103      	bne.n	8008b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	691a      	ldr	r2, [r3, #16]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d105      	bne.n	8008ba6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f023 0201 	bic.w	r2, r3, #1
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	611a      	str	r2, [r3, #16]
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40000400 	.word	0x40000400
 8008bbc:	40000800 	.word	0x40000800
 8008bc0:	40000c00 	.word	0x40000c00
 8008bc4:	40010400 	.word	0x40010400
 8008bc8:	40014000 	.word	0x40014000
 8008bcc:	40014400 	.word	0x40014400
 8008bd0:	40014800 	.word	0x40014800
 8008bd4:	40001800 	.word	0x40001800
 8008bd8:	40001c00 	.word	0x40001c00
 8008bdc:	40002000 	.word	0x40002000

08008be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	f023 0201 	bic.w	r2, r3, #1
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0303 	bic.w	r3, r3, #3
 8008c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f023 0302 	bic.w	r3, r3, #2
 8008c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a20      	ldr	r2, [pc, #128]	@ (8008cb8 <TIM_OC1_SetConfig+0xd8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d003      	beq.n	8008c44 <TIM_OC1_SetConfig+0x64>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008cbc <TIM_OC1_SetConfig+0xdc>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d10c      	bne.n	8008c5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f023 0308 	bic.w	r3, r3, #8
 8008c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f023 0304 	bic.w	r3, r3, #4
 8008c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a15      	ldr	r2, [pc, #84]	@ (8008cb8 <TIM_OC1_SetConfig+0xd8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d003      	beq.n	8008c6e <TIM_OC1_SetConfig+0x8e>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a14      	ldr	r2, [pc, #80]	@ (8008cbc <TIM_OC1_SetConfig+0xdc>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d111      	bne.n	8008c92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	621a      	str	r2, [r3, #32]
}
 8008cac:	bf00      	nop
 8008cae:	371c      	adds	r7, #28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	40010000 	.word	0x40010000
 8008cbc:	40010400 	.word	0x40010400

08008cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	f023 0210 	bic.w	r2, r3, #16
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f023 0320 	bic.w	r3, r3, #32
 8008d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a22      	ldr	r2, [pc, #136]	@ (8008da4 <TIM_OC2_SetConfig+0xe4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d003      	beq.n	8008d28 <TIM_OC2_SetConfig+0x68>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a21      	ldr	r2, [pc, #132]	@ (8008da8 <TIM_OC2_SetConfig+0xe8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d10d      	bne.n	8008d44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a17      	ldr	r2, [pc, #92]	@ (8008da4 <TIM_OC2_SetConfig+0xe4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d003      	beq.n	8008d54 <TIM_OC2_SetConfig+0x94>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a16      	ldr	r2, [pc, #88]	@ (8008da8 <TIM_OC2_SetConfig+0xe8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d113      	bne.n	8008d7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	621a      	str	r2, [r3, #32]
}
 8008d96:	bf00      	nop
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40010000 	.word	0x40010000
 8008da8:	40010400 	.word	0x40010400

08008dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a21      	ldr	r2, [pc, #132]	@ (8008e8c <TIM_OC3_SetConfig+0xe0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC3_SetConfig+0x66>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a20      	ldr	r2, [pc, #128]	@ (8008e90 <TIM_OC3_SetConfig+0xe4>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d10d      	bne.n	8008e2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	021b      	lsls	r3, r3, #8
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a16      	ldr	r2, [pc, #88]	@ (8008e8c <TIM_OC3_SetConfig+0xe0>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d003      	beq.n	8008e3e <TIM_OC3_SetConfig+0x92>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a15      	ldr	r2, [pc, #84]	@ (8008e90 <TIM_OC3_SetConfig+0xe4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d113      	bne.n	8008e66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	621a      	str	r2, [r3, #32]
}
 8008e80:	bf00      	nop
 8008e82:	371c      	adds	r7, #28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	40010000 	.word	0x40010000
 8008e90:	40010400 	.word	0x40010400

08008e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	031b      	lsls	r3, r3, #12
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a12      	ldr	r2, [pc, #72]	@ (8008f38 <TIM_OC4_SetConfig+0xa4>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_OC4_SetConfig+0x68>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a11      	ldr	r2, [pc, #68]	@ (8008f3c <TIM_OC4_SetConfig+0xa8>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d109      	bne.n	8008f10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	019b      	lsls	r3, r3, #6
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	621a      	str	r2, [r3, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40010000 	.word	0x40010000
 8008f3c:	40010400 	.word	0x40010400

08008f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f023 0201 	bic.w	r2, r3, #1
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f023 030a 	bic.w	r3, r3, #10
 8008f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b087      	sub	sp, #28
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	f023 0210 	bic.w	r2, r3, #16
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	031b      	lsls	r3, r3, #12
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	f043 0307 	orr.w	r3, r3, #7
 8009020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	609a      	str	r2, [r3, #8]
}
 8009028:	bf00      	nop
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800904e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	021a      	lsls	r2, r3, #8
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	431a      	orrs	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4313      	orrs	r3, r2
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	609a      	str	r2, [r3, #8]
}
 8009068:	bf00      	nop
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f003 031f 	and.w	r3, r3, #31
 8009086:	2201      	movs	r2, #1
 8009088:	fa02 f303 	lsl.w	r3, r2, r3
 800908c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a1a      	ldr	r2, [r3, #32]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	43db      	mvns	r3, r3
 8009096:	401a      	ands	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a1a      	ldr	r2, [r3, #32]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f003 031f 	and.w	r3, r3, #31
 80090a6:	6879      	ldr	r1, [r7, #4]
 80090a8:	fa01 f303 	lsl.w	r3, r1, r3
 80090ac:	431a      	orrs	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	621a      	str	r2, [r3, #32]
}
 80090b2:	bf00      	nop
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
	...

080090c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d101      	bne.n	80090d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090d4:	2302      	movs	r3, #2
 80090d6:	e05a      	b.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a21      	ldr	r2, [pc, #132]	@ (800919c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d022      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009124:	d01d      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a1d      	ldr	r2, [pc, #116]	@ (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d018      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a1b      	ldr	r2, [pc, #108]	@ (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d013      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a1a      	ldr	r2, [pc, #104]	@ (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00e      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a18      	ldr	r2, [pc, #96]	@ (80091ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d009      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a17      	ldr	r2, [pc, #92]	@ (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d004      	beq.n	8009162 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a15      	ldr	r2, [pc, #84]	@ (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d10c      	bne.n	800917c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009168:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4313      	orrs	r3, r2
 8009172:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	40010000 	.word	0x40010000
 80091a0:	40000400 	.word	0x40000400
 80091a4:	40000800 	.word	0x40000800
 80091a8:	40000c00 	.word	0x40000c00
 80091ac:	40010400 	.word	0x40010400
 80091b0:	40014000 	.word	0x40014000
 80091b4:	40001800 	.word	0x40001800

080091b8 <memset>:
 80091b8:	4402      	add	r2, r0
 80091ba:	4603      	mov	r3, r0
 80091bc:	4293      	cmp	r3, r2
 80091be:	d100      	bne.n	80091c2 <memset+0xa>
 80091c0:	4770      	bx	lr
 80091c2:	f803 1b01 	strb.w	r1, [r3], #1
 80091c6:	e7f9      	b.n	80091bc <memset+0x4>

080091c8 <__libc_init_array>:
 80091c8:	b570      	push	{r4, r5, r6, lr}
 80091ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009200 <__libc_init_array+0x38>)
 80091cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009204 <__libc_init_array+0x3c>)
 80091ce:	1b64      	subs	r4, r4, r5
 80091d0:	10a4      	asrs	r4, r4, #2
 80091d2:	2600      	movs	r6, #0
 80091d4:	42a6      	cmp	r6, r4
 80091d6:	d109      	bne.n	80091ec <__libc_init_array+0x24>
 80091d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009208 <__libc_init_array+0x40>)
 80091da:	4c0c      	ldr	r4, [pc, #48]	@ (800920c <__libc_init_array+0x44>)
 80091dc:	f000 f826 	bl	800922c <_init>
 80091e0:	1b64      	subs	r4, r4, r5
 80091e2:	10a4      	asrs	r4, r4, #2
 80091e4:	2600      	movs	r6, #0
 80091e6:	42a6      	cmp	r6, r4
 80091e8:	d105      	bne.n	80091f6 <__libc_init_array+0x2e>
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f0:	4798      	blx	r3
 80091f2:	3601      	adds	r6, #1
 80091f4:	e7ee      	b.n	80091d4 <__libc_init_array+0xc>
 80091f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fa:	4798      	blx	r3
 80091fc:	3601      	adds	r6, #1
 80091fe:	e7f2      	b.n	80091e6 <__libc_init_array+0x1e>
 8009200:	0800960c 	.word	0x0800960c
 8009204:	0800960c 	.word	0x0800960c
 8009208:	0800960c 	.word	0x0800960c
 800920c:	08009610 	.word	0x08009610

08009210 <memcpy>:
 8009210:	440a      	add	r2, r1
 8009212:	4291      	cmp	r1, r2
 8009214:	f100 33ff 	add.w	r3, r0, #4294967295
 8009218:	d100      	bne.n	800921c <memcpy+0xc>
 800921a:	4770      	bx	lr
 800921c:	b510      	push	{r4, lr}
 800921e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009226:	4291      	cmp	r1, r2
 8009228:	d1f9      	bne.n	800921e <memcpy+0xe>
 800922a:	bd10      	pop	{r4, pc}

0800922c <_init>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr

08009238 <_fini>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	bf00      	nop
 800923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923e:	bc08      	pop	{r3}
 8009240:	469e      	mov	lr, r3
 8009242:	4770      	bx	lr
